
&НаКлиенте
Процедура Приемка(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура Размещение(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура перемещение(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура Отргузка(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ОтборТовара(Команда)
	парам = Новый Структура("ВводПоШтучно",ВводПоШтучно);
	ОткрытьФорму("Обработка.ТСД_РСК.Форма.СписокРеализаций",парам);
КонецПроцедуры

&НаКлиенте
Процедура РазмещениеТовара(Команда)
	парам = Новый Структура("ВводПоШтучно",ВводПоШтучно);
	ОткрытьФорму("Обработка.ТСД_РСК.Форма.СписокПоступлений",парам);
КонецПроцедуры

&НаКлиенте
Процедура ОтгрузочныйЛист(Команда)
	// СписокОтгрузочныхЛистов
	парам = Новый Структура("ВводПоШтучно, ОсновнойСклад", ВводПоШтучно, ОсновнойСклад);
	ОткрытьФорму("Обработка.ТСД_РСК.Форма.СписокОтгрузочныхЛистов",парам);
КонецПроцедуры

&НаКлиенте
Процедура ВводПоШтучноИзменить(Команда)
	Если ВводПоШтучно Тогда
		Ответ = Вопрос("Выключить ВВОД ПО ШТУЧНО ?",РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ВводПоШтучно = Ложь;
		КонецЕсли;
	Иначе
		
		Ответ = Вопрос("Включить ВВОД ПО ШТУЧНО ?",РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ВводПоШтучно = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриемкаТЗ(Команда)
	
	//
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	#Если НЕ МобильныйКлиент Тогда
		Элементы.ФормаЭмитацияСканера.Видимость = Истина;	
	#КонецЕсли
	
	ПодключитьОбработкуКлавиатуры();
	
	//	НЕПОСРЕДСТВЕННО ДЛЯ ФОРМЫ ГДЕ СКАНИРУЮТ 
	Звук = Истина;
	Вибро = Истина;
	//ИнициализироватьСканер();
	ВК.ИнициализироватьСканер(Ложь, Истина);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	ВК.ОтключитьСканер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьОбработкуКлавиатуры()
		
	#Если МобильноеПриложениеКлиент Тогда
		
		Попытка
			глВКRSDriver.Подключить("Keyboard");	
		Исключение
			Сообщить("Ошибка: глВКRSDriver.Подключить(Keyboard): "+ОписаниеОшибки());
		КонецПопытки;
		
	#КонецЕсли
	
КонецПроцедуры


&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = "ПодключаемоеОборудование"
		И ИмяСобытия = "Barcode"
		И ВводДоступен() Тогда
		
		ШК = Параметр;
		
		Если Лев(ШК,3) = "001" Тогда
			
			Реализация = НайтиРеализациюПоШК(ШК);
			Если ЗначениеЗаполнено(Реализация) Тогда
				
				Парам = ПолучитьПараметры(Реализация);
				Если (НЕ ЗначениеЗаполнено(Парам.Отбор) 
					ИЛИ НЕ ЗначениеЗаполнено(Парам.РасходныйОрдер)) Тогда
					Предупреждение("Подчиненные документы не заполнены !");
					Возврат;
				КонецЕсли;
				ОткрытьФорму("Обработка.ТСД_РСК.Форма.Отбор",парам);
				
			Иначе
				Предупреждение("Задание не найдено !");
			КонецЕсли;
			
			
			
			
			
			
		ИначеЕсли Лев(ШК,3) = "003" Тогда
			
			ОтгрузочныйЛист = НайтиОтгрузЛистПоШК(ШК);
			Если ЗначениеЗаполнено(ОтгрузочныйЛист) Тогда
				
				Парам = Новый Структура("ОтгрузочныйЛист, ОсновнойСклад", ОтгрузочныйЛист, ОсновнойСклад);
				ОткрытьФорму("Обработка.ТСД_РСК.Форма.ОтгрузкаПоЛисту", Парам);
				
			Иначе
				Предупреждение("Отгрузочный лист не найден !");
			КонецЕсли;
			
			
			
			
			
		ИначеЕсли Лев(ШК,3) = "004" Тогда	
			//заказ на внут. потребление
			ЗаказНаВнутреннееПотребление 		= НайтиЗаказНаВнутреннееПотреблениеПоШК(ШК);;
			ВнутреннееПотреблениеТоваров 		= ВнутреннееПотреблениеТоваров(ЗаказНаВнутреннееПотребление);
			РасходныйОрдер						= НайтиРасходныйОрдер(ВнутреннееПотреблениеТоваров);
			Отбор								= НайтиОтбор(РасходныйОрдер);
			Если (НЕ ЗначениеЗаполнено(Отбор) 
				ИЛИ НЕ ЗначениеЗаполнено(РасходныйОрдер) 
				ИЛИ НЕ ЗначениеЗаполнено(ВнутреннееПотреблениеТоваров) 
				ИЛИ НЕ ЗначениеЗаполнено(ЗаказНаВнутреннееПотребление)) Тогда
				Предупреждение("Подчиненные документы не заполнены !");
				Возврат;
			КонецЕсли;
			
			Парам = Новый Структура("ОсновнойСклад, ВводПоШтучно, ЗаказНаВнутреннееПотребление, ВнутреннееПотреблениеТоваров, РасходныйОрдер, Отбор", ОсновнойСклад, ВводПоШтучно, ЗаказНаВнутреннееПотребление, ВнутреннееПотреблениеТоваров, РасходныйОрдер, Отбор);
			
			ОткрытьФорму("Обработка.ТСД_РСК.Форма.ОтборСПб",Парам);
			
		ИначеЕсли Лев(ШК,3) = "005" Тогда	
			//ПрочееОприходованиеТоваров
			//склады: (СК Северо-Запад) И (Склад СПБ-ДОЛГИ)
			ПрочееОприходованиеТоваров 			= НайтиПрочееОприходованиеТоваров(ШК);
			ПриходныйОрдер						= НайтиПриходныйОрдер(ПрочееОприходованиеТоваров);
			Размещение							= НайтиРазмещение(ПриходныйОрдер);
			//также надо найти отправленный из РСК Калуга документ
			ЗаказНаВнутреннееПотребление 		= НайтиЗаказНаВнутреннееПотреблениеСПб(ШК);
			ВнутреннееПотреблениеТоваров 		= ВнутреннееПотреблениеТоваров(ЗаказНаВнутреннееПотребление);
			РасходныйОрдер						= НайтиРасходныйОрдерСПб(ВнутреннееПотреблениеТоваров);
			Отбор								= НайтиОтбор(РасходныйОрдер);
			
			Если (НЕ ЗначениеЗаполнено(Размещение) 
				ИЛИ НЕ ЗначениеЗаполнено(ПриходныйОрдер) 
				ИЛИ НЕ ЗначениеЗаполнено(ПрочееОприходованиеТоваров)) Тогда
				Предупреждение("Подчиненные документы не заполнены !");
				Возврат;
			КонецЕсли;
			
			Парам = Новый Структура("ОсновнойСклад, ПрочееОприходованиеТоваров, ПриходныйОрдер, Размещение, Отбор", 
			ПрочееОприходованиеТоваров.Склад, 
			ПрочееОприходованиеТоваров, 
			ПриходныйОрдер, 
			Размещение, 
			Отбор);
			
			ОткрытьФорму("Обработка.ТСД_СПБ.Форма.Приемка",Парам);
			
		Иначе
			
			//пробуем найти по шрихкоду - номенклатуру или её упаковку
			НайтиШтрихкодНоменклатуры(ШК);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НайтиПрочееОприходованиеТоваров(ШК) Экспорт
	
	Возврат Обработки.ТСД_РСК.НайтиПрочееОприходованиеТоваров(ШК);
	

КонецФункции // НайтиЗаказНаВнутреннееПотреблениеПоШК()

&НаСервере
Функция НайтиПриходныйОрдер(Знач ПрочееОприходованиеТоваров) ЭКСПОРТ
	
	//склады: (СК Северо-Запад) И (Склад СПБ-ДОЛГИ)
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ПриходныйОрдерНаТовары.Ссылка КАК Ссылка
	//	|ИЗ
	//	|	Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
	//	|ГДЕ
	//	|	ПриходныйОрдерНаТовары.Проведен
	//	|	И ПриходныйОрдерНаТовары.Склад = &ОсновнойСклад
	//	|	И ПриходныйОрдерНаТовары.Распоряжение = &Распоряжение";
	//
	//Запрос.УстановитьПараметр("ОсновнойСклад", ПрочееОприходованиеТоваров.Склад);
	//Запрос.УстановитьПараметр("Распоряжение", ПрочееОприходованиеТоваров);
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//
	//Если ВыборкаДетальныеЗаписи.Количество() = 1 Тогда 
	//	ВыборкаДетальныеЗаписи.Следующий();
	//	Возврат ВыборкаДетальныеЗаписи.Ссылка;
	//Иначе
	//	Возврат Документы.РасходныйОрдерНаТовары.ПустаяСсылка();
	//КонецЕсли;

	Возврат Обработки.ТСД_РСК.ПолучитьПриходныйОрдер(ПрочееОприходованиеТоваров, ПрочееОприходованиеТоваров.Склад);
КонецФункции

&НаСервере
Функция НайтиРазмещение(Знач ПриходныйОрдер) ЭКСПОРТ
	
	//склады: (СК Северо-Запад) И (Склад СПБ-ДОЛГИ)
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ОтборРазмещениеТоваров.Ссылка
	//	|ИЗ
	//	|	Документ.ОтборРазмещениеТоваров КАК ОтборРазмещениеТоваров
	//	|ГДЕ
	//	|	ОтборРазмещениеТоваров.Проведен
	//	|	И ОтборРазмещениеТоваров.Склад = &ОсновнойСклад
	//	|	И ОтборРазмещениеТоваров.Распоряжение = &Распоряжение";
	//
	//Запрос.УстановитьПараметр("ОсновнойСклад", ОсновнойСклад);
	//Запрос.УстановитьПараметр("Распоряжение", РасходныйОрдер);
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//
	//Если ВыборкаДетальныеЗаписи.Количество() = 1 Тогда 
	//	ВыборкаДетальныеЗаписи.Следующий();
	//	Возврат ВыборкаДетальныеЗаписи.Ссылка;
	//Иначе
	//	Возврат Документы.ОтборРазмещениеТоваров.ПустаяСсылка();
	//КонецЕсли;
	
	Возврат Обработки.ТСД_РСК.ПолучитьРазмещениеТоваров(ПриходныйОрдер, ПриходныйОрдер.Склад);

КонецФункции

&НаСервере
Функция НайтиОтборСПб (Знач РасходныйОрдер)
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ОтборРазмещениеТоваров.Ссылка
	//	|ИЗ
	//	|	Документ.ОтборРазмещениеТоваров КАК ОтборРазмещениеТоваров
	//	|ГДЕ
	//	|	ОтборРазмещениеТоваров.Проведен
	//	|	И ОтборРазмещениеТоваров.Склад = &ОсновнойСклад
	//	|	И ОтборРазмещениеТоваров.Распоряжение = &Распоряжение";
	//
	//Запрос.УстановитьПараметр("ОсновнойСклад", ОсновнойСклад);
	//Запрос.УстановитьПараметр("Распоряжение", РасходныйОрдер);
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//
	//Если ВыборкаДетальныеЗаписи.Количество() = 1 Тогда 
	//	ВыборкаДетальныеЗаписи.Следующий();
	//	Возврат ВыборкаДетальныеЗаписи.Ссылка;
	//Иначе
	//	Возврат Документы.ОтборРазмещениеТоваров.ПустаяСсылка();
	//КонецЕсли;
	
	Возврат Обработки.ТСД_РСК.ПолучитьОтборТоваров(РасходныйОрдер, РасходныйОрдер.Склад);

КонецФункции


&НаСервере
Функция НайтиЗаказНаВнутреннееПотреблениеПоШК(ШК)
	
	Номер = Сред(ШК,4,6);
	ДатаСтрока = Сред(ШК,10,6);
	Дата = Дата( "20" +Сред(ДатаСтрока,5,2) + Сред(ДатаСтрока,3,2) + Сред(ДатаСтрока,1,2) );
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказНаВнутреннееПотребление.Ссылка
		|ИЗ
		|	Документ.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление
		|ГДЕ
		|	ЗаказНаВнутреннееПотребление.Проведен
		//|	И ЗаказНаВнутреннееПотребление.Комментарий2 ПОДОБНО ""пополнение""
		|	И ЗаказНаВнутреннееПотребление.Номер = &Номер
		|	И ЗаказНаВнутреннееПотребление.Дата = &Дата
		|	И ЗаказНаВнутреннееПотребление.Склад = &Склад";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Номер", Номер);
	Запрос.УстановитьПараметр("Склад", ОсновнойСклад);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Количество() = 1 Тогда
			ВыборкаДетальныеЗаписи.Следующий();
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	Иначе
		Возврат Документы.ЗаказНаВнутреннееПотребление.ПустаяСсылка();
	КонецЕсли;
	

КонецФункции // НайтиЗаказНаВнутреннееПотреблениеПоШК()

&НаСервере
Функция НайтиЗаказНаВнутреннееПотреблениеСПб(ШК) ЭКСПОРТ
	
	Возврат Обработки.ТСД_РСК.НайтиЗаказНаВнутреннееПотреблениеСПб(ШК);
	

КонецФункции

&НаСервере
Функция НайтиОтбор(Знач РасходныйОрдер) ЭКСПОРТ
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ОтборРазмещениеТоваров.Ссылка
	//	|ИЗ
	//	|	Документ.ОтборРазмещениеТоваров КАК ОтборРазмещениеТоваров
	//	|ГДЕ
	//	|	ОтборРазмещениеТоваров.Проведен
	//	|	И ОтборРазмещениеТоваров.Склад = &ОсновнойСклад
	//	|	И ОтборРазмещениеТоваров.Распоряжение = &Распоряжение";
	//
	//Запрос.УстановитьПараметр("ОсновнойСклад", ОсновнойСклад);
	//Запрос.УстановитьПараметр("Распоряжение", РасходныйОрдер);
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//
	//Если ВыборкаДетальныеЗаписи.Количество() = 1 Тогда 
	//	ВыборкаДетальныеЗаписи.Следующий();
	//	Возврат ВыборкаДетальныеЗаписи.Ссылка;
	//Иначе
	//	Возврат Документы.ОтборРазмещениеТоваров.ПустаяСсылка();
	//КонецЕсли;
	
	Возврат Обработки.ТСД_РСК.ПолучитьОтборТоваров(РасходныйОрдер, ОсновнойСклад);

КонецФункции

&НаСервере
Функция НайтиРасходныйОрдер(Знач ВнутреннееПотреблениеТоваров)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасходныйОрдерНаТовары.Ссылка
		|ИЗ
		|	Документ.РасходныйОрдерНаТовары КАК РасходныйОрдерНаТовары
		|ГДЕ
		|	РасходныйОрдерНаТовары.Проведен
		|	И РасходныйОрдерНаТовары.Склад = &ОсновнойСклад
		|	И РасходныйОрдерНаТовары.Распоряжение = &Распоряжение";
	
	Запрос.УстановитьПараметр("ОсновнойСклад", ОсновнойСклад);
	Запрос.УстановитьПараметр("Распоряжение", ВнутреннееПотреблениеТоваров);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Количество() = 1 Тогда 
		ВыборкаДетальныеЗаписи.Следующий();
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	Иначе
		Возврат Документы.РасходныйОрдерНаТовары.ПустаяСсылка();
	КонецЕсли;

КонецФункции

&НаСервере
Функция НайтиРасходныйОрдерСПб(Знач ВнутреннееПотреблениеТоваров) ЭКСПОРТ
	
	Возврат Обработки.ТСД_РСК.НайтиРасходныйОрдерСПб(ВнутреннееПотреблениеТоваров);

КонецФункции

&НаСервере
Функция ВнутреннееПотреблениеТоваров(Знач ЗаказНаВнутреннееПотребление) ЭКСПОРТ
	
	Возврат Обработки.ТСД_РСК.ВнутреннееПотреблениеТоваров(ЗаказНаВнутреннееПотребление);
	
КонецФункции

&НаКлиенте
Процедура НайтиШтрихкодНоменклатуры(Штрихкод)

	Структура = 	НайтиНоменклатуруУпаковкуПоШтрихкоду(Штрихкод);
	Номенклатура = 	Структура.Номенклатура;
	Упаковка = 		Структура.УпаковкаПоШтрихкоду;
	
	Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		МобильныйКлиент.ОповещениеПродолжительноеДваСигнала();
		Предупреждение("Номенклатура с таким Штрихкодом не существует !");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Упаковка) Тогда
		МобильныйКлиент.ОповещениеПродолжительноеДваСигнала();
		Предупреждение("Упаковка с таким Штрихкодом не существует !");
		Возврат;
	КонецЕсли;

	ОткрытьФорму("Обработка.ТСД_РСК.Форма.СведенияОНоменклатуре",новый Структура("ШК, Номенклатура, Упаковка", Штрихкод, Номенклатура, Упаковка));
	
	//ШК = Штрихкод;
	//ЗаполнитьОстатки();
	
	

КонецПроцедуры // НайтиШтрихкодНоменклатуры()

&НаСервереБезКонтекста
Функция НайтиНоменклатуруУпаковкуПоШтрихкоду(Штрихкод)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШтрихкодыНоменклатуры.Номенклатура,
		|	ШтрихкодыНоменклатуры.Упаковка КАК УпаковкаПоШтрихкоду
		|ИЗ
		|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|ГДЕ
		|	ШтрихкодыНоменклатуры.Штрихкод = &Штрихкод";
	
	Запрос.УстановитьПараметр("Штрихкод", Штрихкод);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Возврат Новый Структура("Номенклатура, УпаковкаПоШтрихкоду", ВыборкаДетальныеЗаписи.Номенклатура, ВыборкаДетальныеЗаписи.УпаковкаПоШтрихкоду);
	КонецЦикла;
	
	Возврат Новый Структура("Номенклатура, УпаковкаПоШтрихкоду", , );
	
КонецФункции // НайтиНоменклатуруПоШтрихкоду()

&НаСервере
Функция  НайтиРеализациюПоШК(ШК)
	//В Реализации должны быть
	//в Номере только цифры т.е. ГП, 
	//статус отгрузки = Перечисление.СтатусыРеализацийТоваров.ВыгруженНаТСДДляОтбора
	
	ОсновнойСклад = СкладыСервер.ПолучитьСкладПользователя(Пользователи.ТекущийПользователь());
	
	
	Номер	= ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Сред(ШК,4,6));
	//Пока Лев(Номер,1) = "0" Цикл
	//	Номер = Прав(Номер,СтрДлина(Номер)-1);
	//КонецЦикла;
	
	Дата 	= Сред(ШК,10,6);
	Дата	= ПолучитьДатуДок(Дата);
	
	Статусы = Новый Массив;
	Статусы.Добавить(Перечисления.СтатусыРеализацийТоваров.ВыгруженНаТСДДляОтбора);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Ссылка КАК Документ
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.Проведен
		|	И РеализацияТоваровУслуг.Дата = &Дата
		|	И РеализацияТоваровУслуг.Номер = &Номер
		|	И РеализацияТоваровУслуг.СтатусОтгрузки В(&Статусы)
		|	И РеализацияТоваровУслуг.Склад = &ОсновнойСклад";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Номер", Номер);
	Запрос.УстановитьПараметр("Статусы", Статусы);
	Запрос.УстановитьПараметр("ОсновнойСклад", ОсновнойСклад);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Документ;
	КонецЦикла;
	
	Возврат Документы.РеализацияТоваровУслуг.ПустаяСсылка();

	
КонецФункции // НайтиДокументПоШК()

&НаСервере
Функция НайтиОтгрузЛистПоШК(ШК)

	//статус Обработка по ТСД
	Номер	= Сред(ШК,4,9);
	
	Дата 	= Сред(ШК,13,6);
	Дата	= ПолучитьДатуДок(Дата);
	
	//
	Статусы = Новый Массив;
	Статусы.Добавить(Перечисления.СтатусыОЛ.ОбработкаПоТСД);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтгрузочныйЛист.Ссылка КАК Документ
		|ИЗ
		|	Документ.ОтгрузочныйЛист КАК ОтгрузочныйЛист
		|ГДЕ
		|	ОтгрузочныйЛист.Проведен
		|	И ОтгрузочныйЛист.Статус В(&Статусы)
		|	И ОтгрузочныйЛист.Склад = &ОсновнойСклад
		|	И ОтгрузочныйЛист.ДатаОтгрузки = &Дата
		|	И ОтгрузочныйЛист.Номер = &Номер";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Номер", Номер);
	Запрос.УстановитьПараметр("Статусы", Статусы);
	Запрос.УстановитьПараметр("ОсновнойСклад", ОсновнойСклад);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Документ;
	КонецЦикла;
	
	Возврат Документы.ОтгрузочныйЛист.ПустаяСсылка();
	
КонецФункции // НайтиОтгрузЛистПоШК()

&НаСервере
Функция ПолучитьДатуДок(СтрокаДата)
	Год 	= "20" + Сред(СтрокаДата,5,2);
	Месяц   = Сред(СтрокаДата,3,2);
	День    = Сред(СтрокаДата,1,2);
	Возврат Дата(Год,Месяц,День);

КонецФункции // ПоискРеализацииПоШК()

&НаСервере
Функция ПолучитьПараметры(Реализация)
	
	//РасходныйОрдер = Документы.РасходныйОрдерНаТовары.НайтиПоРеквизиту("Распоряжение", Реализация);
	//Отбор = Документы.ОтборРазмещениеТоваров.НайтиПоРеквизиту("Распоряжение", РасходныйОрдер);
	
	РасходныйОрдер 	= Обработки.ТСД_РСК.ПолучитьРасходныйОрдер(Реализация, ОсновнойСклад);
	Отбор			= Обработки.ТСД_РСК.ПолучитьОтборТоваров(РасходныйОрдер, ОсновнойСклад);
	
	Парам = Новый Структура("	ВводПоШтучно, 	Отбор, 	РасходныйОрдер, Реализация, ОсновнойСклад", 
								ВводПоШтучно,	Отбор,	РасходныйОрдер, Реализация, ОсновнойСклад);
	Возврат Парам;

КонецФункции // ПолучитьПараметры()

&НаСервере
Функция ПолучитьРасходныйОрдер(Реализация)
		
	////
	////ищем, может есть уже приходный
	//РасходныйОрдер = Документы.РасходныйОрдерНаТовары.НайтиПоРеквизиту("Распоряжение", Реализация); 
	//Если РасходныйОрдер = Документы.ПриходныйОрдерНаТовары.ПустаяСсылка() Тогда
	//	//ПриходныйОрдер = Документы.ПриходныйОрдерНаТовары.СоздатьДокумент();
	//	////не проставляются упаковки, поэтому через выгрузить-загрузить
	//	//ПриходныйОрдер.Заполнить(Поступление);
	//	//ПриходныйОрдер.Склад = ОсновнойСклад;
	//	//ПриходныйОрдер.СкладскаяОперация = Перечисления.СкладскиеОперации.ПриемкаОтПоставщика;
	//	//ПриходныйОрдер.НомерПоступления = Поступление.Номер;
	//	//ПриходныйОрдер.ЗонаПриемки = Справочники.СкладскиеЯчейки.НайтиПоНаименованию("Приемка",,,ОсновнойСклад);;
	//	//ПриходныйОрдер.Дата = Поступление.Дата;
	//	//ПриходныйОрдер.Статус = Перечисления.СтатусыПриходныхОрдеров.Принят;
	//	//ПриходныйОрдер.Ответственный = Пользователи.ТекущийПользователь();
	//	//ПриходныйОрдер.Товары.Загрузить(Поступление.Товары.Выгрузить());//каждый раз НЕ перезаписываем ТЧ Прих.ордера из ТЧ Поступления
	//	//ПриходныйОрдер.Записать(РежимЗаписиДокумента.Проведение);
	//КонецЕсли;
	//
	//Возврат РасходныйОрдер.Ссылка;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасходныйОрдерНаТовары.Ссылка
		|ИЗ
		|	Документ.РасходныйОрдерНаТовары КАК РасходныйОрдерНаТовары
		|ГДЕ
		|	РасходныйОрдерНаТовары.Проведен
		|	И РасходныйОрдерНаТовары.Распоряжение = &Реализация
		|	И РасходныйОрдерНаТовары.Склад = &ОсновнойСклад";
	
	Запрос.УстановитьПараметр("Реализация", Реализация);
	Запрос.УстановитьПараметр("ОсновнойСклад", ОсновнойСклад);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Количество() = 1 Тогда 
		ВыборкаДетальныеЗаписи.Следующий();
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	Иначе
		Возврат Документы.РасходныйОрдерНаТовары.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции // ПолучитьПриходныйОрдер()

&НаСервере
Функция ПолучитьОтборТоваров(РасходныйОрдер)
	
	//
		
	//Отбор = Документы.ОтборРазмещениеТоваров.НайтиПоРеквизиту("Распоряжение", РасходныйОрдер);
	//// как понять что мы уже очищали отбор т.к. его автом. заполняет загрузка ?
	//// новый признак булево ?
	//// или по статусу ?
	////Если Отбор.ТоварыОтбор.Количество() > 0 Тогда
	////Попытка
	////	Док = Отбор.ПолучитьОбъект();
	////	Док.ТоварыОтбор.Очистить();
	////	Док.Записать(РежимЗаписиДокумента.Проведение);
	////Исключение
	////	Сообщить("Ошибка очищения док-та Отбор "+ОписаниеОшибки());
	////КонецПопытки;
	////Отбор = Док.Ссылка;
	//
	//Если Отбор = Документы.ОтборРазмещениеТоваров.ПустаяСсылка() Тогда
	//	//Размещение = Документы.ОтборРазмещениеТоваров.СоздатьДокумент();
	//	//
	//	//Размещение.ЗонаПриемки = Справочники.СкладскиеЯчейки.НайтиПоНаименованию("Приемка",,,ПриходныйОрдер.Склад);
	//	//Размещение.Склад = ПриходныйОрдер.Склад;
	//	//Размещение.Ответственный = Пользователи.ТекущийПользователь();
	//	//Размещение.ВидОперации = Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Размещение;
	//	//Размещение.Дата = ПриходныйОрдер.Дата;
	//	//Размещение.Распоряжение = ПриходныйОрдер;
	//	//Размещение.НомерЗадания = ПриходныйОрдер.НомерПоступления;
	//	////Размещение.Заполнить(ПриходныйОрдер);	
	//	//// не надо заполнять ТЧ - она будет заполняться кладовщиком каждый раз при сканировании 
	//	//// полностью вся СТРОКА ТЧ документа Поступление, номенклатура которой сканировалась,
	//	//// будет передаваться в ТЧ Размещения и заполняться все колонки в соответственно:
	//	//////Стр.Номенклатура = Элем.Номенклатура;
	//	////
	//	//// Выводить опционально(ВводПоШтучно) Вопрос о вводе количества по введённой номенклатуре
	//	//////Стр.Количество = Элем.Количество;
	//	//////Стр.КоличествоУпаковок = Элем.Количество;
	//	//////Стр.Упаковка = Элем.Упаковка;
	//	////
	//	//////Стр.Ячейка	- пока что "00000"
	//	//// в будущем выводить Окно-Запрос о сканировании ШТРИХКОДА ЯЧЕЙКИ
	//	////
	//	////
	//	//Размещение.Записать(РежимЗаписиДокумента.Запись);
	//	////Размещение.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоБезОшибок;	// такой статус в этом случае ?
	//	//Размещение.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.ВРаботе;	//чтобы знать что ведётся работа по терминалу
	//	//// При завершении Размещения - Поменять СТАТУС на Выполнено (с ошибка, без ошибок).
	//	//// Также в этот момент можно записать время работы по документу. 
	//	//// Только вопрос: если записывать просто период времени,
	//	//// то что делать, если предположим решили "допринять", кладовщик еще будет работать по документу ?
	//	//// в ТЧ ВыполнениеРабот буду записывать нового работника
	//	//// если тот же Работник, буду добавлять к уже записанному времени работы
	//	//// 
	//	//// Вычислять время работы Работника буду по
	//	//// -ДатаПервогоСканирования
	//	//// -ДатаПоследнегоСканирования
	//	//// При "завершении работы складовщиком над документом" - смены статутса на Выполнено -
	//	//// - будут обнуляться резвизиты -ДатаПервогоСканирования -ДатаПоследнегоСканирования
	//	////
	//	//
	//	//Размещение.Записать(РежимЗаписиДокумента.Проведение);
	//	//
	//КонецЕсли;
	//
	//Возврат Отбор.Ссылка;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтборРазмещениеТоваров.Ссылка
		|ИЗ
		|	Документ.ОтборРазмещениеТоваров КАК ОтборРазмещениеТоваров
		|ГДЕ
		|	ОтборРазмещениеТоваров.Распоряжение = &РасходныйОрдер
		|	И ОтборРазмещениеТоваров.Проведен
		|	И ОтборРазмещениеТоваров.Склад = &ОсновнойСклад";
	
	Запрос.УстановитьПараметр("РасходныйОрдер", РасходныйОрдер);
	Запрос.УстановитьПараметр("ОсновнойСклад", ОсновнойСклад);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Количество() = 1 Тогда 
		ВыборкаДетальныеЗаписи.Следующий();
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	Иначе
		Возврат Документы.ОтборРазмещениеТоваров.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции // СоздатьРазмещениеТоваров()

&НаКлиенте
Процедура СведенияОНоменклатуре(Команда)
	
	// Вставить содержимое обработчика.
	//парам = Новый Структура("ВводПоШтучно",ВводПоШтучно);
	ОткрытьФорму("Обработка.ТСД_РСК.Форма.СведенияОНоменклатуре",
	//парам
	);
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ОсновнойСклад = СкладыСервер.ПолучитьСкладПользователя(Пользователи.ТекущийПользователь());
	Заголовок = Пользователи.ТекущийПользователь().Наименование;
	
	//показать менюшки СПб
	Элементы.ГруппаСПб.Видимость = ОсновнойСклад.Наименование = "СК СПБ";
	
	//убрать менюшки РСК Калуга
	Элементы.ГруппаКалуга.Видимость			= НЕ ОсновнойСклад.Наименование = "СК СПБ";
	
КонецПроцедуры

&НаКлиенте
Процедура ВнутреннийрасходДляСПб(Команда)
	// Вставить содержимое обработчика.
	парам = Новый Структура("ВводПоШтучно, ОсновнойСклад", ВводПоШтучно, ОсновнойСклад);
	ОткрытьФорму("Обработка.ТСД_РСК.Форма.СписокПополнениеСпб",парам);
КонецПроцедуры

&НаКлиенте
Процедура ЭмитацияСканера(Команда)
	
	//ВвелиОсновноСклад = ВвестиЗначение(ОсновнойСклад,"Заполнить ОсновнойСклад",Тип("СправочникСсылка.Склады"));
	ШК = "";
	Если ВвестиСтроку(ШК,"Введите Штрихкод для имитации работы сканера",30,Ложь) Тогда
		ШК = СокрЛП(Строка(ШК));
		ШК = СтрЗаменить(ШК, Символы.нпп,"");
		ОбработкаОповещения("Barcode",ШК,"ПодключаемоеОборудование");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриемкаПоКоробам(Команда)
	парам = Новый Структура("ОсновнойСклад",ОсновнойСклад);
	ОткрытьФорму("Обработка.ТСД_СПБ.Форма.ПриемКоробов",парам);
КонецПроцедуры

&НаКлиенте
Процедура РазместитьТоварыСПб(Команда)
	парам = Новый Структура("ОсновнойСклад",ОсновнойСклад);
	//ОткрытьФорму("Обработка.ТСД_СПБ.Форма.СписокДокументовПрочееОприходование",парам);
	ОткрытьФорму("Обработка.ТСД_СПБ.Форма.СписокДокументовПрочееОприходование",парам);
	//открыть новую форму: выбрать Склад приемки, дату приемки из рс. ТрансферКоробов
КонецПроцедуры

&НаКлиенте
Процедура ОтборТовараСПб(Команда)
	парам = Новый Структура("ВводПоШтучно",ВводПоШтучно);
	ОткрытьФорму("Обработка.ТСД_РСК.Форма.СписокРеализаций",парам);
КонецПроцедуры

&НаКлиенте
Процедура Инвентаризация(Команда)
	
	// Вставить содержимое обработчика.
	парам = Новый Структура("ОсновнойСклад",ОсновнойСклад);
	ОткрытьФорму("Обработка.ТСД_РСК.Форма.СписокИнвентаризаций", парам);
	
КонецПроцедуры

&НаКлиенте
Процедура УпаковочныеЛисты(Команда)
	
	парам = Новый Структура("ОсновнойСклад",ОсновнойСклад);
	ОткрытьФорму("Обработка.ТСД_РСК.Форма.УпаковочныеЛистыСписок", парам);
	
КонецПроцедуры
