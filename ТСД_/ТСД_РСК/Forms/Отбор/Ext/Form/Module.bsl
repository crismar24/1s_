
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	Отбор 			= Параметры.Отбор;
	РасходныйОрдер 	= Параметры.РасходныйОрдер;
	Реализация 		= Параметры.Реализация;
	ВводПоШтучно 	= Параметры.ВводПоШтучно;
	ОсновнойСклад	= Параметры.ОсновнойСклад;
	
	//очистить ТЧ ТОварыОтбор от номенклатуры без коробок, что грузятся из загрузки по файлу из парадокс
	ОчиститьОтбор();
		
		
	
	Фильтр			= "ВсеДанные";
	Пользователь	= Пользователи.ТекущийПользователь();
	ОбновитьТЗкоробов();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьОтбор()
	
	Если НЕ Отбор.ОчищенОтборТерминалом Тогда
		Попытка
			Док = Отбор.ПолучитьОбъект();
			Док.ТоварыОтбор.Очистить();
			Док.ОчищенОтборТерминалом = Истина;
			Док.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Сообщить("Ошибка очистки Отбора: "+ОписаниеОшибки());
		КонецПопытки;
		
	КонецЕсли
	
КонецПроцедуры // ОчиститьОтбор()

&НаКлиенте
Процедура ТЗкоробовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// измнеить видимость страниц, перейти с одной на другую
	// возможно сделать просто перелистывание, а не скрывание страниц.
	//проверить перелистывание - спец. для сенсорных экранов - не подходит - странное отображение(серые рамки по бокам). прослистывание вертикально
	ТекКороб = Элементы.ТЗкоробов.ТекущиеДанные.Коробка;
	Элементы.ГруппаТЗкоробов.Видимость 	= Ложь;
	
	Если ТекКороб <> "Полный список по коробам" Тогда
		ТекущийКороб = ТекКороб;
		ОбновитьТЗ();
		
		Элементы.ГруппаТЗ.Видимость	= Истина;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если НЕ ЗакрытиеПриЗавершении Тогда	
		
		//закрытие на Элементы.ГруппаТЗПолныйСписок.Видимость
		Если Элементы.ГруппаТЗ.Видимость Тогда
			// переходим на экран списка коробов
			СтандартнаяОбработка = Ложь;
			ОчиститьПоследнийВвод();
			Отказ = Истина;
			ТекущийКороб = 0;
			
			//Если ИспользоватьДиапазон
			ОбновитьТЗкоробов();
			Если ИспользоватьДиапазон Тогда
				ОтключитьИспользованиеДиапазона();
			КонецЕсли;	
			Элементы.ГруппаТЗкоробов.Видимость 	= Истина;
			Элементы.ГруппаТЗ.Видимость	= Ложь;
			
		Иначе
			
			//
			//Проверить есть ли расхождения (именно когда остолось > 0)
			//Предупредить об наличии пользователя, спросить продолжить ли завершение документа
			Статусы = ПолучитьСтатусы();
			//РасхожденияСуществуют, СверхНормы
			//Если Статусы.РасхожденияСуществуют Тогда
			//	Ответ = Вопрос("Есть РАСХОЖДЕНИЯ. Выйти ?",РежимДиалогаВопрос.ДаНет,,,"ВЫХОД");
			//	Если Ответ = КодВозвратаДиалога.Нет Тогда
			//		Отказ = Истина;
			//	Иначе
			//		//выходим
			//	КонецЕсли;
			//	
			//Иначе
			Если Статусы.РасхожденияСуществуют Тогда
				Если Статусы.СверхНормы Тогда
					Ответ = Вопрос("Товара в коробах БОЛЬШЕ чем требуется по документу. Выйти ?",РежимДиалогаВопрос.ДаНет,,,"ВЫХОД");
				Иначе
					Ответ = Вопрос("Не весь товар в коробах. Выйти ?",РежимДиалогаВопрос.ДаНет,,,"ВЫХОД");
				КонецЕсли;
				Если Ответ = КодВозвратаДиалога.Нет Тогда
					Отказ = Истина;
				Иначе
					//выходим
				КонецЕсли;
				
			Иначе
				
				
				//Если Расхождений НЕТ
				Кнопки = Новый СписокЗначений;
				Кнопки.Добавить("Завершить");
				Кнопки.Добавить("Выйти");
				
				Ответ = Вопрос("Расхождений по Отбору нет. Завершить или выйти ?",Кнопки,,,"Выход");
				Если Ответ = "Завершить" Тогда
					
					//получить ПостМесто
					ПостМесто = ОткрытьФормуМодально("Обработка.ТСД_РСК.Форма.ПостМесто");
					
					//завершитьдокумент
					ЗавершитьОтбор();
					ЗакрытиеПриЗавершении = Истина;
					
					
				ИначеЕсли Ответ = "Выйти" Тогда 
					//выходим
				КонецЕсли;
				
				
				
				
			КонецЕсли;
			
			//завершитьдокумент
			//ЗавершитьОтбор();
			//ЗакрытиеПриЗавершении = Истина;
			//Закрыть();
			
			
		КонецЕсли;
		
	Иначе
		//ничего не делаем, пусть закрывается до формы Список Реализаций
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеБезЗакрытия()
	//Проверить есть ли расхождения (именно когда остолось > 0)
	//Предупредить об наличии пользователя, спросить продолжить ли завершение документа
	Статусы = ПолучитьСтатусы();
	//РасхожденияСуществуют, СверхНормы
	Если Статусы.РасхожденияСуществуют Тогда
		Ответ = Вопрос("Не весь товар в коробах. Продолжить Завершение документа ?",РежимДиалогаВопрос.ДаНет,,,"ЗАВЕРШЕНИЕ");
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	//завершитьдокумент
	ЗавершитьОтбор();
	ЗакрытиеПриЗавершении = Истина;
	//Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьИспользованиеДиапазона()
	
	ДиапазонКоробов = "";
	Элементы.ТекущийКороб.Видимость = Истина;
	Элементы.ДиапазонКоробов.Видимость = Ложь;
	
	ИспользоватьДиапазон = Ложь;

КонецПроцедуры

&НаСервере
Процедура ОбновитьТЗкоробов()
	
	ТЗкоробов.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтборРазмещениеТоваровТоварыОтбор.Коробка КАК Коробка
		|ИЗ
		|	Документ.ОтборРазмещениеТоваров.ТоварыОтбор КАК ОтборРазмещениеТоваровТоварыОтбор
		|ГДЕ
		|	ОтборРазмещениеТоваровТоварыОтбор.Ссылка = &Отбор
		|	И ОтборРазмещениеТоваровТоварыОтбор.Коробка <> 0
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтборРазмещениеТоваровТоварыОтбор.Коробка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Коробка";
	
	Запрос.УстановитьПараметр("Отбор", Отбор);
	ЗначениеВРеквизитФормы(Запрос.Выполнить().Выгрузить(),"ТЗкоробов");
	
КонецПроцедуры // ОбновитьТЗкоробов()

&НаСервере
Процедура ОбновитьТЗ()
	массивКоробок = Новый массив;
	
	Если ИспользоватьДиапазон Тогда
		ОбновитьТЗкоробов();
		Для каждого Стр Из ТЗкоробов Цикл
			массивКоробок.Добавить(Стр.Коробка);
		КонецЦикла;
		массивКоробок.Добавить(0);
		//показываем номенклатуру по всем коробам плюс 0 короб - это ном-ра из диапазона коробов,
		//будет распределена впоследствии, либо сразу при сканировании..
	Иначе
		массивКоробок.Добавить(ТекущийКороб);
	КонецЕсли;
		
	//ТЗ для формы	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
		|	РеализацияТоваровУслугТовары.Количество КАК Количество,
		|	РеализацияТоваровУслугТовары.Упаковка КАК Упаковка
		|ПОМЕСТИТЬ ВТреал
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|ГДЕ
		|	РеализацияТоваровУслугТовары.Ссылка = &Реализация
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Упаковка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтборРазмещениеТоваровТоварыОтбор.Номенклатура КАК Номенклатура,
		|	СУММА(ОтборРазмещениеТоваровТоварыОтбор.Количество) КАК Количество,
		|	ОтборРазмещениеТоваровТоварыОтбор.Упаковка КАК Упаковка,
		|	ОтборРазмещениеТоваровТоварыОтбор.Коробка
		|ПОМЕСТИТЬ ВТотборПоКоробам
		|ИЗ
		|	Документ.ОтборРазмещениеТоваров.ТоварыОтбор КАК ОтборРазмещениеТоваровТоварыОтбор
		|ГДЕ
		|	ОтборРазмещениеТоваровТоварыОтбор.Ссылка = &Отбор
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтборРазмещениеТоваровТоварыОтбор.Номенклатура,
		|	ОтборРазмещениеТоваровТоварыОтбор.Упаковка,
		|	ОтборРазмещениеТоваровТоварыОтбор.Коробка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Упаковка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтборРазмещениеТоваровТоварыОтбор.Номенклатура КАК Номенклатура,
		|	СУММА(ОтборРазмещениеТоваровТоварыОтбор.Количество) КАК ФактВКоробах,
		|	ОтборРазмещениеТоваровТоварыОтбор.Упаковка КАК Упаковка
		|ПОМЕСТИТЬ ВТотбор
		|ИЗ
		|	Документ.ОтборРазмещениеТоваров.ТоварыОтбор КАК ОтборРазмещениеТоваровТоварыОтбор
		|ГДЕ
		|	ОтборРазмещениеТоваровТоварыОтбор.Ссылка = &Отбор
		|	И ОтборРазмещениеТоваровТоварыОтбор.Коробка <> 0
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтборРазмещениеТоваровТоварыОтбор.Номенклатура,
		|	ОтборРазмещениеТоваровТоварыОтбор.Упаковка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Упаковка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТреал.Номенклатура КАК Номенклатура,
		|	ВТреал.Упаковка КАК Упаковка,
		|	СУММА(ВЫБОР
		|			КОГДА ВТотборПоКоробам.Коробка В (&массивКоробок)
		|				ТОГДА ЕСТЬNULL(ВТотборПоКоробам.Количество, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ФактПоКоробу,
		|	ЕСТЬNULL(ВТотбор.ФактВКоробах, 0) КАК ВесьФактПоНомВКоробах,
		|	ЕСТЬNULL(ВТреал.Количество, 0) КАК Всего,
		|	ЕСТЬNULL(ВТреал.Количество, 0) - ЕСТЬNULL(ВТотбор.ФактВКоробах, 0) КАК Осталось
		|ИЗ
		|	ВТреал КАК ВТреал
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТотборПоКоробам КАК ВТотборПоКоробам
		|		ПО ВТреал.Номенклатура = ВТотборПоКоробам.Номенклатура
		|			И ВТреал.Упаковка = ВТотборПоКоробам.Упаковка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТотбор КАК ВТотбор
		|		ПО ВТреал.Номенклатура = ВТотбор.Номенклатура
		|			И ВТреал.Упаковка = ВТотбор.Упаковка
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &Фильтр ПОДОБНО ""ВсеДанные""
		|				ТОГДА ЕСТЬNULL(ВЫБОР
		|								КОГДА ВТотборПоКоробам.Коробка В (&массивКоробок)
		|									ТОГДА ЕСТЬNULL(ВТотборПоКоробам.Количество, 0)
		|								ИНАЧЕ 0
		|							КОНЕЦ, 0) > 0
		|						ИЛИ ЕСТЬNULL(ВТреал.Количество, 0) - ЕСТЬNULL(ВТотбор.ФактВКоробах, 0) > 0
		|			КОГДА &Фильтр ПОДОБНО ""Выполнено""
		|				ТОГДА ЕСТЬNULL(ВЫБОР
		|							КОГДА ВТотборПоКоробам.Коробка В (&массивКоробок)
		|								ТОГДА ЕСТЬNULL(ВТотборПоКоробам.Количество, 0)
		|							ИНАЧЕ 0
		|						КОНЕЦ, 0) > 0
		|			КОГДА &Фильтр ПОДОБНО ""Осталось""
		|				ТОГДА ЕСТЬNULL(ВТреал.Количество, 0) - ЕСТЬNULL(ВТотбор.ФактВКоробах, 0) > 0
		|		КОНЕЦ
		|
		|СГРУППИРОВАТЬ ПО
		|	ЕСТЬNULL(ВТотбор.ФактВКоробах, 0),
		|	ЕСТЬNULL(ВТреал.Количество, 0) - ЕСТЬNULL(ВТотбор.ФактВКоробах, 0),
		|	ВТреал.Номенклатура,
		|	ВТреал.Упаковка,
		|	ЕСТЬNULL(ВТреал.Количество, 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВТреал.Номенклатура.Артикул";
	
	Запрос.УстановитьПараметр("Фильтр", 		Фильтр);
	Запрос.УстановитьПараметр("Отбор", 			Отбор);
	Запрос.УстановитьПараметр("Реализация", 	Реализация);
	Запрос.УстановитьПараметр("массивКоробок", 	массивКоробок);
		
	ЗначениеВРеквизитФормы(Запрос.Выполнить().Выгрузить(),"ТЗ");
		
КонецПроцедуры // ОбновитьТЗ()

&НаСервере
Функция ПолучитьТаблицуДанных()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
		|	РеализацияТоваровУслугТовары.Количество КАК Количество,
		|	РеализацияТоваровУслугТовары.Упаковка КАК Упаковка
		|ПОМЕСТИТЬ ВТреал
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|ГДЕ
		|	РеализацияТоваровУслугТовары.Ссылка = &Реализация
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Упаковка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтборРазмещениеТоваровТоварыОтбор.Номенклатура КАК Номенклатура,
		|	СУММА(ОтборРазмещениеТоваровТоварыОтбор.Количество) КАК Количество,
		|	ОтборРазмещениеТоваровТоварыОтбор.Упаковка КАК Упаковка,
		|	ОтборРазмещениеТоваровТоварыОтбор.Коробка
		|ПОМЕСТИТЬ ВТотборПоКоробам
		|ИЗ
		|	Документ.ОтборРазмещениеТоваров.ТоварыОтбор КАК ОтборРазмещениеТоваровТоварыОтбор
		|ГДЕ
		|	ОтборРазмещениеТоваровТоварыОтбор.Ссылка = &Отбор
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтборРазмещениеТоваровТоварыОтбор.Номенклатура,
		|	ОтборРазмещениеТоваровТоварыОтбор.Упаковка,
		|	ОтборРазмещениеТоваровТоварыОтбор.Коробка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Упаковка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтборРазмещениеТоваровТоварыОтбор.Номенклатура КАК Номенклатура,
		|	СУММА(ОтборРазмещениеТоваровТоварыОтбор.Количество) КАК ФактВКоробах,
		|	ОтборРазмещениеТоваровТоварыОтбор.Упаковка КАК Упаковка
		|ПОМЕСТИТЬ ВТотбор
		|ИЗ
		|	Документ.ОтборРазмещениеТоваров.ТоварыОтбор КАК ОтборРазмещениеТоваровТоварыОтбор
		|ГДЕ
		|	ОтборРазмещениеТоваровТоварыОтбор.Ссылка = &Отбор
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтборРазмещениеТоваровТоварыОтбор.Номенклатура,
		|	ОтборРазмещениеТоваровТоварыОтбор.Упаковка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Упаковка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТреал.Номенклатура КАК Номенклатура,
		|	ВТреал.Упаковка КАК Упаковка,
		|	ЕСТЬNULL(ВТотборПоКоробам.Количество, 0) КАК ФактПоКоробу,
		|	ЕСТЬNULL(ВТотборПоКоробам.Коробка, 0) КАК Коробка,
		|	ЕСТЬNULL(ВТотбор.ФактВКоробах, 0) КАК ВесьФактПоНомВКоробах,
		|	ЕСТЬNULL(ВТреал.Количество, 0) КАК Всего,
		|	ЕСТЬNULL(ВТреал.Количество, 0) - ЕСТЬNULL(ВТотбор.ФактВКоробах, 0) КАК Осталось
		|ИЗ
		|	ВТреал КАК ВТреал
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТотборПоКоробам КАК ВТотборПоКоробам
		|		ПО ВТреал.Номенклатура = ВТотборПоКоробам.Номенклатура
		|			И ВТреал.Упаковка = ВТотборПоКоробам.Упаковка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТотбор КАК ВТотбор
		|		ПО ВТреал.Номенклатура = ВТотбор.Номенклатура
		|			И ВТреал.Упаковка = ВТотбор.Упаковка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Коробка,
		|	ВТреал.Номенклатура.Наименование";
	
	Запрос.УстановитьПараметр("Отбор", 			Отбор);
	Запрос.УстановитьПараметр("Реализация", 	Реализация);
	//Запрос.УстановитьПараметр("ТекущийКороб", 	ТекущийКороб);
		
	Возврат Запрос.Выполнить().Выгрузить();
	

	
	
КонецФункции

&НаСервере
Функция ПолучитьСтрокуТаблицыДанныхПоДиапазону(Номенклатура)
	
	//массивКоробок = Новый Массив;
	//Если ИспользоватьДиапазон тогда
	//	ОбновитьТЗкоробов();
	//	Для каждого Стр Из Тзкоробов Цикл
	//	
	//		массивКоробок.Добавить(Стр.Коробка);
	//	
	//	КонецЦикла;
	//	массивКоробок.Добавить(0);
	//Иначе
	//	массивКоробок.Добавить(ТекущийКороб);
	//КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
		|	РеализацияТоваровУслугТовары.Количество КАК Количество,
		|	РеализацияТоваровУслугТовары.Упаковка КАК Упаковка
		|ПОМЕСТИТЬ ВТреал
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|ГДЕ
		|	РеализацияТоваровУслугТовары.Ссылка = &Реализация
		|	И РеализацияТоваровУслугТовары.Номенклатура = &Номенклатура
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Упаковка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтборРазмещениеТоваровТоварыОтбор.Номенклатура КАК Номенклатура,
		|	СУММА(ОтборРазмещениеТоваровТоварыОтбор.Количество) КАК Количество,
		|	ОтборРазмещениеТоваровТоварыОтбор.Упаковка КАК Упаковка,
		|	ОтборРазмещениеТоваровТоварыОтбор.Коробка
		|ПОМЕСТИТЬ ВТотборПоКоробам
		|ИЗ
		|	Документ.ОтборРазмещениеТоваров.ТоварыОтбор КАК ОтборРазмещениеТоваровТоварыОтбор
		|ГДЕ
		|	ОтборРазмещениеТоваровТоварыОтбор.Ссылка = &Отбор
		|	И ОтборРазмещениеТоваровТоварыОтбор.Номенклатура = &Номенклатура
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтборРазмещениеТоваровТоварыОтбор.Номенклатура,
		|	ОтборРазмещениеТоваровТоварыОтбор.Упаковка,
		|	ОтборРазмещениеТоваровТоварыОтбор.Коробка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Упаковка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтборРазмещениеТоваровТоварыОтбор.Номенклатура КАК Номенклатура,
		|	СУММА(ОтборРазмещениеТоваровТоварыОтбор.Количество) КАК ФактВКоробах,
		|	ОтборРазмещениеТоваровТоварыОтбор.Упаковка КАК Упаковка
		|ПОМЕСТИТЬ ВТотбор
		|ИЗ
		|	Документ.ОтборРазмещениеТоваров.ТоварыОтбор КАК ОтборРазмещениеТоваровТоварыОтбор
		|ГДЕ
		|	ОтборРазмещениеТоваровТоварыОтбор.Ссылка = &Отбор
		|	И ОтборРазмещениеТоваровТоварыОтбор.Коробка <> 0
		|	И ОтборРазмещениеТоваровТоварыОтбор.Номенклатура = &Номенклатура
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтборРазмещениеТоваровТоварыОтбор.Номенклатура,
		|	ОтборРазмещениеТоваровТоварыОтбор.Упаковка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Упаковка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТреал.Номенклатура КАК Номенклатура,
		|	ВТреал.Упаковка КАК Упаковка,
		|	СУММА(ЕСТЬNULL(ВТотборПоКоробам.Количество, 0)) КАК ФактПоКоробу,
		|	ЕСТЬNULL(ВТотбор.ФактВКоробах, 0) КАК ВесьФактПоНомВКоробах,
		|	ЕСТЬNULL(ВТреал.Количество, 0) КАК Всего,
		|	ЕСТЬNULL(ВТреал.Количество, 0) - ЕСТЬNULL(ВТотбор.ФактВКоробах, 0) КАК Осталось
		|ИЗ
		|	ВТреал КАК ВТреал
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТотборПоКоробам КАК ВТотборПоКоробам
		|		ПО ВТреал.Номенклатура = ВТотборПоКоробам.Номенклатура
		|			И ВТреал.Упаковка = ВТотборПоКоробам.Упаковка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТотбор КАК ВТотбор
		|		ПО ВТреал.Номенклатура = ВТотбор.Номенклатура
		|			И ВТреал.Упаковка = ВТотбор.Упаковка
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТреал.Номенклатура,
		|	ВТреал.Упаковка,
		|	ЕСТЬNULL(ВТотбор.ФактВКоробах, 0),
		|	ЕСТЬNULL(ВТреал.Количество, 0),
		|	ЕСТЬNULL(ВТреал.Количество, 0) - ЕСТЬNULL(ВТотбор.ФактВКоробах, 0)";
	
	Запрос.УстановитьПараметр("Номенклатура",	Номенклатура);
	Запрос.УстановитьПараметр("Отбор", 			Отбор);
	Запрос.УстановитьПараметр("Реализация", 	Реализация);
	//Запрос.УстановитьПараметр("массивКоробок", 	массивКоробок);
	
	СтруктураОтвет = Новый Структура();
	СтруктураОтвет.Вставить("Номенклатура");
	СтруктураОтвет.Вставить("Упаковка");
	СтруктураОтвет.Вставить("ФактПоКоробу");
	СтруктураОтвет.Вставить("Коробка");
	СтруктураОтвет.Вставить("ВесьФактПоНомВКоробах");
	СтруктураОтвет.Вставить("Всего");
	СтруктураОтвет.Вставить("Осталось");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураОтвет,Выборка);
	КонецЕсли;
	
	Возврат СтруктураОтвет;
	
КонецФункции

&НаСервере
Функция ПолучитьСтрокуТаблицыДанных(Номенклатура)
	
	массивКоробок = Новый Массив;
	массивКоробок.Добавить(ТекущийКороб);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
		|	РеализацияТоваровУслугТовары.Количество КАК Количество,
		|	РеализацияТоваровУслугТовары.Упаковка КАК Упаковка
		|ПОМЕСТИТЬ ВТреал
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|ГДЕ
		|	РеализацияТоваровУслугТовары.Ссылка = &Реализация
		|	И РеализацияТоваровУслугТовары.Номенклатура = &Номенклатура
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Упаковка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтборРазмещениеТоваровТоварыОтбор.Номенклатура КАК Номенклатура,
		|	СУММА(ОтборРазмещениеТоваровТоварыОтбор.Количество) КАК Количество,
		|	ОтборРазмещениеТоваровТоварыОтбор.Упаковка КАК Упаковка,
		|	ОтборРазмещениеТоваровТоварыОтбор.Коробка
		|ПОМЕСТИТЬ ВТотборПоКоробам
		|ИЗ
		|	Документ.ОтборРазмещениеТоваров.ТоварыОтбор КАК ОтборРазмещениеТоваровТоварыОтбор
		|ГДЕ
		|	ОтборРазмещениеТоваровТоварыОтбор.Ссылка = &Отбор
		|	И ОтборРазмещениеТоваровТоварыОтбор.Номенклатура = &Номенклатура
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтборРазмещениеТоваровТоварыОтбор.Номенклатура,
		|	ОтборРазмещениеТоваровТоварыОтбор.Упаковка,
		|	ОтборРазмещениеТоваровТоварыОтбор.Коробка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Упаковка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтборРазмещениеТоваровТоварыОтбор.Номенклатура КАК Номенклатура,
		|	СУММА(ОтборРазмещениеТоваровТоварыОтбор.Количество) КАК ФактВКоробах,
		|	ОтборРазмещениеТоваровТоварыОтбор.Упаковка КАК Упаковка
		|ПОМЕСТИТЬ ВТотбор
		|ИЗ
		|	Документ.ОтборРазмещениеТоваров.ТоварыОтбор КАК ОтборРазмещениеТоваровТоварыОтбор
		|ГДЕ
		|	ОтборРазмещениеТоваровТоварыОтбор.Ссылка = &Отбор
		|	И ОтборРазмещениеТоваровТоварыОтбор.Коробка <> 0
		|	И ОтборРазмещениеТоваровТоварыОтбор.Номенклатура = &Номенклатура
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтборРазмещениеТоваровТоварыОтбор.Номенклатура,
		|	ОтборРазмещениеТоваровТоварыОтбор.Упаковка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Упаковка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТреал.Номенклатура КАК Номенклатура,
		|	ВТреал.Упаковка КАК Упаковка,
		|	СУММА(ВЫБОР
		|			КОГДА ВТотборПоКоробам.Коробка В (&массивКоробок)
		|				ТОГДА ЕСТЬNULL(ВТотборПоКоробам.Количество, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ФактПоКоробу,
		|	ЕСТЬNULL(ВТотбор.ФактВКоробах, 0) КАК ВесьФактПоНомВКоробах,
		|	ЕСТЬNULL(ВТреал.Количество, 0) КАК Всего,
		|	ЕСТЬNULL(ВТреал.Количество, 0) - ЕСТЬNULL(ВТотбор.ФактВКоробах, 0) КАК Осталось
		|ИЗ
		|	ВТреал КАК ВТреал
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТотборПоКоробам КАК ВТотборПоКоробам
		|		ПО ВТреал.Номенклатура = ВТотборПоКоробам.Номенклатура
		|			И ВТреал.Упаковка = ВТотборПоКоробам.Упаковка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТотбор КАК ВТотбор
		|		ПО ВТреал.Номенклатура = ВТотбор.Номенклатура
		|			И ВТреал.Упаковка = ВТотбор.Упаковка
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТреал.Номенклатура,
		|	ВТреал.Упаковка,
		|	ЕСТЬNULL(ВТотбор.ФактВКоробах, 0),
		|	ЕСТЬNULL(ВТреал.Количество, 0),
		|	ЕСТЬNULL(ВТреал.Количество, 0) - ЕСТЬNULL(ВТотбор.ФактВКоробах, 0)";
	
	Запрос.УстановитьПараметр("Номенклатура",	Номенклатура);
	Запрос.УстановитьПараметр("Отбор", 			Отбор);
	Запрос.УстановитьПараметр("Реализация", 	Реализация);
	Запрос.УстановитьПараметр("массивКоробок", 	массивКоробок);
	
	СтруктураОтвет = Новый Структура();
	СтруктураОтвет.Вставить("Номенклатура");
	СтруктураОтвет.Вставить("Упаковка");
	СтруктураОтвет.Вставить("ФактПоКоробу");
	СтруктураОтвет.Вставить("Коробка");
	СтруктураОтвет.Вставить("ВесьФактПоНомВКоробах");
	СтруктураОтвет.Вставить("Всего");
	СтруктураОтвет.Вставить("Осталось");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураОтвет,Выборка);
	КонецЕсли;
	
	Возврат СтруктураОтвет;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьКороб(Команда)
	Коробка = "";
	ТекущийКороб = 0;
	ДиапазонКоробов = "";
	Парам = Новый Структура("ПоследнийНомер", ?(ТЗкоробов.Количество()>0,ТЗкоробов[ТЗкоробов.Количество()-1].Коробка,Неопределено));
	Коробка = ОткрытьФормуМодально("Обработка.ТСД_РСК.Форма.ПолучитьДипазонКоробов",Парам,Коробка);
	
	Если СтрНайти(СокрЛП(Коробка),".") > 0 Тогда
		
		ДиапазонКоробов = СокрЛП(Коробка);
		ИспользоватьДиапазон = Истина;
		
		ОбновитьТЗ();
		
		Элементы.ГруппаТЗкоробов.Видимость 	= Ложь;
		
		Элементы.ГруппаТЗ.Видимость	= Истина;
		
		Элементы.ТекущийКороб.Видимость = Ложь;
		Элементы.ДиапазонКоробов.Видимость = Истина;
		
		
	//Иначе
	//	
	//	Попытка
	//		Коробка = Число(СокрЛП(Коробка));
	//		
	//		//получить сразу ? Смысл, если было бы не плохо оповещать что:
	//		//такой номер уже существует
	//		//..
	//		//..
	//		//ПравильныйНовыйНомерКороба
	//		
	//		//проверка на повтор номера
	//		Если ТЗкоробов.НайтиСтроки(Новый Структура("Коробка",Число(СокрЛП(Коробка)))).Количество() > 0 Тогда
	//			Предупреждение("Такой короб уже существет !");
	//			Возврат;
	//		КонецЕсли;
	//		
	//		//проверка на следующий номер по порядку из существующих
	//		Если Коробка <> (ТЗкоробов.Количество() + 1) Тогда
	//			
	//			//НО Если Это Пропущенная Коробка
	//			Если ПропущенныеНомераКоробовПоПорядку.НайтиПоЗначению(Коробка) <> Неопределено Тогда
	//				
	//				//добавляем коробку
	//				
	//			Иначе
	//				
	//				Предупреждение("Не верный номер короба. Должен быть - " + ТЗкоробов.Количество() + 1);
	//				Возврат;
	//				
	//			КонецЕсли;
	//		КонецЕсли;
	//		
	//		//Если это НЕ Пропущенная коробка
	//		Если ПропущенныеНомераКоробовПоПорядку.НайтиПоЗначению(Коробка) = Неопределено Тогда
	//			
	//			//проверка на пропущенные номера коробов
	//			Если ПропущенныеНомераКоробовПоПорядку.Количество() > 0 Тогда
	//				Предупреждение("Существуют пропущенные номера коробов !");
	//				Возврат;
	//			КонецЕсли;
	//			
	//		КонецЕсли;
	//		
	//		ДобавитьКоробТЗкоробов(Число(СокрЛП(Коробка)));
	//		//показываем форму с номеклатурой для добавления
	//		ТекущийКороб = Число(СокрЛП(Коробка));
	//		ОбновитьТЗ();
	//		
	//		Элементы.ГруппаТЗкоробов.Видимость 	= Ложь;
	//		
	//		Элементы.ГруппаТЗ.Видимость	= Истина;
	//		
	//	Исключение
	//		Сообщить("Введите число !");
	//	КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьИзменитьСтатусРасхОрдераКОтбору()
	Если РасходныйОрдер.Статус <> перечисления.СтатусыРасходныхОрдеров.КОтбору Тогда
		
		Попытка
			РО = РасходныйОрдер.ПолучитьОбъект();
			РО.Статус = перечисления.СтатусыРасходныхОрдеров.КОтбору;
			РО.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Сообщить("Ошибка Смены статуса Расходного ордера: "+ОписаниеОшибки());
		КонецПопытки
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПолучитьКоробкуУчитываюПропущенныеНомераКоробовПоПорядку()
	
	//следующий короб
	Коробка = ТЗкоробов.Количество() + 1;
	
	//след. короб учитывая пропущенные
	ПропущенныеНомераКоробовПоПорядку = Новый ТаблицаЗначений;
	ПропущенныеНомераКоробовПоПорядку.Колонки.Добавить("Короб");
	
	ПредыдущийНомерКороба = 0;
	ТекущийНомерКороба = 0;
	Для Каждого Стр из ТЗкоробов Цикл
		Если ПредыдущийНомерКороба <> 0 тогда
			
			ТекущийНомерКороба = Стр.Коробка;
			
			Если ПредыдущийНомерКороба < ТекущийНомерКороба - 1 Тогда
				ПропущенныйНомерКороба = ТекущийНомерКороба - 1;
				нс = ПропущенныеНомераКоробовПоПорядку.Добавить();
				нс.Короб = ТекущийНомерКороба - 1;
			КонецЕсли;
			
		КонецЕсли;
		
		ПредыдущийНомерКороба = Стр.Коробка;
		ПропущенныйНомерКороба = 0;
	КонецЦикла;
	
	ПропущенныеНомераКоробовПоПорядку.Сортировать("Короб");	//сортировать по возрастанию
	
	//
	Если ПропущенныеНомераКоробовПоПорядку.Количество() > 0 Тогда
		Коробка = ПропущенныеНомераКоробовПоПорядку[ПропущенныеНомераКоробовПоПорядку.Количество()-1].Короб;
	КонецЕсли;
	
	Возврат Коробка;

КонецФункции

&НаСервере
Процедура ДобавитьКоробТЗкоробов(Коробка)

	нс = ТЗкоробов.Добавить();
	нс.Коробка = Коробка;

КонецПроцедуры // ДобавитьКоробТЗкоробов()

&НаКлиенте
Процедура ТЗОбработкаЗапросаОбновления()
	ОбновитьТЗ();
КонецПроцедуры

&НаКлиенте
Процедура ТекущийКоробНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = Новый СписокЗначений;
	ДанныеВыбора.ЗагрузитьЗначения(ПолучитьМассивКоробовНаСервере());
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивКоробовНаСервере()
	
	Возврат ТЗкоробов.Выгрузить().ВыгрузитьКолонку("Коробка");
	
КонецФункции

&НаКлиенте
Процедура ТекущийКоробПриИзменении(Элемент)
	
	ОбновитьТЗ();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПолныйСписок(Команда)
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ПоказатьПолныйСписокЗавершение",ЭтотОбъект);
	Парам = Новый Структура("ОсновнойСклад, Реализация, РасходныйОрдер, Отбор", ОсновнойСклад, Реализация, РасходныйОрдер, Отбор);
	ОткрытьФорму("Обработка.ТСД_РСК.Форма.ПолныйСписокПоКоробкам",Парам,,,,,ОписаниеОповещенияОЗакрытии,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
	//ОбновитьТЗПолныйСписок();	при создании на сервере
	
	// показать
	// поиск в табличке по артику
	
	//фильтры ?
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПолныйСписокЗавершение(Результат, Параметры) Экспорт

	Если Элементы.ГруппаТЗкоробов.Видимость Тогда
		ОбновитьТЗкоробов();
	Иначе
		ОбновитьТЗ();
	КонецЕсли;
	
	

КонецПроцедуры // ПоказатьПолныйСписокЗавершение()


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ВК.ИнициализироватьСканер(Ложь, Истина);
	
	//настроить видимость элементов
	#Если НЕ МобильныйКлиент Тогда
		Элементы.ФормаЭмитацияСканера.Видимость = Истина;
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	ВК.ОтключитьСканер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = "ПодключаемоеОборудование"
		И ИмяСобытия = "Barcode"
		И ВводДоступен()	// нужен ли ВводДоступен() в окне где нет определённого поля, куда сканировать ?
		И Элементы.ГруппаТЗ.Видимость	//активна форма с вводдом номенклатуры по коробу
		Тогда	
		
		Штрихкод = Параметр;
		// ищем номенклатуру
		ОбработатьШтрихкод(Штрихкод);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭмитацияСканера(Команда)
	//ВвелиОсновноСклад = ВвестиЗначение(ОсновнойСклад,"Заполнить ОсновнойСклад",Тип("СправочникСсылка.Склады"));
	ШК = "";
	Если ВвестиСтроку(ШК,"Введите Штрихкод для имитации работы сканера",30,Ложь) Тогда
		ШК = СокрЛП(Строка(ШК));
		ШК = СтрЗаменить(ШК, Символы.нпп,"");
		ОбработкаОповещения("Barcode",ШК,"ПодключаемоеОборудование");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШтрихкод(Штрихкод)
		
	Структура = НайтиНоменклатуруПоШтрихкоду(Штрихкод);
	Номенклатура = Структура.Номенклатура;
	
	Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		МобильныйКлиент.ОповещениеПродолжительноеДваСигнала();
		Предупреждение("Номенклатура с таким Штрихкодом не существует !");
		Возврат;
	КонецЕсли;
	
	УпаковкаШК = Структура.УпаковкаШК;
	КоэффициентУпаковкиШК = ?(Структура.КоэффициентУпаковкиШК > 0, Структура.КоэффициентУпаковкиШК, 1);
	
	СтрокаТЧ = ?(ИспользоватьДиапазон, ПолучитьСтрокуТаблицыДанныхПоДиапазону(Номенклатура), ПолучитьСтрокуТаблицыДанных(Номенклатура) );
	
	Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
		МобильныйКлиент.ОповещениеПродолжительноеДваСигнала();
		Предупреждение("Номенклатура в Отборе не найдена !");
		Возврат;
	КонецЕсли;
	
	УпаковкаДляВводаКоличества = ?(ЗначениеЗаполнено(УпаковкаШК), УпаковкаШК, СтрокаТЧ.Упаковка);
	
	КоличествоВведено = ?(ВводПоШтучно, КоэффициентУпаковкиШК, ОткрытьФормуМодально("Обработка.ТСД_РСК.Форма.ВводКоличестваОтбор", Новый Структура("СтрокаТЧ, Упаковка", СтрокаТЧ, УпаковкаДляВводаКоличества)));
	Если (Не ЗначениеЗаполнено(КоличествоВведено)) ИЛИ (КоличествоВведено = 0) Тогда
		Предупреждение("Введите количество !");
		Возврат;
	КонецЕсли;
	
	//Добавлять сверх нормы по согласию пользователя
	//варианты:
	//0. Добавить как обычно, убирая проверку и запрет при проведении - программно
	// далее по коду будет выполнено ->> ДобавитьВОтбор(СтрокаТЧ,КоличествоВведено);
	// - как обычно добавляем номенклатуру с нужным количеством и коробкой
	
	//1. добавить в отбор не заполняя колонку Упаковка ?: 
	//-не очень получается пока что
	
	//2. добавить в реализацию, в расходный ордер, в отбор новую номенклатуру
	//-если добавить даже в реализации тогда как же видеть какое кол-во добавили сверх нормы ? будет "всего" также увеличиваться как кол-во в реализации
	//
	
	//3. делать не проведённым отбор

	Если СтрокаТЧ.Осталось <= 0 ИЛИ КоличествоВведено > СтрокаТЧ.Осталось Тогда
		МобильныйКлиент.ОповещениеПродолжительноеДваСигнала();	//Оповещение не удачного сканирования
	    Ответ = Вопрос("Товар по Заданию будет превышен. Добавить ?",режимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ИспользоватьДиапазон Тогда	
		ДобавитьВОтборДиапазонКоробок(СтрокаТЧ.Номенклатура, СтрокаТЧ.Упаковка, КоличествоВведено, СтрокаТЧ.ФактПоКоробу, СтрокаТЧ.ВесьФактПоНомВКоробах, СтрокаТЧ.Осталось, СтрокаТЧ.Всего, УпаковкаШК);	
	Иначе
		ДобавитьВОтбор(СтрокаТЧ.Номенклатура, СтрокаТЧ.Упаковка, КоличествоВведено, СтрокаТЧ.ФактПоКоробу, СтрокаТЧ.ВесьФактПоНомВКоробах, СтрокаТЧ.Осталось, СтрокаТЧ.Всего);
	КонецЕсли;
	//заполнить последний ввод
	ОчиститьПоследнийВвод();
	ЗаполнитьПоследнийВвод(СтрокаТЧ.Номенклатура, КоличествоВведено);
	//
	
	ВыделитьСтрокуСНоменклатуройЦветом(СтрокаТЧ.Номенклатура);
	
	Фильтр = "Осталось";
	//обновить ТЗ
	ОбновитьТЗ();
	
	УстановитьТекущуюСтроку(СтрокаТЧ.Номенклатура);
	
	МобильныйКлиент.ОповещениеКороткоеОдинСигнал();	//Оповещение удачного сканирования


КонецПроцедуры // ОбработатьШтрихкодПоОдномуКоробу()



&НаСервере
Процедура ОчиститьПоследнийВвод()

	ПоследнийВвод.Очистить();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоследнийВвод(Номенклатура, Количество)

	нс = ПоследнийВвод.Добавить();
	нс.Номенклатура = Номенклатура;
	нс.Количество	= Количество;

КонецПроцедуры

&НаСервере
Процедура ВыделитьСтрокуСНоменклатуройЦветом(Знач Номенклатура)
	
	//условное оформление
	//УсловноеОформление.Элементы.Очистить()
	УсловноеОформление.Элементы[1].Отбор.Элементы[0].ПравоеЗначение 	= Номенклатура;
	УсловноеОформление.Элементы[1].Отбор.Элементы[0].Использование		= Истина;
	//Элемент = УсловноеОформление.Элементы.Добавить();
	//
	//ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	//ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТЗНоменклатура");
	//
	//ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТЗ.Номенклатура");
	//ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//ОтборЭлемента.ПравоеЗначение = СтрокаТЧПоступления.Номенклатура;
	////Элемент.Использование = Истина;
	//
	//Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.СветлоЗолотистый);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущуюСтроку(Знач Номенклатура)
	
	Перем СтрокиСНоменклатурой;
	
	//выделить строку с отсканированной номенклатурой. Найти надо по текущему коробу именно
	СтрокиСНоменклатурой = ТЗ.НайтиСтроки(Новый Структура("Номенклатура",Номенклатура));
	Если СтрокиСНоменклатурой.Количество() > 0 тогда
		Элементы.тз.ТекущаяСтрока = СтрокиСНоменклатурой[0].ПолучитьИдентификатор();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДобавитьВОтборСверхНормы(СтрокаТЧ,КоличествоВведено)

	//Док = Отбор.ПолучитьОбъект();
	
	Попытка
		Док = Отбор.ПолучитьОбъект();
		Если НЕ ЗначениеЗаполнено(Док.ДатаПервогоСканирования) Тогда
			Док.ДатаПервогоСканирования = ТекущаяДата();
		КонецЕсли;
		Док.ДатаПоследнегоСканирования = ТекущаяДата();
		Док.Ответственный = Пользователь;
		Док.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.ВРаботе;
		
		// - накапливаем при сканировании в СтрокаТЧ.Количество 
		
		// есть Ли в ТЧ уже такая номенклатура с незаполненной колонкой Упаковка, с Коробка = ТекущийКороб
		СтрокиТЧсНоменклатурой = Док.ТоварыОтбор.НайтиСтроки(Новый Структура("Номенклатура,Упаковка,Коробка",СтрокаТЧ.Номенклатура,Справочники.УпаковкиНоменклатуры.ПустаяСсылка()));
		
		Если СтрокиТЧсНоменклатурой.Количество() = 1 Тогда
			СтрокиТЧсНоменклатурой[0].Количество					= СтрокиТЧсНоменклатурой[0].Количество 					+ КоличествоВведено;
			СтрокиТЧсНоменклатурой[0].КоличествоУпаковок			= СтрокиТЧсНоменклатурой[0].КоличествоУпаковок 			+ КоличествоВведено;
			
		Иначе
			НоваяСтрока = Док.ТоварыОтбор.Добавить();
			НоваяСтрока.Номенклатура 				= СтрокаТЧ.Номенклатура;
			
			//не заполняем упаковка - так мы будем знать что эта ном-ра сверх нормы...тогда добавлять её отдельной строкой..
			//НоваяСтрока.Упаковка					= СтрокаТЧ.Упаковка;
			
			НоваяСтрока.Количество					= КоличествоВведено;
			НоваяСтрока.КоличествоУпаковок			= КоличествоВведено;
			НоваяСтрока.Ячейка 						= Справочники.СкладскиеЯчейки.НайтиПоНаименованию("00000",,,ОсновнойСклад);
			НоваяСтрока.Коробка						= ТекущийКороб;
			
		КонецЕсли;
		
		
		Док.Записать(РежимЗаписиДокумента.Запись);
		
	Исключение
		Сообщить("Ошибка при изменении отбора:"+ОписаниеОшибки());
	КонецПопытки;
	
	

КонецПроцедуры // ДобавитьВОтбор()

&НаСервере
Процедура ДобавитьВОтбор(Номенклатура, Упаковка, КоличествоВведено, ФактПоКоробу, ВесьФактПоНомВКоробах, Осталось, Всего)

	Попытка
		ПроверитьИзменитьСтатусРасхОрдераКОтбору();
		
		Док = Отбор.ПолучитьОбъект();
		
		ОтветДаты = РСК_УчетРабот.ПолучитьДатуПервогоСканированияДатуПоследнегоСканирования(ТекущаяДата(), Док.ДатаПервогоСканирования, Док.ДатаПоследнегоСканирования);
		Док.ДатаПервогоСканирования = ОтветДаты.ДатаПервогоСканирования;
		Док.ДатаПоследнегоСканирования = ОтветДаты.ДатаПоследнегоСканирования;
		//МоментСканирования 	= ТекущаяДата();
		//ТекущиеСекунды		= число(Формат(МоментСканирования,"ДФ=ss"));
		//МоментСканирования 	= ?( ТекущиеСекунды > 30, МоментСканирования + (60 - ТекущиеСекунды), МоментСканирования - ТекущиеСекунды );
		//Если НЕ ЗначениеЗаполнено(Док.ДатаПервогоСканирования) Тогда
		//	Док.ДатаПервогоСканирования = МоментСканирования;
		//КонецЕсли;
		//Док.ДатаПоследнегоСканирования = МоментСканирования;
		
		Док.Ответственный = Пользователь;
		Док.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.ВРаботе;
		
		// - накапливаем при сканировании в СтрокаТЧ.Количество 
		Строки = Док.ТоварыОтбор.НайтиСтроки(Новый Структура("Номенклатура, Упаковка, Коробка", Номенклатура, Упаковка, ТекущийКороб));
		Если Строки.Количество() > 0 Тогда
			Строки[0].Количество					= Строки[0].Количество 					+ КоличествоВведено;
			Строки[0].КоличествоУпаковок			= Строки[0].КоличествоУпаковок 			+ КоличествоВведено;
			
		Иначе
			НоваяСтрока = Док.ТоварыОтбор.Добавить();
			НоваяСтрока.Номенклатура 				= Номенклатура;
			НоваяСтрока.Упаковка					= Упаковка;
			НоваяСтрока.Количество					= КоличествоВведено;
			НоваяСтрока.КоличествоУпаковок			= КоличествоВведено;
			НоваяСтрока.Ячейка 						= Справочники.СкладскиеЯчейки.НайтиПоНаименованию("00000",,,ОсновнойСклад);
			НоваяСтрока.Коробка						= ТекущийКороб;
			
		КонецЕсли;
		
		
		Док.Записать(РежимЗаписиДокумента.Проведение);
		
	Исключение
		Сообщить("Ошибка при изменении отбора:"+ОписаниеОшибки());
	КонецПопытки;
	
	

КонецПроцедуры // ДобавитьВОтбор()

&НаСервере
Процедура ДобавитьВОтборДиапазонКоробок(Номенклатура, Упаковка, КоличествоВведено, ФактПоКоробу, ВесьФактПоНомВКоробах, Осталось, Всего, УпаковкаПоШтрихкоду)

	Попытка
		ПроверитьИзменитьСтатусРасхОрдераКОтбору();
		
		Док = Отбор.ПолучитьОбъект();
		
		МоментСканирования 	= ТекущаяДата();
		ТекущиеСекунды		= число(Формат(МоментСканирования,"ДФ=ss"));
		МоментСканирования 	= ?( ТекущиеСекунды > 30, МоментСканирования + (60 - ТекущиеСекунды), МоментСканирования - ТекущиеСекунды );
		Если НЕ ЗначениеЗаполнено(Док.ДатаПервогоСканирования) Тогда
			Док.ДатаПервогоСканирования = МоментСканирования;
		КонецЕсли;
		Док.ДатаПоследнегоСканирования = МоментСканирования;
		
		Док.Ответственный = Пользователь;
		Док.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.ВРаботе;
		
		//ДанныеКоэффициентаТранспортнойУпаковки = ПолучитьДанныеКоэффициентаТранспортнойУпаковки(Номенклатура, УпаковкаПоШтрихкоду);
		Коэффициент = УпаковкаПоШтрихкоду.Коэффициент;
		
		//заполнить последний ввод
		ОчиститьПоследнийВводПоНесколькимКоробам();
		
		СтрокаДиапазонКоробов = "";
		Если Коэффициент >= КоличествоВведено Тогда
			//добавляем одну коробку
			
			НоваяСтрока = Док.ТоварыОтбор.Добавить();
			НоваяСтрока.Номенклатура 				= Номенклатура;
			НоваяСтрока.Упаковка					= Упаковка;
			НоваяСтрока.Количество					= КоличествоВведено;
			НоваяСтрока.КоличествоУпаковок			= КоличествоВведено;
			НоваяСтрока.Ячейка 						= Справочники.СкладскиеЯчейки.НайтиПоНаименованию("00000",,,ОсновнойСклад);
			НомерНовогоКороба = ПолучитьНомерНовогоКороба();
			НоваяСтрока.Коробка						= НомерНовогоКороба;
			КоличествоКоробов = 1;
			КоличествоКоробовДолжноБыть = КоличествоКоробов + ТЗкоробов.Количество();
			СтрокаДиапазонКоробов = СокрЛП(Строка(НомерНовогоКороба)) + "." + СокрЛП(Строка(КоличествоКоробовДолжноБыть));
			
			//заполнить последний ввод
			ЗаполнитьПоследнийВводПоНесколькимКоробам(НоваяСтрока.Номенклатура, НоваяСтрока.Коробка, НоваяСтрока.Количество);
			
		Иначе
			//делим количествоВведено на 2 и более коробки
			ОстатокОтДеления 	= 	КоличествоВведено - ((Цел(КоличествоВведено/Коэффициент)*Коэффициент));
			КоличествоКоробов 	= ?(ОстатокОтДеления = 0,	Цел(КоличествоВведено/Коэффициент), Цел(КоличествоВведено/Коэффициент) + 1 );
			КоличествоКоробовДолжноБыть = КоличествоКоробов + ТЗкоробов.Количество();
			
			НомерНовогоКороба = ПолучитьНомерНовогоКороба();
			
			ОстаетсяДобавить = КоличествоВведено;
			Для номерКороб = НомерНовогоКороба По КоличествоКоробовДолжноБыть Цикл
				//ОстатокЗаполнитВесьКороб = ЦЕЛ(ОстаетсяДобавить / ДанныеКоэффициентаТранспортнойУпаковки.Коэффициент) = (ОстаетсяДобавить / ДанныеКоэффициентаТранспортнойУпаковки.Коэффициент);
				
				НоваяСтрока = Док.ТоварыОтбор.Добавить();
				НоваяСтрока.Номенклатура 				= Номенклатура;
				НоваяСтрока.Упаковка					= Упаковка;
				НоваяСтрока.Количество					= ?(ОстаетсяДобавить >= Коэффициент, Коэффициент, ОстаетсяДобавить);
				НоваяСтрока.КоличествоУпаковок			= ?(ОстаетсяДобавить >= Коэффициент, Коэффициент, ОстаетсяДобавить);
				НоваяСтрока.Ячейка 						= Справочники.СкладскиеЯчейки.НайтиПоНаименованию("00000",,,ОсновнойСклад);
				НоваяСтрока.Коробка						= номерКороб;
				
				ОстаетсяДобавить = ОстаетсяДобавить - Коэффициент;
				//номерКороб = номерКороб + 1;
				
				//заполнить последний ввод
				ЗаполнитьПоследнийВводПоНесколькимКоробам(НоваяСтрока.Номенклатура, НоваяСтрока.Коробка, НоваяСтрока.Количество);
			
			КонецЦикла;
			СтрокаДиапазонКоробов = СокрЛП(Строка(НомерНовогоКороба)) + "." + СокрЛП(Строка(КоличествоКоробовДолжноБыть));
		КонецЕсли;
		
		
		Док.Записать(РежимЗаписиДокумента.Проведение);
		ДиапазонКоробов = СтрокаДиапазонКоробов;
		
	Исключение
		Сообщить("Ошибка при изменении отбора:"+ОписаниеОшибки());
	КонецПопытки;
	
	

КонецПроцедуры // ДобавитьВОтбор()

&НаСервере
Функция ПолучитьНомерНовогоКороба()
	Возврат ?(ТЗкоробов.Количество() > 0,ТЗкоробов[ТЗкоробов.Количество()-1].Коробка +1 ,1);

КонецФункции // ПолучитьНомерНовогоКороба()

&НаСервере
Функция ПолучитьДанныеКоэффициентаТранспортнойУпаковки(Номенклатура, УпаковкаПоШтрихкоду)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УпаковкиНоменклатуры.Коэффициент,
		|	УпаковкиНоменклатуры.Владелец.ЕдиницаИзмерения КАК ЕдиницаИзмерения
		|ИЗ
		|	Справочник.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
		|ГДЕ
		|	НЕ УпаковкиНоменклатуры.ПометкаУдаления
		|	И УпаковкиНоменклатуры.ОсновнаяУпаковка
		|	И УпаковкиНоменклатуры.Владелец = &Номенклатура
		|	И УпаковкиНоменклатуры.ЕдиницаИзмерения = &ТранспУп";
	
	Запрос.УстановитьПараметр("ТранспУп", 		Справочники.ЕдиницыИзмерения.НайтиПоНаименованию("ТранспУп"));
	Запрос.УстановитьПараметр("Номенклатура", 	Номенклатура);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат Новый Структура("Коэффициент, ЕдиницаИзмерения", ВыборкаДетальныеЗаписи.Коэффициент, ВыборкаДетальныеЗаписи.ЕдиницаИзмерения);
	КонецЦикла;
	
	Возврат Новый Структура("Коэффициент, ЕдиницаИзмерения", , );
	
КонецФункции // ПолучитьКоэффициентТранспортнойУпаковки()

&НаСервере
Процедура ОчиститьПоследнийВводПоНесколькимКоробам()

	ПоследнийВводПоНесколькимКоробам.Очистить();

КонецПроцедуры // ОчиститьПоследнийВводПоНесколькимКоробам()

&НаСервере
Процедура ЗаполнитьПоследнийВводПоНесколькимКоробам(Номенклатура, Коробка, КоличествоВведено)

	нс = ПоследнийВводПоНесколькимКоробам.Добавить();
	нс.Номенклатура = Номенклатура;
	нс.Коробка 		= Коробка;
	нс.Количество	= КоличествоВведено;

КонецПроцедуры // ЗаполнитьПоследнийВводПоНесколькимКоробам()


//&НаСервере
//Функция НайтиНоменклатуруУпаковкуПоШтрихкоду(Штрихкод)
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//		"ВЫБРАТЬ
//		|	ШтрихкодыНоменклатуры.Номенклатура,
//		|	ШтрихкодыНоменклатуры.Упаковка КАК УпаковкаПоШтрихкоду,
//		|	ЕСТЬNULL(ШтрихкодыНоменклатуры.Упаковка.Коэффициент, 0) КАК КоэффициентУпаковкиШК
//		|ИЗ
//		|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
//		|ГДЕ
//		|	ШтрихкодыНоменклатуры.Штрихкод = &Штрихкод";
//	
//	Запрос.УстановитьПараметр("Штрихкод", Штрихкод);
//	РезультатЗапроса = Запрос.Выполнить();
//	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
//	Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
//	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
//		
//		Возврат Новый Структура("Номенклатура, УпаковкаПоШтрихкоду, КоэффициентУпаковкиШК", ВыборкаДетальныеЗаписи.Номенклатура, ВыборкаДетальныеЗаписи.УпаковкаПоШтрихкоду, ВыборкаДетальныеЗаписи.КоэффициентУпаковкиШК);
//	КонецЦикла;
//	
//	Возврат Новый Структура("Номенклатура, УпаковкаПоШтрихкоду, КоэффициентУпаковкиШК", , , );
//	
//КонецФункции // НайтиНоменклатуруПоШтрихкоду()

&НаСервере
Функция НайтиНоменклатуруПоШтрихкоду(Штрихкод)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШтрихкодыНоменклатуры.Номенклатура,
		|	ШтрихкодыНоменклатуры.Упаковка КАК УпаковкаШК,
		|	ЕСТЬNULL(ШтрихкодыНоменклатуры.Упаковка.Коэффициент, 0) КАК КоэффициентУпаковкиШК
		|ИЗ
		|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|ГДЕ
		|	ШтрихкодыНоменклатуры.Штрихкод = &Штрихкод";
	
	Запрос.УстановитьПараметр("Штрихкод", Штрихкод);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Возврат Новый Структура("Номенклатура, УпаковкаШК, КоэффициентУпаковкиШК", ВыборкаДетальныеЗаписи.Номенклатура, ВыборкаДетальныеЗаписи.УпаковкаШК, ВыборкаДетальныеЗаписи.КоэффициентУпаковкиШК);
	КонецЦикла;
	
	Возврат Новый Структура("Номенклатура, УпаковкаШК, КоэффициентУпаковкиШК",);
	
КонецФункции // НайтиНоменклатуруПоШтрихкоду()

&НаКлиенте
Процедура ОтменитьПоследнийВвод(Команда)
	Если ИспользоватьДиапазон Тогда
		
		Если ПоследнийВводПоНесколькимКоробам.Количество() > 0 Тогда
			
			ОтменитьПоследнийВводПоНесколькимКоробамНаСервере();
			
			ОбновитьТЗ();
			
			//УстановитьТекущуюСтроку(ПоследнийВвод[0].Номенклатура);
			ОчиститьПоследнийВводПоНесколькимКоробам();
			
		КонецЕсли;
	Иначе
		
		//удалить Строку 
		//	ПоследнийВвод[0].Номенклатура
		//	ПоследнийВвод[0].Размещено
		//из ТЧ Размещено документа РазмещениеТоваров
		Если ПоследнийВвод.Количество() > 0 Тогда
			ОтменитьПоследнийВводНаСервере(ПоследнийВвод[0].Номенклатура, ПоследнийВвод[0].Количество);
			
			
			//ВыделитьСтрокуСНоменклатуройЦветом(ПоследнийВвод[0].Номенклатура);
			
			//обновть ТЗ
			ОбновитьТЗ();
			
			УстановитьТекущуюСтроку(ПоследнийВвод[0].Номенклатура);
			ОчиститьПоследнийВвод();
			
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОтменитьПоследнийВводНаСервере(Номенклатура, КоличествоБылоВведено)
	строки = ТЗ.НайтиСтроки(Новый Структура("Номенклатура",Номенклатура));
	Попытка
	
		Док = Отбор.ПолучитьОбъект();
		//удаляем/ редак. строки именно с этим коробом
		//т.к. при "выходе" из формы таблицы по коробу очищаем тз ПоследнийВвод
		строки = Док.ТоварыОтбор.НайтиСтроки(Новый Структура("Номенклатура, Коробка",Номенклатура, ТекущийКороб));
		Для Каждого Стр из строки Цикл
			ОстатокКоличество = Стр.Количество - КоличествоБылоВведено;
			Если ОстатокКоличество = 0 Тогда
				Док.ТоварыОтбор.Удалить(стр);
			Иначе
				Стр.Количество = ОстатокКоличество;
				Стр.КоличествоУпаковок = ОстатокКоличество;
			КонецЕсли;
		КонецЦикла;
		
		Док.Записать(РежимЗаписиДокумента.Проведение);
	
	Исключение
		Сообщить("Ошибка записи Размещения "+ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьПоследнийВводПоНесколькимКоробамНаСервере()
	Если ПоследнийВводПоНесколькимКоробам.Количество() > 0 тогда
		
		Попытка
			Док = Отбор.ПолучитьОбъект();
			
			Для каждого СтрВвод Из ПоследнийВводПоНесколькимКоробам Цикл
				
				//удаляем/ редак. строки именно с этим коробом
				//т.к. при "выходе" из формы таблицы по коробу очищаем тз ПоследнийВвод
				строки = Док.ТоварыОтбор.НайтиСтроки(Новый Структура("Номенклатура, Коробка",СтрВвод.Номенклатура, СтрВвод.Коробка));
				Для Каждого Стр из строки Цикл
					ОстатокКоличество = Стр.Количество - СтрВвод.Количество;
					Если ОстатокКоличество = 0 Тогда
						Док.ТоварыОтбор.Удалить(стр);
					Иначе
						Стр.Количество = ОстатокКоличество;
						Стр.КоличествоУпаковок = ОстатокКоличество;
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
			
			Док.Записать(РежимЗаписиДокумента.Проведение);
			
		Исключение
			Сообщить("Ошибка записи Размещения "+ОписаниеОшибки());
		КонецПопытки;
		
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущиеДанные = ТЗ.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	
	Если ИспользоватьДиапазон Тогда
		СтрокаТЧ = ПолучитьСтрокуТаблицыДанныхПоДиапазону(ТекущиеДанные.Номенклатура);
		
		//список действий
		МассивДействий = Новый Массив;
		МассивДействий.Добавить("ДобавитьКоличество");
		МассивДействий.Добавить("Отмена");
		
		
		Парам = Новый Структура("МассивДействий, Номенклатура", МассивДействий, СтрокаТЧ.Номенклатура);
		Ответ = ОткрытьФормуМодально("Обработка.ТСД_РСК.Форма.ДействияСНоменклатурой",Парам);
		Если Не ЗначениеЗаполнено(Ответ) Тогда 
			Возврат;
		КонецЕсли;
		
		Если Ответ = "ДобавитьКоличество" Тогда
			ДобавитьКоличество = 0;
			ДобавитьКоличество = ОткрытьФормуМодально("Обработка.ТСД_РСК.Форма.ВводКоличестваОтбор", Новый Структура("СтрокаТЧ, Упаковка", СтрокаТЧ, СтрокаТЧ.Упаковка));
			Если ТипЗнч(ДобавитьКоличество) = тип("Число") И ДобавитьКоличество > 0 Тогда
				
				ДобавитьКоличествоПоДиапазону(СтрокаТЧ, ДобавитьКоличество);
				
			КонецЕсли;
			
		ИначеЕсли Ответ = "Отмена" Тогда
			//ничего не делаем
			
		КонецЕсли;
		
		
		
	Иначе
		СтрокаТЧ = ПолучитьСтрокуТаблицыДанных(ТекущиеДанные.Номенклатура);
		
		//список действий
		МассивДействий = Новый Массив;
		МассивДействий.Добавить("ДобавитьКоличествоПоКоробу");
		МассивДействий.Добавить("УдалитьКоличествоПоКоробу");
		МассивДействий.Добавить("ОбнулитьКоличествоПоКоробу");
		МассивДействий.Добавить("ОбнулитьКоличествоПоЗаданию");
		МассивДействий.Добавить("Отмена");
		
		Парам = Новый Структура("МассивДействий, Номенклатура", МассивДействий, СтрокаТЧ.Номенклатура);
		Ответ = ОткрытьФормуМодально("Обработка.ТСД_РСК.Форма.ДействияСНоменклатурой",Парам);
		Если Не ЗначениеЗаполнено(Ответ) Тогда 
			Возврат;
		КонецЕсли;
		
		Если Ответ = "ОбнулитьКоличествоПоКоробу" Тогда
			Ответ = Вопрос("Действительно обнулить всё кол-во по коробу № " + ТекущийКороб + " ?", РежимДиалогаВопрос.ДаНет, 5, КодВозвратаДиалога.Нет, , КодВозвратаДиалога.Нет);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				ОбнулитьКоличествоПоКоробу(	СтрокаТЧ.Номенклатура, 
				СтрокаТЧ.Упаковка, 
				СтрокаТЧ.ФактПоКоробу, 
				СтрокаТЧ.ВесьФактПоНомВКоробах, 
				СтрокаТЧ.Осталось, 
				СтрокаТЧ.Всего);
			КонецЕсли;
			
		ИначеЕсли Ответ = "ОбнулитьКоличествоПоЗаданию" Тогда
			Ответ = Вопрос("Действительно обнулить всё кол-во во всех коробах по заданию ?", РежимДиалогаВопрос.ДаНет, 5, КодВозвратаДиалога.Нет, , КодВозвратаДиалога.Нет);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				ОбнулитьКоличествоПоЗаданию(СтрокаТЧ.Номенклатура, 
				СтрокаТЧ.Упаковка, 
				СтрокаТЧ.ФактПоКоробу, 
				СтрокаТЧ.ВесьФактПоНомВКоробах, 
				СтрокаТЧ.Осталось, 
				СтрокаТЧ.Всего);
			КонецЕсли;
		ИначеЕсли Ответ = "УдалитьКоличествоПоКоробу" Тогда
			УдалитьКоличествоПоКоробу = 0;
			УдалитьКоличествоПоКоробу = ОткрытьФормуМодально("Обработка.ТСД_РСК.Форма.ВводКоличестваОтбор", Новый Структура("СтрокаТЧ, Упаковка", СтрокаТЧ, СтрокаТЧ.Упаковка));
			//ОткрытьФормуМодально("Обработка.ТСД_РСК.Форма.ВводКоличества")
			Если ТипЗнч(УдалитьКоличествоПоКоробу) = тип("Число") И УдалитьКоличествоПоКоробу > 0 Тогда
				УдалитьКоличествоПоКоробу(СтрокаТЧ.Номенклатура, 
				СтрокаТЧ.Упаковка,
				УдалитьКоличествоПоКоробу,
				СтрокаТЧ.ФактПоКоробу, 
				СтрокаТЧ.ВесьФактПоНомВКоробах, 
				СтрокаТЧ.Осталось, 
				СтрокаТЧ.Всего);
			КонецЕсли;
			
		ИначеЕсли Ответ = "ДобавитьКоличествоПоКоробу" Тогда
			ДобавитьКоличествоПоКоробу = 0;
			ДобавитьКоличествоПоКоробу = ОткрытьФормуМодально("Обработка.ТСД_РСК.Форма.ВводКоличестваОтбор", Новый Структура("СтрокаТЧ, Упаковка", СтрокаТЧ, СтрокаТЧ.Упаковка));
			Если ТипЗнч(ДобавитьКоличествоПоКоробу) = тип("Число") И ДобавитьКоличествоПоКоробу > 0 Тогда
				ДобавитьКоличествоПоКоробу(	СтрокаТЧ.Номенклатура, 
				СтрокаТЧ.Упаковка,
				ДобавитьКоличествоПоКоробу,
				СтрокаТЧ.ФактПоКоробу, 
				СтрокаТЧ.ВесьФактПоНомВКоробах, 
				СтрокаТЧ.Осталось, 
				СтрокаТЧ.Всего);
			КонецЕсли;
			
		ИначеЕсли Ответ = "Отмена" Тогда
			//ничего не делаем
			
		КонецЕсли;
		
		
КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКоличествоПоДиапазону(СтрокаТЧ, КоличествоВведено)

	Если СтрокаТЧ.Осталось <= 0 ИЛИ КоличествоВведено > СтрокаТЧ.Осталось Тогда
		МобильныйКлиент.ОповещениеПродолжительноеДваСигнала();	//Оповещение не удачного сканирования
	    Ответ = Вопрос("Товар по Заданию будет превышен. Добавить ?",режимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	//пользователь выбирает упаковку сам
	УпаковкаВыбранная = ОткрытьФормуМодально("Обработка.ТСД_РСК.Форма.ВыборУпаковки",Новый Структура("Номенклатура",СтрокаТЧ.Номенклатура));
	Если НЕ ЗначениеЗаполнено(УпаковкаВыбранная) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьВОтборДиапазонКоробок(СтрокаТЧ.Номенклатура, СтрокаТЧ.Упаковка, КоличествоВведено, СтрокаТЧ.ФактПоКоробу, СтрокаТЧ.ВесьФактПоНомВКоробах, СтрокаТЧ.Осталось, СтрокаТЧ.Всего, УпаковкаВыбранная);	
	
	
	ВыделитьСтрокуСНоменклатуройЦветом(СтрокаТЧ.Номенклатура);
	
	//обновить ТЗ
	ОбновитьТЗ();
	
	УстановитьТекущуюСтроку(СтрокаТЧ.Номенклатура);
	
	МобильныйКлиент.ОповещениеКороткоеОдинСигнал();	//Оповещение удачного сканирования


КонецПроцедуры // ДобавитьКоличествоПоДиапазону()

&НаСервере
Процедура  ЗаполнитьУпаковкиПоНоменклатуре(Номенклатура)
	Соответствие = Новый Соответствие();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УпаковкиНоменклатуры.Ссылка КАК Упаковка,
		|	УпаковкиНоменклатуры.Коэффициент
		|ИЗ
		|	Справочник.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
		|ГДЕ
		|	УпаковкиНоменклатуры.Владелец = &Номенклатура
		|	И НЕ УпаковкиНоменклатуры.ПометкаУдаления
		|	И УпаковкиНоменклатуры.ОсновнаяУпаковка
		|	И УпаковкиНоменклатуры.ЕдиницаИзмерения = &ЕдиницаИзмеренияШТ";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ЕдиницаИзмеренияШТ", Справочники.ЕдиницыИзмерения.НайтиПоКоду("796"));	// Шт
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		нс = ТЗУпаковки.Добавить();
		ЗаполнитьЗначенияСвойств(ТЗУпаковки.Добавить(),ВыборкаДетальныеЗаписи);
	КонецЦикла;
	
	
	
КонецПроцедуры // НайтиНоменклатуруПоШтрихкоду()



&НаКлиенте
Процедура ОбнулитьКоличествоПоКоробу(Номенклатура, Упаковка, ФактПоКоробу, ВесьФактПоНомВКоробах, Осталось, Всего)

	ОбнулитьКоличествоПоКоробуНаСервере(Номенклатура, Упаковка, ФактПоКоробу, ВесьФактПоНомВКоробах, Осталось, Всего);
	ВыделитьСтрокуСНоменклатуройЦветом(Номенклатура);
	
	//обновить ТЗ
	ОбновитьТЗ();
	
	УстановитьТекущуюСтроку(Номенклатура);
	
	МобильныйКлиент.ОповещениеКороткоеОдинСигнал();	//Оповещение удачного сканирования

КонецПроцедуры // ОбнулитьКоличествоПоКоробу()

&НаСервере
Процедура ОбнулитьКоличествоПоКоробуНаСервере(Номенклатура, Упаковка, ФактПоКоробу, ВесьФактПоНомВКоробах, Осталось, Всего)

	Попытка
	    ПроверитьИзменитьСтатусРасхОрдераКОтбору();
		
		Док = Отбор.ПолучитьОбъект();
		строки = Док.ТоварыОтбор.НайтиСтроки(Новый Структура("Номенклатура, Коробка",Номенклатура, ТекущийКороб));
		Для Каждого Стр из строки Цикл
			Док.ТоварыОтбор.Удалить(стр);
			
		КонецЦикла;
		
		Док.Записать(РежимЗаписиДокумента.Проведение);
	
	Исключение
		Сообщить("Ошибка записи Отбора "+ОписаниеОшибки());
	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Процедура ОбнулитьКоличествоПоЗаданию(Номенклатура, Упаковка, ФактПоКоробу, ВесьФактПоНомВКоробах, Осталось, Всего)
	
	ОбнулитьКоличествоПоЗаданиюНаСервере(Номенклатура, Упаковка, ФактПоКоробу, ВесьФактПоНомВКоробах, Осталось, Всего);
	ВыделитьСтрокуСНоменклатуройЦветом(Номенклатура);
	
	//обновить ТЗ
	ОбновитьТЗ();
	
	УстановитьТекущуюСтроку(Номенклатура);
	
	МобильныйКлиент.ОповещениеКороткоеОдинСигнал();	//Оповещение удачного сканирования

	
КонецПроцедуры

&НаСервере
Процедура ОбнулитьКоличествоПоЗаданиюНаСервере(Номенклатура, Упаковка, ФактПоКоробу, ВесьФактПоНомВКоробах, Осталось, Всего)

	Попытка
	    ПроверитьИзменитьСтатусРасхОрдераКОтбору();
		
		Док = Отбор.ПолучитьОбъект();
		строки = Док.ТоварыОтбор.НайтиСтроки(Новый Структура("Номенклатура",Номенклатура));
		Для Каждого Стр из строки Цикл
			Док.ТоварыОтбор.Удалить(стр);
			
		КонецЦикла;
		
		Док.Записать(РежимЗаписиДокумента.Проведение);
	
	Исключение
		Сообщить("Ошибка записи Отбора "+ОписаниеОшибки());
	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Процедура УдалитьКоличествоПоКоробу(Номенклатура, Упаковка, УдалитьКоличествоПоКоробу, ФактПоКоробу, ВесьФактПоНомВКоробах, Осталось, Всего)

	//проверка
	// сделать Осталось чтобы было не отриц фислом
	Если УдалитьКоличествоПоКоробу > ФактПоКоробу Тогда
		МобильныйКлиент.ОповещениеПродолжительноеДваСигнала();	//Оповещение не удачного сканирования
	    Предупреждение("Нельзя удалить такое количество. В коробе сейчас " + ФактПоКоробу);
		Возврат;
	КонецЕсли;
	
	УдалитьКоличествоПоКоробуНаСервере(Номенклатура, Упаковка, УдалитьКоличествоПоКоробу, ФактПоКоробу, ВесьФактПоНомВКоробах, Осталось, Всего);
	ВыделитьСтрокуСНоменклатуройЦветом(Номенклатура);
	
	ОчиститьПоследнийВвод();
	
	//обновить ТЗ
	ОбновитьТЗ();
	
	УстановитьТекущуюСтроку(Номенклатура);
	
	МобильныйКлиент.ОповещениеКороткоеОдинСигнал();	//Оповещение удачного сканирования
	
КонецПроцедуры // УдалитьКоличествоПоКоробу()

&НаСервере
Процедура УдалитьКоличествоПоКоробуНаСервере(Номенклатура, Упаковка, УдалитьКоличествоПоКоробу, ФактПоКоробу, ВесьФактПоНомВКоробах, Осталось, Всего)
	
	Попытка
	    ПроверитьИзменитьСтатусРасхОрдераКОтбору();
		
		Док = Отбор.ПолучитьОбъект();
		строки = Док.ТоварыОтбор.НайтиСтроки(Новый Структура("Номенклатура, Коробка",Номенклатура, ТекущийКороб));
		Для Каждого Стр из строки Цикл
			ОстатокКоличество = Стр.Количество - УдалитьКоличествоПоКоробу;
			Если ОстатокКоличество = 0 Тогда
				Док.ТоварыОтбор.Удалить(стр);
			Иначе
				Стр.Количество 			= ОстатокКоличество;
				Стр.КоличествоУпаковок 	= ОстатокКоличество;
			КонецЕсли;
			
		КонецЦикла;
		
		Док.Записать(РежимЗаписиДокумента.Проведение);
	
	Исключение
		Сообщить("Ошибка записи Отбора "+ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКоличествоПоКоробу(Номенклатура, Упаковка, ДобавитьКоличествоПоКоробу, ФактПоКоробу, ВесьФактПоНомВКоробах, Осталось, Всего)
	
	//Добавлять сверх нормы по согласию пользователя
	Если Осталось <= 0 ИЛИ ДобавитьКоличествоПоКоробу > Осталось Тогда
		МобильныйКлиент.ОповещениеПродолжительноеДваСигнала();	//Оповещение не удачного сканирования
	    Ответ = Вопрос("Товар по Заданию будет превышен. Добавить ?",режимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ДобавитьВОтбор(Номенклатура, Упаковка, ДобавитьКоличествоПоКоробу, ФактПоКоробу, ВесьФактПоНомВКоробах, Осталось, Всего);
	
	//заполнить последний ввод
	ОчиститьПоследнийВвод();
	ЗаполнитьПоследнийВвод(Номенклатура, ДобавитьКоличествоПоКоробу);
	
	ВыделитьСтрокуСНоменклатуройЦветом(Номенклатура);
	
	//обновить ТЗ
	ОбновитьТЗ();
	
	УстановитьТекущуюСтроку(Номенклатура);
	
	МобильныйКлиент.ОповещениеКороткоеОдинСигнал();	//Оповещение удачного сканирования
КонецПроцедуры


&НаКлиенте
Процедура Завершение(Команда)
	//Проверить есть ли расхождения (именно когда остолось > 0)
	//Предупредить об наличии пользователя, спросить продолжить ли завершение документа
	Статусы = ПолучитьСтатусы();
	//РасхожденияСуществуют, СверхНормы
	Если Статусы.РасхожденияСуществуют Тогда
		Если Статусы.СверхНормы Тогда
			Ответ = Вопрос("Товара в коробах БОЛЬШЕ чем требуется по документу. Продолжить Завершение документа ?",РежимДиалогаВопрос.ДаНет,,,"ЗАВЕРШЕНИЕ");
		Иначе
			Ответ = Вопрос("Не весь товар в коробах. Продолжить Завершение документа ?",РежимДиалогаВопрос.ДаНет,,,"ЗАВЕРШЕНИЕ");
		КонецЕсли;
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	//получить ПостМесто
	ПостМесто = ОткрытьФормуМодально("Обработка.ТСД_РСК.Форма.ПостМесто");
	
	//завершитьдокумент
	ЗавершитьОтбор();
	ЗакрытиеПриЗавершении = Истина;
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура  ЗавершитьОтбор()
	
	//Внести всю таблицу данных в ТЧ Отбора - да по такому же приципу работал раньше обмен файликами с Data Mobile
	//Очистим ТЧ, и запишем из ТалицыДанных
	
	РасхожденияСуществуют = Ложь;
	ТаблицаДанных = ПолучитьТаблицуДанных();
	//колонки таблицы:
	//Номенклатура
	//Упаковка
	//ФактПоКоробу
	//Коробка
	//ВесьФактПоНомВКоробах
	//Всего
	//Осталось
	А=0;
	Попытка
		ОтборДок = Отбор.ПолучитьОбъект();
		ОтборДок.ТоварыОтбор.Очистить();
		
		//добавим что возможно, исключая недоборы и переборы
		Для каждого Стр Из ТаблицаДанных Цикл
			
			Если Стр.ВесьФактПоНомВКоробах <> Стр.Всего Тогда
				РасхожденияСуществуют = Истина;
			КонецЕсли;
			
			КоличествоДобавлено 		= ОтборДок.ТоварыОтбор.Выгрузить(ОтборДок.ТоварыОтбор.НайтиСтроки(Новый Структура("Номенклатура",Стр.Номенклатура))).Итог("КоличествоОтобрано");
			КоличествоБудетДобавлено	= КоличествоДобавлено + Стр.ФактПоКоробу;
			
			КоличествоПеребор 			= ?( (КоличествоДобавлено - Стр.Всего) > 0, КоличествоДобавлено - Стр.Всего, 0);
			КоличествоБудетПеребор 		= ?( (КоличествоБудетДобавлено - Стр.Всего) > 0, КоличествоБудетДобавлено - Стр.Всего, 0);
			
			КоличествоНЕдобор 			= ?( (Стр.Всего - КоличествоДобавлено) > 0, Стр.Всего - КоличествоДобавлено, 0);
			КоличествоБудетНЕдобор 		= ?( (Стр.Всего - КоличествоБудетДобавлено) > 0, Стр.Всего - КоличествоБудетДобавлено, 0);
			
			//когда сканировали товар хотя бы раз в этой коробке
			Если Стр.ФактПоКоробу > 0 Тогда
				Если (КоличествоНЕдобор > 0 ИЛИ КоличествоБудетНЕдобор > 0) И НЕ (КоличествоПеребор > 0 ИЛИ КоличествоБудетПеребор > 0) Тогда
					
					//Стр.ФактПоКоробу
					НоваяСтрока = ОтборДок.ТоварыОтбор.Добавить();
					ЗавершитьОтборЗаполнитьСтрокуТЧ(НоваяСтрока, Стр);
					НоваяСтрока.КоличествоОтобрано			= Стр.ФактПоКоробу;		//отобрано по факту
					НоваяСтрока.КоличествоУпаковокОтобрано	= Стр.ФактПоКоробу;		//отобрано по факту
					НоваяСтрока.Количество					= Стр.ФактПоКоробу;		//должно быть
					НоваяСтрока.КоличествоУпаковок			= Стр.ФактПоКоробу;		//должно быть
					
				ИначеЕсли (КоличествоПеребор > 0 ИЛИ КоличествоБудетПеребор > 0) Тогда
					
					Если КоличествоПеребор > 0 тогда
						
						НоваяСтрока = ОтборДок.ТоварыОтбор.Добавить();
						ЗавершитьОтборЗаполнитьСтрокуТЧ(НоваяСтрока, Стр);
						НоваяСтрока.КоличествоОтобрано			= Стр.ФактПоКоробу;		//отобрано по факту
						НоваяСтрока.КоличествоУпаковокОтобрано	= Стр.ФактПоКоробу;		//отобрано по факту
						НоваяСтрока.Количество					= 0;		//должно быть
						НоваяСтрока.КоличествоУпаковок			= 0;		//должно быть
					
					ИначеЕсли КоличествоБудетПеребор > 0 тогда
						//Высчитать Остаток для переноса на новую строчку 
						//когда уже добавили по всему документу 9 шт, всего по СКЗ должно быть 10, а сейчас хотят добавить 3 
						// как быть?
						//сколько не хватает до нормы: 10 - 9 = 1
						СколькоНеХватаетДоНормы = Стр.Всего - КоличествоДобавлено;
						//добиваем в отдельную строчку "сколько не хватает до нормы" - если есть что добивать до нормы, т.е. если больше 0 показатель СколькоНеХватаетДоНормы
						Если СколькоНеХватаетДоНормы > 0 Тогда
							НоваяСтрока = ОтборДок.ТоварыОтбор.Добавить();
							ЗавершитьОтборЗаполнитьСтрокуТЧ(НоваяСтрока, Стр);
							НоваяСтрока.КоличествоОтобрано			= СколькоНеХватаетДоНормы;		//отобрано по факту
							НоваяСтрока.КоличествоУпаковокОтобрано	= СколькоНеХватаетДоНормы;		//отобрано по факту
							НоваяСтрока.Количество					= СколькоНеХватаетДоНормы;		//должно быть
							НоваяСтрока.КоличествоУпаковок			= СколькоНеХватаетДоНормы;		//должно быть
						КонецЕсли;
						//Остаток что осталось добавить , уже это будет Сверх нормы
						//3-1 = 2
						ОстатокЧтоОсталосьДобавить = Стр.ФактПоКоробу - СколькоНеХватаетДоНормы;
						//добиваем снова в отдельную строчку "Остаток что осталось добавить" - ?????
						
						НоваяСтрока = ОтборДок.ТоварыОтбор.Добавить();
						ЗавершитьОтборЗаполнитьСтрокуТЧ(НоваяСтрока, Стр);
						НоваяСтрока.КоличествоОтобрано			= ОстатокЧтоОсталосьДобавить;		//отобрано по факту
						НоваяСтрока.КоличествоУпаковокОтобрано	= ОстатокЧтоОсталосьДобавить;		//отобрано по факту
						НоваяСтрока.Количество					= 0;		//должно быть
						НоваяСтрока.КоличествоУпаковок			= 0;		//должно быть
						
						
					КонецЕсли;
					 				
				КонецЕсли;
			КонецЕсли;
			
			//когда не разу не сканировали товар в этой коробке
			Если Стр.ФактПоКоробу = 0 Тогда
				Если (КоличествоНЕдобор > 0 ИЛИ КоличествоБудетНЕдобор > 0) Тогда
					
					//КоличествоБудетНЕдобор
					
					НоваяСтрока = ОтборДок.ТоварыОтбор.Добавить();
					ЗавершитьОтборЗаполнитьСтрокуТЧ(НоваяСтрока, Стр);
					НоваяСтрока.КоличествоОтобрано			= 0;							//отобрано по факту
					НоваяСтрока.КоличествоУпаковокОтобрано	= 0;							//отобрано по факту
					НоваяСтрока.Количество					= КоличествоБудетНЕдобор;		//должно быть
					НоваяСтрока.КоличествоУпаковок			= КоличествоБудетНЕдобор;		//должно быть
					
				КонецЕсли;
			КонецЕсли;
			
			
		КонецЦикла;
		
		
		ОтборДок.Статус = ?(РасхожденияСуществуют, 	Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоСОшибками, 
													Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоБезОшибок);
		ОтборДок.Исполнитель 	= Пользователь;
		ОтборДок.Ответственный 	= Пользователь;
		ОтборДок.Записать(РежимЗаписиДокумента.Проведение);
		
	Исключение
		Сообщить("Ошибка при изменении Размещения "+ОписаниеОшибки());
	КонецПопытки;
	
	//Ррасходный ордер - статус К Отгрузке
	РасхОрдер = РасходныйОрдер.ПолучитьОбъект();
	РасхОрдер.Статус = ?(РасхожденияСуществуют, Перечисления.СтатусыРасходныхОрдеров.КОтбору, Перечисления.СтатусыРасходныхОрдеров.КОтгрузке);
	РасхОрдер.Записать(РежимЗаписиДокумента.Проведение);
	
	
	//Заполняем Реализацию
	СКЗ = Реализация.ПолучитьОбъект();
	//СКЗ.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;	//какой сейчас стоит - Отгружено (Реализовано), не менять его ?
	тзКолвоКоробов 		= ОтборДок.Ссылка.ТоварыОтбор.Выгрузить();
	тзКолвоКоробов.Свернуть("Коробка");
	КолвоКоробов		= тзКолвоКоробов.Количество();
	СКЗ.Короб			= КолвоКоробов;
	
	//Комплектация
	РСК_УчетРабот.ЗаписатьРаботу(Истина, СКЗ.Ссылка, Справочники.РСК_ВыполняемыеРаботы.Комплектация, Пользователь.ФизическоеЛицо, ОтборДок.Ссылка.ДатаПервогоСканирования, ОтборДок.Ссылка.ДатаПоследнегоСканирования);
	//СКЗ.Проверил		= Пользователь.ФизическоеЛицо;
	//СКЗ.Дата1Проверки	= ОтборДок.Ссылка.ДатаПервогоСканирования;
	//СКЗ.Дата2Проверки	= ОтборДок.Ссылка.ДатаПоследнегоСканирования;
	
	СКЗ.СтатусОтгрузки 	= ?(РасхожденияСуществуют,Перечисления.СтатусыРеализацийТоваров.ОтборВыполненСОшибками,Перечисления.СтатусыРеализацийТоваров.КОтгрузке);
	СКЗ.ПостМесто = ПостМесто;
	СКЗ.Записать(РежимЗаписиДокумента.Запись);	// или Проведение ?
	
	
КонецПроцедуры

&НаСервере
Процедура ЗавершитьОтборЗаполнитьСтрокуТЧ( НоваяСтрока, Знач Стр)
	
	НоваяСтрока.Ячейка 						= Справочники.СкладскиеЯчейки.НайтиПоНаименованию("00000",,,ОсновнойСклад);
	НоваяСтрока.Номенклатура 				= Стр.Номенклатура;
	НоваяСтрока.Упаковка 					= Стр.Упаковка;
	НоваяСтрока.Коробка						= Стр.Коробка;

КонецПроцедуры // ПолучитьТЗЗавершения()

&НаСервере
Функция ПолучитьСтатусы()
	РасхожденияСуществуют 	= Ложь;
	СверхНормы				= Ложь;
	ТаблицаДанных = ПолучитьТаблицуДанных();
	//колонки таблицы:
	//Номенклатура
	//Упаковка
	//ФактПоКоробу
	//Коробка
	//ВесьФактПоНомВКоробах
	//Всего
	//Осталось

	Для каждого Стр из ТаблицаДанных Цикл
			
			Если (Стр.Осталось > 0) ИЛИ (Стр.ВесьФактПоНомВКоробах > Стр.Всего) Тогда
				РасхожденияСуществуют = Истина;
			КонецЕсли;
			
			Если Стр.ВесьФактПоНомВКоробах > Стр.Всего Тогда
				СверхНормы = Истина;
			КонецЕсли;
			
	КонецЦикла;
	Возврат Новый Структура("РасхожденияСуществуют, СверхНормы",РасхожденияСуществуют, СверхНормы);
КонецФункции // ПолучитьТЗЗавершения()

#Область Интерактив

&НаКлиенте
Процедура ФильтрПриИзменении(Элемент)
	ОбновитьТЗ();
КонецПроцедуры

&НаКлиенте
Процедура ВвестиДиапазон(Команда)
	ДиапазонКоробов = "";
	ВвестиЗначение(ДиапазонКоробов,"введите диапазон коробов",тип("Строка"));
	Если НЕ ПустаяСтрока(ДиапазонКоробов) Тогда
		Элементы.ТекущийКороб.Видимость = Ложь;
		Элементы.ДиапазонКоробов.Видимость = Истина;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СледующийКороб(Команда)
	
	Коробка = 0;
	ТекущийКороб = 0;
	ДиапазонКоробов = "";
	ИспользоватьДиапазон = Ложь;
	Коробка = ПолучитьКоробкуУчитываюПропущенныеНомераКоробовПоПорядку();
	
	ДобавитьКоробТЗкоробов(Коробка);
	//показываем форму с номеклатурой для добавления
	ТекущийКороб = Коробка;
	ОбновитьТЗ();
	
	Элементы.ГруппаТЗкоробов.Видимость 	= Ложь;
	
	Элементы.ГруппаТЗ.Видимость	= Истина;
	
		
	
КонецПроцедуры

	
#КонецОбласти



















