
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОсновнойСклад 	= Параметры.ОсновнойСклад;
	ОтгрузочныйЛист = Параметры.ОтгрузочныйЛист;
	Фильтр = "ВсеДанные";
	
	Заголовок = "Отгрузочный Лист: " + ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ОтгрузочныйЛист.Номер);
	ОбновитьСписок();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписок()

	// Насколько быстро будет работать запрос. он должен отрабатывать каждый раз при сканировании коробки
	// Альтернатива: сделать новую ТЧ у Отг.листа со списком коробок для отгрузки, и у же с этим списком каждый раз при сканировании сравнивать - так должно быть быстрее
	// - заполнять список коробок для отгрузки при добавлении/удалении/изменении тч Складкие задания в отгруз. листе, когда добавляют удаляют изменяют складское задание в Отгруз. лист.
	
	//// тч КоробкиДляОтгрузки	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ОтгрузочныйЛистКоробкиДляОтгрузки.Реализация КАК Реализация,
	//	|	КОЛИЧЕСТВО(ОтгрузочныйЛистКоробкиДляОтгрузки.Коробка) КАК План
	//	|ПОМЕСТИТЬ ВТПлан
	//	|ИЗ
	//	|	Документ.ОтгрузочныйЛист.КоробкиДляОтгрузки КАК ОтгрузочныйЛистКоробкиДляОтгрузки
	//	|ГДЕ
	//	|	ОтгрузочныйЛистКоробкиДляОтгрузки.Ссылка = &ОтгрузочныйЛист
	//	|
	//	|СГРУППИРОВАТЬ ПО
	//	|	ОтгрузочныйЛистКоробкиДляОтгрузки.Реализация
	//	|
	//	|ИНДЕКСИРОВАТЬ ПО
	//	|	Реализация
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ОтгрузочныйЛистОтгруженныеКоробки.Реализация КАК Реализация,
	//	|	КОЛИЧЕСТВО(ОтгрузочныйЛистОтгруженныеКоробки.Коробка) КАК Факт
	//	|ПОМЕСТИТЬ ВТФакт
	//	|ИЗ
	//	|	Документ.ОтгрузочныйЛист.ОтгруженныеКоробки КАК ОтгрузочныйЛистОтгруженныеКоробки
	//	|ГДЕ
	//	|	ОтгрузочныйЛистОтгруженныеКоробки.Ссылка = &ОтгрузочныйЛист
	//	|
	//	|СГРУППИРОВАТЬ ПО
	//	|	ОтгрузочныйЛистОтгруженныеКоробки.Реализация
	//	|
	//	|ИНДЕКСИРОВАТЬ ПО
	//	|	Реализация
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ВТПлан.Реализация КАК Реализация,
	//	|	ЕСТЬNULL(ВТПлан.План, 0) КАК План,
	//	|	ЕСТЬNULL(ВТФакт.Факт, 0) КАК Факт
	//	|ИЗ
	//	|	ВТПлан КАК ВТПлан
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФакт КАК ВТФакт
	//	|		ПО ВТПлан.Реализация = ВТФакт.Реализация
	//	|ГДЕ
	//	|	ВЫБОР
	//	|			КОГДА &Фильтр = ""ВсеДанные""
	//	|				ТОГДА ИСТИНА
	//	|			КОГДА &Фильтр = ""Выполнено""
	//	|				ТОГДА ЕСТЬNULL(ВТПлан.План, 0) = ЕСТЬNULL(ВТФакт.Факт, 0)
	//	|			КОГДА &Фильтр = ""Осталось""
	//	|				ТОГДА ЕСТЬNULL(ВТПлан.План, 0) > ЕСТЬNULL(ВТФакт.Факт, 0)
	//	|			КОГДА &Фильтр = ""Расхождения""
	//	|				ТОГДА ЕСТЬNULL(ВТПлан.План, 0) <> ЕСТЬNULL(ВТФакт.Факт, 0)
	//	|		КОНЕЦ";
	//
	//Запрос.УстановитьПараметр("ВидОперацииОтбор", Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Отбор);
	//Запрос.УстановитьПараметр("ОтгрузочныйЛист", ОтгрузочныйЛист);
	//Запрос.УстановитьПараметр("Фильтр",Фильтр);
	//
	//ЗначениеВРеквизитФормы(Запрос.Выполнить().Выгрузить(),"Список");
	////////////////////////////////////////////////////////////////////////////
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РСК_КоробкиОстатки.РеализацияРСК КАК Реализация,
		|	РСК_КоробкиОстатки.КоличествоПланОстаток КАК План,
		|	РСК_КоробкиОстатки.КоличествоФактОстаток КАК Факт
		|ИЗ
		|	РегистрНакопления.РСК_Коробки.Остатки(, ОтгрузочныйЛист = &ОтгрузочныйЛист) КАК РСК_КоробкиОстатки
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &Фильтр = ""ВсеДанные""
		|				ТОГДА ИСТИНА
		|			КОГДА &Фильтр = ""Выполнено""
		|				ТОГДА РСК_КоробкиОстатки.КоличествоПланОстаток = РСК_КоробкиОстатки.КоличествоФактОстаток
		|			КОГДА &Фильтр = ""Осталось""
		|				ТОГДА РСК_КоробкиОстатки.КоличествоПланОстаток > РСК_КоробкиОстатки.КоличествоФактОстаток
		|			КОГДА &Фильтр = ""Расхождения""
		|				ТОГДА РСК_КоробкиОстатки.КоличествоПланОстаток <> РСК_КоробкиОстатки.КоличествоФактОстаток
		|		КОНЕЦ";
	
	Запрос.УстановитьПараметр("ОтгрузочныйЛист", ОтгрузочныйЛист);
	Запрос.УстановитьПараметр("Фильтр",Фильтр);
	
	ОбновитьВсегоФактКоличествоКоробов();
	
	ЗначениеВРеквизитФормы(Запрос.Выполнить().Выгрузить(),"Список");
КонецПроцедуры // ОбновитьСписок()

&НаСервере
Процедура ОбновитьВсегоФактКоличествоКоробов()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РСК_КоробкиОстатки.КоличествоПланОстаток КАК ВсегоПлан,
		|	РСК_КоробкиОстатки.КоличествоФактОстаток КАК ВсегоФакт
		|ИЗ
		|	РегистрНакопления.РСК_Коробки.Остатки(, ОтгрузочныйЛист = &ОтгрузочныйЛист) КАК РСК_КоробкиОстатки";
	
	Запрос.УстановитьПараметр("ОтгрузочныйЛист", ОтгрузочныйЛист);
	Запрос.УстановитьПараметр("Фильтр",Фильтр);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ВсегоКоробов					= Выборка.ВсегоПлан;
		ФактическоеКоличествоКоробов	= Выборка.ВсегоФакт;
		//ЗначениеВРеквизитФормы(Запрос.Выполнить().Выгрузить(),"Список");
	КонецЕсли;

КонецПроцедуры // ОбновитьВсегоФактКоличествоКоробов()


&НаКлиенте
Процедура СписокОбработкаЗапросаОбновления()
	ОбновитьСписок();
КонецПроцедуры

&НаКлиенте
Процедура ФильтрПриИзменении(Элемент)
	ОбновитьСписок();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	Если НЕ ЗакрытиеПриЗавершении Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если НЕ ВсеКоробкиОтгружены() Тогда
			Ответ = Вопрос("Не все коробки отгружены. Сохранить и выйти ?",РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет,"Выход");
			Если Ответ = КодВозвратаДиалога.Да Тогда
				
				//выйдет из формы т.к. Отказ = Ложь;
				
			Иначе
				Отказ = Истина;
			КонецЕсли;
			
		Иначе
			
			//Если все коробки отгружены
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить("Завершить");
			Кнопки.Добавить("Выйти");
			
			Ответ = Вопрос("Все коробки отгружены. Завершить или выйти ?",Кнопки,,,"Выход");
			Если Ответ = "Завершить" Тогда
				
				Если СуществуютРасхожденияПоОтгрузочномуЛисту() Тогда
					Ответ = Вопрос("Есть расхождения по коробам. Отгруз. лист будет со статусом ""Отгружен с ошибкой"". Продолжжить ?",РежимДиалогаВопрос.ДаНет,,,"ЗАВЕРШЕНИЕ");
					Если Ответ = КодВозвратаДиалога.Нет Тогда
						Отказ = Истина;
						Возврат;
					КонецЕсли;
				КонецЕсли;
				
				ЗавершитьОтгрузочныйЛист();
				//выйдет из формы т.к. Отказ = Ложь;
				
			ИначеЕсли Ответ = "Выйти" Тогда 
				//
			КонецЕсли;
			
			
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ВсеКоробкиОтгружены()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РСК_КоробкиОстатки.РеализацияРСК
		|ИЗ
		|	РегистрНакопления.РСК_Коробки.Остатки(, ОтгрузочныйЛист = &ОтгрузочныйЛист) КАК РСК_КоробкиОстатки
		|ГДЕ
		|	РСК_КоробкиОстатки.КоличествоПланОстаток > РСК_КоробкиОстатки.КоличествоФактОстаток";
	
	Запрос.УстановитьПараметр("ОтгрузочныйЛист", ОтгрузочныйЛист);
	
	
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции // НеВсеКоробкиОтгружены()

&НаСервере
Функция СуществуютРасхожденияПоОтгрузочномуЛисту()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РСК_КоробкиОстатки.РеализацияРСК
		|ИЗ
		|	РегистрНакопления.РСК_Коробки.Остатки(, ОтгрузочныйЛист = &ОтгрузочныйЛист) КАК РСК_КоробкиОстатки
		|ГДЕ
		|	РСК_КоробкиОстатки.КоличествоПланОстаток <> РСК_КоробкиОстатки.КоличествоФактОстаток";
	
	Запрос.УстановитьПараметр("ОтгрузочныйЛист", ОтгрузочныйЛист);
	
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции // СуществуютРасхождения()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Попытка
	
		ВК.ИнициализироватьСканер(Ложь, Истина);
	
	Исключение
	
	КонецПопытки;
	
	//настроить видимость элементов
	#Если НЕ МобильныйКлиент Тогда
		Элементы.ФормаЭмитацияСканера.Видимость = Истина;
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	Попытка
	
		ВК.ОтключитьСканер();
	
	Исключение
	
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если Источник = "ПодключаемоеОборудование"
		И ИмяСобытия = "Barcode"
		И ВводДоступен()	
		Тогда	
		
		//найти отгруз. лист
		ШК = Параметр;
		ОбработатьШтрихкод(ШК);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШтрихкод(ШК)

	//
	Если Лев(ШК,3) = "002" Тогда
		
		//находим реализацию, номер коробки
		//найти в ТЧ коробки для Отгрузки
		ОтветСтруктура = НайтиРеализациюПоШК(ШК);
		//ОтветСтруктура.Реализация
		//ОтветСтруктура.Коробка
		
		Если НЕ ЗначениеЗаполнено(ОтветСтруктура) Тогда
			МобильныйКлиент.ОповещениеПродолжительноеДваСигнала();
			Предупреждение("Коробка не найдена !");
			Возврат;
		КонецЕсли;
		
		//ДобавлялиРанее = ДобавлялиРанее(ОтветСтруктура.Реализация, ОтветСтруктура.Коробка);
		//Если ДобавлялиРанее Тогда
		Если ОтветСтруктура.КоробкаОтгружена тогда
			МобильныйКлиент.ОповещениеПродолжительноеДваСигнала();
			Предупреждение("Коробка сканирована ранее !");
			Возврат;
		КонецЕсли;
		
		//Добавить в Отгруз. лист в ТЧ ОтгруженныеКоробки
		ДобавитьВОтгрузочныйЛистКоробку(ОтветСтруктура.Реализация, ОтветСтруктура.Коробка);
		
		ЗаписатьРаботаПоКоробам(ОтветСтруктура.Реализация, ОтветСтруктура.Коробка, ПредопределенноеЗначение("Перечисление.РСК_ВидРаботыПоКоробкам.ОтгрузкаКладовщиком"));
		
		
		ОчиститьПоследнийВвод();
		ЗаполнитьПоследнийВвод(ОтветСтруктура.Реализация, ОтветСтруктура.Коробка);
		
		ОбновитьСписок();
		
		ВыделитьСтрокуЦветом(ОтветСтруктура.Реализация);
		
		УстановитьТекущуюСтроку(ОтветСтруктура.Реализация);
		
		МобильныйКлиент.ОповещениеКороткоеОдинСигнал();	//Оповещение удачного сканирования
		
		
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаписатьРаботаПоКоробам(Реализация, Коробка, ВидРаботы)
	
	РСК_ТСД.ЗаписатьРСК_РаботаПоКоробкам(Реализация, Коробка, Пользователи.ТекущийПользователь(), ВидРаботы, ОтгрузочныйЛист);

КонецПроцедуры // ОбработатьШтрихкод()

&НаСервере
Функция  НайтиРеализациюПоШК(ШК)
	
	Номер	= ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Сред(ШК,4,6));
	//Пока Лев(Номер,1) = "0" Цикл
	//	Номер = Прав(Номер,СтрДлина(Номер)-1);
	//КонецЦикла;
	
	Дата 	= Сред(ШК,10,6);
	Дата	= ПолучитьДатуДок(Дата);
	
	Коробка = Число(ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Сред(ШК, 16, 3)));
	
	//Статусы = Новый Массив;		//пока что убрал по просьбе Малкиной
	//Статусы.Добавить(Перечисления.СтатусыРеализацийТоваров.КОтгрузке);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РСК_КоробкиОстатки.РеализацияРСК КАК Реализация,
		|	РСК_КоробкиОстатки.Коробка КАК Коробка,
		|	РСК_КоробкиОстатки.КоличествоПланОстаток = РСК_КоробкиОстатки.КоличествоФактОстаток КАК КоробкаОтгружена
		|ИЗ
		|	РегистрНакопления.РСК_Коробки.Остатки(
		|			,
		|			ОтгрузочныйЛист = &ОтгрузочныйЛист
		|				И РеализацияРСК.Номер = &Номер
		|				И РеализацияРСК.Дата = &Дата
		|				И РеализацияРСК.Склад = &ОсновнойСклад
		//|				И РеализацияРСК.СтатусОтгрузки В (&Статусы)
		|				И РеализацияРСК.Проведен
		|				И Коробка = &Коробка) КАК РСК_КоробкиОстатки";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Номер", Номер);
	//Запрос.УстановитьПараметр("Статусы", Статусы);
	Запрос.УстановитьПараметр("ОсновнойСклад", ОсновнойСклад);
	Запрос.УстановитьПараметр("ОтгрузочныйЛист", ОтгрузочныйЛист);
	Запрос.УстановитьПараметр("Коробка", Коробка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат Новый Структура("Реализация, Коробка, КоробкаОтгружена", ВыборкаДетальныеЗаписи.Реализация, ВыборкаДетальныеЗаписи.Коробка, ВыборкаДетальныеЗаписи.КоробкаОтгружена);
	КонецЦикла;
	
	Возврат Неопределено;

	
КонецФункции // НайтиДокументПоШК()


&НаСервере
Функция ПолучитьДатуДок(СтрокаДата)
	Год 	= "20" + Сред(СтрокаДата,5,2);
	Месяц   = Сред(СтрокаДата,3,2);
	День    = Сред(СтрокаДата,1,2);
	Возврат Дата(Год,Месяц,День);

КонецФункции // ПоискРеализацииПоШК()

&НаСервере
Функция ПолучитьПараметры(Реализация)
	
	РасходныйОрдер = Документы.РасходныйОрдерНаТовары.НайтиПоРеквизиту("Распоряжение", Реализация);
	Отбор = Документы.ОтборРазмещениеТоваров.НайтиПоРеквизиту("Распоряжение", РасходныйОрдер);
	
	Парам = Новый Структура("	Отбор, 	РасходныйОрдер, Реализация, ОсновнойСклад", 
								Отбор,	РасходныйОрдер, Реализация, ОсновнойСклад);
	Возврат Парам;

КонецФункции // ПолучитьПараметры()

&НаСервере
Функция ДобавлялиРанее(Реализация, Коробка)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтгрузочныйЛистОтгруженныеКоробки.Реализация,
		|	ОтгрузочныйЛистОтгруженныеКоробки.Коробка
		|ИЗ
		|	Документ.ОтгрузочныйЛист.ОтгруженныеКоробки КАК ОтгрузочныйЛистОтгруженныеКоробки
		|ГДЕ
		|	ОтгрузочныйЛистОтгруженныеКоробки.Ссылка = &ОтгрузочныйЛист
		|	И ОтгрузочныйЛистОтгруженныеКоробки.Коробка = &Коробка
		|	И ОтгрузочныйЛистОтгруженныеКоробки.Реализация = &Реализация";
	
	Запрос.УстановитьПараметр("Коробка", Коробка);
	Запрос.УстановитьПараметр("ОтгрузочныйЛист", ОтгрузочныйЛист);
	Запрос.УстановитьПараметр("Реализация", Реализация);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции // ДобавлялиРанее()

&НаСервере
Процедура ДобавитьВОтгрузочныйЛистКоробку(Реализация, Коробка)

	Док = ОтгрузочныйЛист.ПолучитьОбъект();
	нс = Док.ОтгруженныеКоробки.Добавить();
	нс.Реализация 	= Реализация;
	нс.Коробка		= Коробка;
	Док.Ответственный = Пользователи.ТекущийПользователь().ФизическоеЛицо;
	
	ОтветДаты = РСК_УчетРабот.ПолучитьДатуПервогоСканированияДатуПоследнегоСканирования(ТекущаяДата(), Док.ДатаНО, Док.ДатаОО);
	Док.ДатаНО = ОтветДаты.ДатаПервогоСканирования;
	Док.ДатаОО = ОтветДаты.ДатаПоследнегоСканирования;
	
	//МоментСканирования 	= ТекущаяДата();
	//ТекущиеСекунды		= число(Формат(МоментСканирования,"ДФ=ss"));
	//
	//Если НЕ ЗначениеЗаполнено(Док.ДатаНО) Тогда
	//	Док.ДатаНО = МоментСканирования - ТекущиеСекунды; 
	//КонецЕсли;
	//Док.ДатаОО = МоментСканирования + (60 - ТекущиеСекунды);
	
	
	док.Записать(РежимЗаписиДокумента.Проведение);

КонецПроцедуры // ДобавитьВОтгрузочныйЛистКоробку()

&НаСервере
Процедура УдалитьВОтгрузочномЛистеКоробку(Реализация, Коробка)

	Док = ОтгрузочныйЛист.ПолучитьОбъект();
	строки = Док.ОтгруженныеКоробки.НайтиСтроки(Новый Структура("Реализация, Коробка", Реализация, Коробка));
	Для каждого Стр Из строки Цикл
		Док.ОтгруженныеКоробки.Удалить(Стр);
	КонецЦикла;
	док.Записать(РежимЗаписиДокумента.Проведение);

КонецПроцедуры // ДобавитьВОтгрузочныйЛистКоробку()

//&НаКлиенте
&НаСервере
Процедура УстановитьТекущуюСтроку(Реализация)
	
	//выделить строку с отсканированной Реализацией
	СтрокиСНоменклатурой = Список.НайтиСтроки(Новый Структура("Реализация",Реализация));
	Если СтрокиСНоменклатурой.Количество() > 0 тогда
		Элементы.Список.ТекущаяСтрока = СтрокиСНоменклатурой[0].ПолучитьИдентификатор();
	КонецЕсли;

КонецПроцедуры // УстановитьТекущуюСтроку()

&НаСервере
Процедура ВыделитьСтрокуЦветом(Реализация)

	УсловноеОформление.Элементы[3].Отбор.Элементы[0].ПравоеЗначение 	= Реализация;
	УсловноеОформление.Элементы[3].Отбор.Элементы[0].Использование		= Истина;

КонецПроцедуры // ВыделитьСтрокуЦветом()

&НаСервере
Процедура ОчиститьПоследнийВвод()

	ПоследнийВвод.Очистить();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоследнийВвод(Реализация, Коробка)

	нс = ПоследнийВвод.Добавить();
	нс.Реализация = Реализация;
	нс.Коробка	= Коробка;

КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПоследнийВвод(Команда)
	//удалить Короб 
	//	ПоследнийВвод[0].Реализация
	//	ПоследнийВвод[0].Коробка
	//из ТЧ ОтгруженныеКоробки документа ОтгрузочныйЛист
	Если ПоследнийВвод.Количество() > 0 Тогда
		
		РеализацияУдаления 	= ПоследнийВвод[0].Реализация;
		КоробкаУдаления		= ПоследнийВвод[0].Коробка;
		ОтменитьПоследнийВводНаСервере(РеализацияУдаления, КоробкаУдаления);
		ОчиститьПоследнийВвод();
		
		//ВыделитьСтрокуСНоменклатуройЦветом(ПоследнийВвод[0].Реализация);
		
		ОбновитьСписок();
		
		УстановитьТекущуюСтроку(РеализацияУдаления);
		
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОтменитьПоследнийВводНаСервере(Реализация, Коробка)
	строки = Список.НайтиСтроки(Новый Структура("Реализация",Реализация));
	Попытка
	
		Док = ОтгрузочныйЛист.ПолучитьОбъект();
		//удаляем короб
		строки = Док.ОтгруженныеКоробки.НайтиСтроки(Новый Структура("Реализация, Коробка", Реализация, Коробка));
		Для Каждого Стр из строки Цикл
			Док.ОтгруженныеКоробки.Удалить(стр);
		КонецЦикла;
		
		Док.Записать(РежимЗаписиДокумента.Проведение);
	
	Исключение
		Сообщить("Ошибка записи Отгруз. листа "+ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура Завершиние(Команда)
	
	Если СуществуютРасхожденияПоОтгрузочномуЛисту() Тогда
		Ответ = Вопрос("Есть расхождения по коробам. Отгруз. лист будет со статусом ""Отгружен с ошибкой"". Продолжжить ?",РежимДиалогаВопрос.ДаНет,,,"ЗАВЕРШЕНИЕ");
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗавершитьОтгрузочныйЛист();
	ЗакрытиеПриЗавершении = Истина;
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ЗавершитьОтгрузочныйЛист()
	Попытка
		Док = ОтгрузочныйЛист.ПолучитьОбъект();
		Док.Статус = ?( СуществуютРасхожденияПоОтгрузочномуЛисту(), Перечисления.СтатусыОЛ.ОтгруженСОшибкой, Перечисления.СтатусыОЛ.Отгружен);
		
		//проставить ФактКолво в ТЧ СписокСкладскихЗаданий
		Для Каждого Стр ИЗ Док.СписокСкладскихЗаданий Цикл
			Стр.ФактКол = ПолучитьФактКолвоКоробовПОСКЗ(Стр.СкладскоеЗадание);
			Стр.Расхождение = Стр.Короб = Стр.ФактКол;
		КонецЦикла;
		
		Док.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		Сообщить("Ошибка записи Отгруз. листа: " + ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьФактКолвоКоробовПОСКЗ(Реализация)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РСК_КоробкиОстатки.КоличествоФактОстаток
		|ИЗ
		|	РегистрНакопления.РСК_Коробки.Остатки(
		|			,
		|			ОтгрузочныйЛист = &ОтгрузочныйЛист
		|				И РеализацияРСК = &Реализация) КАК РСК_КоробкиОстатки";
	
	Запрос.УстановитьПараметр("ОтгрузочныйЛист", ОтгрузочныйЛист);
	Запрос.УстановитьПараметр("Реализация", Реализация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.КоличествоФактОстаток;
	КонецЦикла;
	
	Возврат 0;

КонецФункции // ПолучитьФактКолвоКоробовПОСКЗ()


&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Реализация 	= Элементы.Список.ТекущиеДанные.Реализация;
	План 		= Элементы.Список.ТекущиеДанные.План;
	Факт 		= Элементы.Список.ТекущиеДанные.Факт;
	
	//Список коробов зеленые и красные - отгруженные и неотгруженные
	//МассивПринятыхНеПринятыхКоробов = ПолучитьСписокПринятыхНеПринятыхКоробов(Реализация);
	Парам = Новый Структура("ОтгрузочныйЛист, Реализация, ОсновнойСклад", ОтгрузочныйЛист, Реализация, ОсновнойСклад);
	СтруктураОтвет = ОткрытьФормуМодально("Обработка.ТСД_РСК.Форма.НеПринятыеПринятыеКоробаОтгрузкаПоЛисту", Парам);
	Если НЕ ЗначениеЗаполнено(СтруктураОтвет) Тогда
		ОбновитьСписок();
		Возврат;
	КонецЕсли;
	
	Действие 	= СтруктураОтвет.Действие;
	Коробка		= СтруктураОтвет.Коробка;
	
	
	Если СтруктураОтвет.Действие = "Отгрузить коробку" Тогда
		ДобавитьВОтгрузочныйЛистКоробку(Реализация, Коробка);
		ЗаписатьРаботаПоКоробам(Реализация, Коробка, ПредопределенноеЗначение("Перечисление.РСК_ВидРаботыПоКоробкам.ОтгрузкаКладовщикомВручную"));
		
		ОчиститьПоследнийВвод();
		ЗаполнитьПоследнийВвод(Реализация, Коробка);
		
		ОбновитьСписок();
		
		ВыделитьСтрокуЦветом(Реализация);
		
		УстановитьТекущуюСтроку(Реализация);
				
		//МобильныйКлиент.ОповещениеКороткоеОдинСигнал();	//Оповещение удачного сканирования
		
	ИначеЕсли СтруктураОтвет.Действие = "Удалить коробку из отгруженных" Тогда
		УдалитьВОтгрузочномЛистеКоробку(Реализация, Коробка);	
		//Удалять ли коробку из РСК_РаботаПоКоробкам ?
		//удалять скорее всего - т.к. в тч отгруз. листа будет просто последнее действие по коробке - это добавление -
		УдалитьКоробкуИзРСК_РаботаПоКоробкам(Реализация, Коробка);
		
		ОчиститьПоследнийВвод();
		
		ОбновитьСписок();
		
	ИначеЕсли СтруктураОтвет.Действие = "ОтгрузитьОставшиесяКороба" Тогда
		
		ОтгрузитьОставшиесяКоробаНаСервере();
		
	ИначеЕсли СтруктураОтвет.Действие = "СделатьНеотгруженнымиОставшиесяКороба" Тогда
		
		СделатьНеотгруженнымиОставшиесяКоробаНаСервере();
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура ОтгрузитьОставшиесяКоробаНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РСК_КоробкиОстатки.РеализацияРСК КАК Реализация,
		|	РСК_КоробкиОстатки.Коробка
		|ИЗ
		|	РегистрНакопления.РСК_Коробки.Остатки(, ОтгрузочныйЛист = &ОтгрузочныйЛист) КАК РСК_КоробкиОстатки
		|ГДЕ
		|	РСК_КоробкиОстатки.КоличествоПланОстаток > РСК_КоробкиОстатки.КоличествоФактОстаток";
	
	Запрос.УстановитьПараметр("ОтгрузочныйЛист", ОтгрузочныйЛист);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		// Вставить обработку выборки ВыборкаДетальныеЗаписи.
		ДобавитьВОтгрузочныйЛистКоробку(ВыборкаДетальныеЗаписи.Реализация, ВыборкаДетальныеЗаписи.Коробка);
		ЗаписатьРаботаПоКоробам(ВыборкаДетальныеЗаписи.Реализация, ВыборкаДетальныеЗаписи.Коробка, ПредопределенноеЗначение("Перечисление.РСК_ВидРаботыПоКоробкам.ОтгрузкаКладовщикомВручную"));
		
		ОчиститьПоследнийВвод();
		ЗаполнитьПоследнийВвод(ВыборкаДетальныеЗаписи.Реализация, ВыборкаДетальныеЗаписи.Коробка);
		
		ОбновитьСписок();
		
	КонецЦикла;
			
КонецПроцедуры

&НаСервере
Процедура СделатьНеотгруженнымиОставшиесяКоробаНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РСК_КоробкиОстатки.РеализацияРСК КАК Реализация,
		|	РСК_КоробкиОстатки.Коробка
		|ИЗ
		|	РегистрНакопления.РСК_Коробки.Остатки(, ОтгрузочныйЛист = &ОтгрузочныйЛист) КАК РСК_КоробкиОстатки
		|ГДЕ
		|	РСК_КоробкиОстатки.КоличествоФактОстаток > 0";
	
	Запрос.УстановитьПараметр("ОтгрузочныйЛист", ОтгрузочныйЛист);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		// Вставить обработку выборки ВыборкаДетальныеЗаписи.
		УдалитьВОтгрузочномЛистеКоробку(ВыборкаДетальныеЗаписи.Реализация, ВыборкаДетальныеЗаписи.Коробка);	
		//Удалять ли коробку из РСК_РаботаПоКоробкам ?
		//удалять скорее всего - т.к. в тч отгруз. листа будет просто последнее действие по коробке - это добавление -
		УдалитьКоробкуИзРСК_РаботаПоКоробкам(ВыборкаДетальныеЗаписи.Реализация, ВыборкаДетальныеЗаписи.Коробка);
		
		ОчиститьПоследнийВвод();
		
		ОбновитьСписок();

		
	КонецЦикла;

	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокПринятыхНеПринятыхКоробов(Реализация)
	
	//
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РСК_КоробкиОстатки.Коробка,
		|	РСК_КоробкиОстатки.КоличествоФактОстаток >= РСК_КоробкиОстатки.КоличествоПланОстаток КАК Отгружена
		|ИЗ
		|	РегистрНакопления.РСК_Коробки.Остатки(
		|			,
		|			ОтгрузочныйЛист = &ОтгрузочныйЛист
		|				И РеализацияРСК = &Реализация) КАК РСК_КоробкиОстатки";
	
	Запрос.УстановитьПараметр("ОтгрузочныйЛист", ОтгрузочныйЛист);
	Запрос.УстановитьПараметр("Реализация", Реализация);
	Выборка = Запрос.Выполнить().Выбрать();
	Ответ = Новый Массив;
	Пока Выборка.Следующий() Цикл
		
		Ответ.Добавить(Новый Структура("Коробка, Отгружена", Выборка.Коробка, Выборка.Отгружена));
		
	КонецЦикла;
	Возврат Ответ;
КонецФункции

&НаСервере
Процедура УдалитьКоробкуИзРСК_РаботаПоКоробкам(Реализация, Коробка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РСК_РаботаПоКоробкамОбороты.Регистратор
		|ИЗ
		|	РегистрНакопления.РСК_РаботаПоКоробкам.Обороты(
		|			,
		|			,
		|			Регистратор,
		|			Реализация = &Реализация
		|				И Коробка = &Коробка
		|				И ДокументРаботы = &ОтгрузочныйЛист) КАК РСК_РаботаПоКоробкамОбороты
		|ГДЕ
		|	РСК_РаботаПоКоробкамОбороты.КоличествоПриход > 0
		|
		|СГРУППИРОВАТЬ ПО
		|	РСК_РаботаПоКоробкамОбороты.Регистратор";
	
	Запрос.УстановитьПараметр("Коробка", Коробка);
	Запрос.УстановитьПараметр("ОтгрузочныйЛист", ОтгрузочныйЛист);
	Запрос.УстановитьПараметр("Реализация", Реализация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		РСК_РаботаПоКоробкам = ВыборкаДетальныеЗаписи.Регистратор;
		Док = РСК_РаботаПоКоробкам.ПолучитьОбъект();
		Док.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		//Док = Док.Ссылка.ПолучитьОбъект();
		Док.ПометкаУдаления = Истина;
		Док.Записать(РежимЗаписиДокумента.Запись);
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ЭмитацияСканера(Команда)
	//ВвелиОсновноСклад = ВвестиЗначение(ОсновнойСклад,"Заполнить ОсновнойСклад",Тип("СправочникСсылка.Склады"));
	ШК = "";
	Если ВвестиСтроку(ШК,"Введите Штрихкод для имитации работы сканера",30,Ложь) Тогда
		ШК = СокрЛП(Строка(ШК));
		ШК = СтрЗаменить(ШК, Символы.нпп,"");
		ОбработкаОповещения("Barcode",ШК,"ПодключаемоеОборудование");
	КонецЕсли;
КонецПроцедуры
