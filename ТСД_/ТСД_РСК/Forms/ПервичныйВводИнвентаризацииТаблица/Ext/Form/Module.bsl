
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОсновнойСклад = Параметры.ОсновнойСклад;
	Склад = Параметры.Склад;
	ИтоговаяИнвентаризация = Параметры.ИтоговаяИнвентаризация;
	ВводДанных = Параметры.ВводДанных;
	
	Заголовок = "Первичный ввод: " + ВводДанных.Номер;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Попытка
	
		ВК.ИнициализироватьСканер(Ложь, Истина);	
	
	Исключение
		
	КонецПопытки;	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	Попытка
	
		ВК.ОтключитьСканер();
	
	Исключение
	
	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если Источник = "ПодключаемоеОборудование"
		И ИмяСобытия = "Barcode"
		И ВводДоступен()	// нужен ли ВводДоступен() в окне где нет определённого поля, куда сканировать ?
		Тогда
		//проверка даты на сервере и на ТСД
		//Сообщить("ТекущаяДата() на клиенте:" + ТекущаяДата());
		//Сообщить("ТекущаяДата() на сервере:" + ПолучитьТекущаяДатанаСервере());
		//Сообщить("ТекущаяДатаСеанса() на сервере:" + ПолучитьТекущаяДатаСеансаНаСервере());
		
		Штрихкод = Параметр;
		
		ОбработатьШтрихкод(Штрихкод);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШтрихкод(Штрихкод)
	
	//предупреждения проверки
	СуммаПоказателей = Группа + Линия + Место + Ячейка;
	Если СуммаПоказателей = 0 Тогда
		Предупреждение("Заполните в адрес и группу");
		Возврат;
	КонецЕсли;
	
	Структура =	НайтиНоменклатуруУпаковкуПоШтрихкодуСтруктура(Штрихкод);
	// нашли - Структура("Номенклатура, УпаковкаПоШтрихкоду, МинимУпаковка (по ед. изм. номенклатуры)"
	Если НЕ ЗначениеЗаполнено(Структура.Номенклатура) Тогда
		МобильныйКлиент.ОповещениеПродолжительноеДваСигнала();
		Предупреждение("Номенклатура с таким Штрихкодом не существует !");
		Возврат;
	КонецЕсли;
	
	Если АвтоСуммУп Тогда
		Если НЕ ЗначениеЗаполнено(Структура.УпаковкаПоШтрихкоду) Тогда
			МобильныйКлиент.ОповещениеПродолжительноеДваСигнала();
			Предупреждение("Упаковка с таким Штрихкодом не существует !");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ АвтоСуммУп Тогда
		ПарамКоличества = Новый Структура("Номенклатура, Упаковка, Группа, Линия, Место, Ячейка", Структура.Номенклатура, Структура.МинимУпаковка, Группа, Линия, Место, Ячейка);
		КоличествоДобавить = ОткрытьФормуМодально("Обработка.ТСД_РСК.Форма.ВводКоличестваИнвентаризация", ПарамКоличества);
		КоличествоДобавить = ?(ЗначениеЗаполнено(КоличествоДобавить), КоличествоДобавить, 0);
	Иначе 
		//КоличествоДобавить = количество коэффициент из упаковки
		КоличествоДобавить = ПолучитьКоэфУпаковки(Структура.УпаковкаПоШтрихкоду);
	КонецЕсли;
	
	Если КоличествоДобавить > 0 Тогда
		
		//
		Удачно = ДобавитьВводДанных(КоличествоДобавить, Структура);
		Если Удачно Тогда
			
			ВыделитьСтрокуСНоменклатуройЦветом(Структура.Номенклатура);
			
			ОбновитьТЗ();
			
			УстановитьТекущуюСтроку(Структура.Номенклатура);
			
			МобильныйКлиент.ОповещениеКороткоеОдинСигнал();
		Иначе
			МобильныйКлиент.ОповещениеПродолжительноеДваСигнала();
		КонецЕсли;
		
	КонецЕсли;
	ЭтаФорма.ТекущийЭлемент = Элементы.ТЗ;

КонецПроцедуры

&НаСервере
Процедура ВыделитьСтрокуСНоменклатуройЦветом(Знач Номенклатура)
	
	//условное оформление
	//УсловноеОформление.Элементы.Очистить()
	УсловноеОформление.Элементы[0].Отбор.Элементы[0].ПравоеЗначение 	= Номенклатура;
	УсловноеОформление.Элементы[0].Отбор.Элементы[0].Использование		= Истина;
	//Элемент = УсловноеОформление.Элементы.Добавить();
	//
	//ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	//ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТЗНоменклатура");
	//
	//ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТЗ.Номенклатура");
	//ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//ОтборЭлемента.ПравоеЗначение = СтрокаТЧПоступления.Номенклатура;
	////Элемент.Использование = Истина;
	//
	//Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.СветлоЗолотистый);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущуюСтроку(Знач Номенклатура)
	
	Перем СтрокиСНоменклатурой;
	
	//выделить строку с отсканированной номенклатурой. Найти надо по текущему коробу именно
	СтрокиСНоменклатурой = ТЗ.НайтиСтроки(Новый Структура("Номенклатура",Номенклатура));
	Если СтрокиСНоменклатурой.Количество() > 0 тогда
		Элементы.ТЗ.ТекущаяСтрока = СтрокиСНоменклатурой[0].ПолучитьИдентификатор();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПолучитьКоэфУпаковки(Знач Упаковка_)
	
	Возврат Упаковка_.Коэффициент;

КонецФункции // ОбработатьШтрихкод(Штрихкод)()

&НаСервере
Функция ПолучитьУпаковкуПоЕдИзмНоменклатуры(Ном)

	// Подставляется ед изм. ШТ так как сами ввели в ручную номенклатуру 
	//в этом случае нет информации о упаковке(ед. изм.)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УпаковкиНоменклатуры.Ссылка КАК УпаковкаШт
		|ИЗ
		|	Справочник.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
		|ГДЕ
		|	УпаковкиНоменклатуры.Владелец = &Номенклатура
		|	И УпаковкиНоменклатуры.ЕдиницаИзмерения = &ЕдиницаИзмерения
		|	И НЕ УпаковкиНоменклатуры.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ЕдиницаИзмерения", Ном.ЕдиницаИзмерения);	//Шт
	Запрос.УстановитьПараметр("Номенклатура", Ном);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.УпаковкаШт;
	КонецЦикла;
	
	

КонецФункции // ЗаполнитьУпаковкуШТ()

&НаСервере
Функция НайтиНоменклатуруУпаковкуПоШтрихкодуСтруктура(Штрихкод)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШтрихкодыНоменклатуры.Номенклатура,
		|	ШтрихкодыНоменклатуры.Упаковка КАК УпаковкаПоШтрихкоду
		|ИЗ
		|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|ГДЕ
		|	ШтрихкодыНоменклатуры.Штрихкод = &Штрихкод";
	
	Запрос.УстановитьПараметр("Штрихкод", Штрихкод);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МинимУпаковка = ПолучитьУпаковкуПоЕдИзмНоменклатуры(ВыборкаДетальныеЗаписи.Номенклатура);
		Возврат Новый Структура("Номенклатура, УпаковкаПоШтрихкоду, МинимУпаковка", ВыборкаДетальныеЗаписи.Номенклатура, ВыборкаДетальныеЗаписи.УпаковкаПоШтрихкоду, МинимУпаковка);
	КонецЦикла;
	
	Возврат Новый Структура("Номенклатура, УпаковкаПоШтрихкоду, МинимУпаковка", , , );
	
КонецФункции // НайтиНоменклатуруПоШтрихкоду()

&НаСервере
Процедура ОбновитьТЗ()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВводДанныхИнвентаризацииДанные.Номенклатура,
		|	СУММА(ВводДанныхИнвентаризацииДанные.Количество) КАК Количество
		|ИЗ
		|	Документ.ВводДанныхИнвентаризации.Данные КАК ВводДанныхИнвентаризацииДанные
		|ГДЕ
		|	ВводДанныхИнвентаризацииДанные.Ссылка = &Ссылка
		|	И ВводДанныхИнвентаризацииДанные.Группа = &Группа
		|	И ВводДанныхИнвентаризацииДанные.Линия = &Линия
		|	И ВводДанныхИнвентаризацииДанные.Место = &Место
		|	И ВводДанныхИнвентаризацииДанные.Ячейка = &Ячейка
		|
		|СГРУППИРОВАТЬ ПО
		|	ВводДанныхИнвентаризацииДанные.Номенклатура";
	
	Запрос.УстановитьПараметр("Группа", Группа);
	Запрос.УстановитьПараметр("Линия", Линия);
	Запрос.УстановитьПараметр("Место", Место);
	Запрос.УстановитьПараметр("Ссылка", ВводДанных);
	Запрос.УстановитьПараметр("Ячейка", Ячейка);
	
	ЗначениеВРеквизитФормы(Запрос.Выполнить().Выгрузить(),"ТЗ");
	
	

КонецПроцедуры // ОбновитьСписок()

&НаСервере
Функция ДобавитьВводДанных(КоличествоДобавить, Структура)
	Попытка
		
		// нашли - Структура("Номенклатура, УпаковкаПоШтрихкоду, МинимУпаковка (по ед. изм. номенклатуры)"
		Док = ВводДанных.ПолучитьОбъект();
		Строки = Док.Данные.НайтиСтроки(Новый Структура("Группа, Линия, Место, Ячейка, Номенклатура, ЕдиницаИзмерения",));
		
		НовСтр = Док.Данные.Добавить();
		НовСтр.Группа = Группа;
		НовСтр.Линия = Линия;
		НовСтр.Место = Место;
		НовСтр.Ячейка = Ячейка;
		НовСтр.Номенклатура = Структура.Номенклатура;
		НовСтр.ЕдиницаИзмерения = Структура.МинимУпаковка;		//всегда добавл. миним упаковку, т.к. количество всегда записываем в штуках
		НовСтр.Количество = КоличествоДобавить;
		//НовСтр.Примечания = "";	//пока не надо
		
		Док.Записать(РежимЗаписиДокумента.Запись);
		
		Возврат Истина;
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;

КонецФункции // ДобавитьВводДанных()


&НаСервере
Функция УдалитьСтрокуВводДанных(Структура)
	Попытка
		
		// нашли - Структура("Номенклатура, УпаковкаПоШтрихкоду, МинимУпаковка (по ед. изм. номенклатуры)"
		Док = ВводДанных.ПолучитьОбъект();
		Строки = Док.Данные.НайтиСтроки(Новый Структура("Номенклатура, ЕдиницаИзмерения, Группа, Линия, Место, Ячейка", Структура.Номенклатура, Структура.МинимУпаковка, Группа, Линия, Место, Ячейка ));
		Если Строки.Количество() > 0 Тогда
			Для Каждого Строка из Строки Цикл
				Док.Данные.Удалить(Строка);	
			КонецЦикла;
			
		КонецЕсли;
		
		Док.Записать(РежимЗаписиДокумента.Запись);
		
		Возврат Истина;
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;

КонецФункции // ДобавитьВводДанных()

&НаСервере
Функция МодульЧисла(Число)
     Возврат Макс(Число, -Число);

 КонецФункции
 
&НаСервере
Функция УдалитьВводДанных(КоличествоУдалить, Структура)
	Попытка
		
		// нашли - Структура("Номенклатура, УпаковкаПоШтрихкоду, МинимУпаковка (по ед. изм. номенклатуры)"
		Док = ВводДанных.ПолучитьОбъект();
		Строки = Док.Данные.НайтиСтроки(Новый Структура("Номенклатура, ЕдиницаИзмерения, Группа, Линия, Место, Ячейка", Структура.Номенклатура, Структура.МинимУпаковка, Группа, Линия, Место, Ячейка ));
		Если Строки.Количество() > 0 Тогда
			КоличествоУдалитьОсталось = КоличествоУдалить;
			
			Для Каждого Строка из Строки Цикл
				
				Остаток =  Строка.Количество - КоличествоУдалитьОсталось;
				
				Если Остаток <= 0 Тогда	//удалить строчку
					КоличествоУдалитьОсталось = КоличествоУдалитьОсталось - Строка.Количество;
					Док.Данные.Удалить(Строка);
					
				Иначе	// записываем количество остаток
					КоличествоУдалитьОсталось = КоличествоУдалитьОсталось - Строка.Количество;
					Строка.Количество = Остаток;
				КонецЕсли;
				
				//КоличествоУдалитьОсталось = КоличествоУдалитьОсталось - МодульЧисла(Остаток);
				
				Если КоличествоУдалитьОсталось <= 0 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Док.Записать(РежимЗаписиДокумента.Запись);
			
			Возврат Истина;
		КонецЕсли
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;

КонецФункции // ДобавитьВводДанных()

&НаСервере
Процедура ОчиститьФорму()

	//Номенклатура = Неопределено;
	//Упаковка = Неопределено;
	//ШК = "";

КонецПроцедуры // ОчиститьФорму()

&НаКлиенте
Процедура СделатьПодготовлен(Команда)
	
	Удачно = СделатьПодготовленНаСервере();
	Если Удачно Тогда
		МобильныйКлиент.ОповещениеКороткоеОдинСигнал();
		Закрыть();
	Иначе
		МобильныйКлиент.ОповещениеПродолжительноеДваСигнала();
	КонецЕсли;
	
КонецПроцедуры

Функция СделатьПодготовленНаСервере()
	
	Попытка
	
		Док = ВводДанных.ПолучитьОбъект();
		Док.Подготовлен = Истина;
		Док.Записать(РежимЗаписиДокумента.Запись);
		
		Возврат Истина;
	Исключение
	    Сообщить(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	
	
КонецФункции

&НаКлиенте
Процедура ГруппаПриИзменении(Элемент)
	ОбновитьТЗ();
КонецПроцедуры

&НаКлиенте
Процедура ЛинияПриИзменении(Элемент)
	ОбновитьТЗ();
КонецПроцедуры

&НаКлиенте
Процедура МестоПриИзменении(Элемент)
	ОбновитьТЗ();
КонецПроцедуры

&НаКлиенте
Процедура ЯчейкаПриИзменении(Элемент)
	ОбновитьТЗ();
КонецПроцедуры

&НаКлиенте
Процедура ТЗОбработкаЗапросаОбновления()
	ОбновитьТЗ();
КонецПроцедуры

&НаКлиенте
Процедура ТЗВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = ТЗ.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Структура =	Новый Структура("Номенклатура, УпаковкаПоШтрихкоду, МинимУпаковка", ТекущиеДанные.Номенклатура, , ПолучитьУпаковкуПоЕдИзмНоменклатуры(ТекущиеДанные.Номенклатура));
	// нашли - Структура("Номенклатура, УпаковкаПоШтрихкоду, МинимУпаковка (по ед. изм. номенклатуры)"
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить("ДобавитьКоличество");
	МассивДействий.Добавить("УдалитьКоличество");
	МассивДействий.Добавить("УдалитьСтроку");
	//МассивДействий.Добавить("ДобавитьНовуюНоменклатуру");
	МассивДействий.Добавить("Отмена");
	
	Парам = Новый Структура("МассивДействий, Номенклатура", МассивДействий, ТекущиеДанные.Номенклатура);
		Ответ = ОткрытьФормуМодально("Обработка.ТСД_РСК.Форма.ДействияСНоменклатурой",Парам);
		Если Не ЗначениеЗаполнено(Ответ) Тогда 
			Возврат;
		КонецЕсли;
		
		Если Ответ = "ДобавитьКоличество" Тогда
			
			ПарамКоличества = Новый Структура("Номенклатура, Упаковка, Группа, Линия, Место, Ячейка", Структура.Номенклатура, Структура.МинимУпаковка, Группа, Линия, Место, Ячейка);
			КоличествоДобавить = ОткрытьФормуМодально("Обработка.ТСД_РСК.Форма.ВводКоличестваИнвентаризация", ПарамКоличества);
			КоличествоДобавить = ?(ЗначениеЗаполнено(КоличествоДобавить), КоличествоДобавить, 0);
			
			Если КоличествоДобавить > 0 Тогда
				Удачно = ДобавитьВводДанных(КоличествоДобавить, Структура);
				Если Удачно Тогда
					
					ВыделитьСтрокуСНоменклатуройЦветом(Структура.Номенклатура);
					ОбновитьТЗ();
					УстановитьТекущуюСтроку(Структура.Номенклатура);
					
					МобильныйКлиент.ОповещениеКороткоеОдинСигнал();
				Иначе
					МобильныйКлиент.ОповещениеПродолжительноеДваСигнала();
				КонецЕсли;			
			КонецЕсли;
			
		ИначеЕсли Ответ = "УдалитьКоличество" Тогда
			ПарамКоличества = Новый Структура("Номенклатура, Упаковка, Группа, Линия, Место, Ячейка", Структура.Номенклатура, Структура.МинимУпаковка, Группа, Линия, Место, Ячейка);
			КоличествоУдалить = ОткрытьФормуМодально("Обработка.ТСД_РСК.Форма.ВводКоличестваИнвентаризация", ПарамКоличества);
			КоличествоУдалить = ?(ЗначениеЗаполнено(КоличествоУдалить), КоличествоУдалить, 0);
			
			Если КоличествоУдалить > 0 Тогда
				Удачно = УдалитьВводДанных(КоличествоУдалить, Структура);
				Если Удачно Тогда
					
					ВыделитьСтрокуСНоменклатуройЦветом(Структура.Номенклатура);
					ОбновитьТЗ();
					УстановитьТекущуюСтроку(Структура.Номенклатура);
					
					МобильныйКлиент.ОповещениеКороткоеОдинСигнал();
				Иначе
					МобильныйКлиент.ОповещениеПродолжительноеДваСигнала();
				КонецЕсли;			
			КонецЕсли;

			
		ИначеЕсли Ответ = "УдалитьСтроку" Тогда
			Ответ = Вопрос("Действительно Удалить строку с номенклатурой и всё кол-во ?", РежимДиалогаВопрос.ДаНет, 5, КодВозвратаДиалога.Нет, , КодВозвратаДиалога.Нет);
			Если Ответ = КодВозвратаДиалога.Да Тогда
					Удачно = УдалитьСтрокуВводДанных(Структура);
					Если Удачно Тогда
						
						ВыделитьСтрокуСНоменклатуройЦветом(Структура.Номенклатура);
						ОбновитьТЗ();
						//УстановитьТекущуюСтроку(Структура.Номенклатура);
						
						МобильныйКлиент.ОповещениеКороткоеОдинСигнал();
					Иначе
						МобильныйКлиент.ОповещениеПродолжительноеДваСигнала();
					КонецЕсли;			
				
			КонецЕсли;
			
		//ИначеЕсли Ответ = "ДобавитьНовуюНоменклатуру" Тогда
			//
			
		КонецЕсли;
		ЭтаФорма.ТекущийЭлемент = Элементы.ТЗ;
			
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНовуюНом(Команда)
	
	ПарамКоличества = Новый Структура("Номенклатура, Упаковка, Группа, Линия, Место, Ячейка", , , Группа, Линия, Место, Ячейка);
	Ответ = ОткрытьФормуМодально("Обработка.ТСД_РСК.Форма.ВводКоличестваИнвентаризацияНоваяНомеклатура", ПарамКоличества);
	//Ответ = Новый Структура("номенклатура, Упаковка, МинимУпаковка, КоличествоДобавить" -  МинимУпаковка (по ед. изм. номенклатуры)"
	
	КоличествоДобавить = ?(ЗначениеЗаполнено(Ответ), Ответ.КоличествоДобавить, 0);
	
	Если КоличествоДобавить > 0 Тогда
		
		//
		Удачно = ДобавитьВводДанных(КоличествоДобавить, Ответ);
		Если Удачно Тогда
			
			ВыделитьСтрокуСНоменклатуройЦветом(Ответ.Номенклатура);
			
			ОбновитьТЗ();
			
			УстановитьТекущуюСтроку(Ответ.Номенклатура);
			
			МобильныйКлиент.ОповещениеКороткоеОдинСигнал();
		Иначе
			МобильныйКлиент.ОповещениеПродолжительноеДваСигнала();
		КонецЕсли;
		
	КонецЕсли;
	ЭтаФорма.ТекущийЭлемент = Элементы.ТЗ;
КонецПроцедуры

&НаКлиенте
Процедура Группа1ПриИзменении(Элемент)
	ОбновитьТЗ();
КонецПроцедуры

&НаКлиенте
Процедура Линия1ПриИзменении(Элемент)
	ОбновитьТЗ();
КонецПроцедуры

&НаКлиенте
Процедура Место1ПриИзменении(Элемент)
	ОбновитьТЗ();
КонецПроцедуры

&НаКлиенте
Процедура Ячейка1ПриИзменении(Элемент)
	ОбновитьТЗ();
КонецПроцедуры








