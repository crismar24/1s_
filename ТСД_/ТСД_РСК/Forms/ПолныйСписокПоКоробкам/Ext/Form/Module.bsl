
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОсновнойСклад	= Параметры.ОсновнойСклад;
	Реализация 		= Параметры.Реализация;
	РасходныйОрдер	= Параметры.РасходныйОрдер;
	Отбор			= Параметры.Отбор;
	
	ОбновитьТЗПолныйСписок();
	
КонецПроцедуры


&НаСервере
Процедура ОбновитьТЗПолныйСписок()

	ТЗПолныйСписок.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтборРазмещениеТоваровТоварыОтбор.Номенклатура,
		|	СУММА(ОтборРазмещениеТоваровТоварыОтбор.Количество) КАК ФактПоКоробу,
		|	ОтборРазмещениеТоваровТоварыОтбор.Коробка КАК Коробка
		|ИЗ
		|	Документ.ОтборРазмещениеТоваров.ТоварыОтбор КАК ОтборРазмещениеТоваровТоварыОтбор
		|ГДЕ
		|	ОтборРазмещениеТоваровТоварыОтбор.Ссылка = &Отбор
		|	И ОтборРазмещениеТоваровТоварыОтбор.Коробка <> 0
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтборРазмещениеТоваровТоварыОтбор.Коробка,
		|	ОтборРазмещениеТоваровТоварыОтбор.Номенклатура
		|
		|УПОРЯДОЧИТЬ ПО
		|	Коробка,
		|	ОтборРазмещениеТоваровТоварыОтбор.Номенклатура.Артикул";
	
	Запрос.УстановитьПараметр("Отбор", Отбор);
	ЗначениеВРеквизитФормы(Запрос.Выполнить().Выгрузить(),"ТЗПолныйСписок");

КонецПроцедуры // ОбновитьТЗПолныйСписок()

&НаКлиенте
Процедура ТЗПолныйСписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = ТЗПолныйСписок.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Номенклатура = ТекущиеДанные.Номенклатура;
	ФактПоКоробу = ТекущиеДанные.ФактПоКоробу;
	ТекущийКороб = ТекущиеДанные.Коробка;
	
	СтрокаТЧ = Новый Структура("ФактПоКоробу, ВесьФактПоНомВКоробах, Всего, Осталось",);
	
	//список действий
	МассивДействий = Новый Массив;
	//МассивДействий.Добавить("ДобавитьКоличествоПоКоробу");
	МассивДействий.Добавить("УдалитьКоличествоПоКоробу");
	МассивДействий.Добавить("ОбнулитьКоличествоПоКоробу");
	МассивДействий.Добавить("ОбнулитьКоличествоПоЗаданию");
	МассивДействий.Добавить("Отмена");
	
	Парам = Новый Структура("МассивДействий, Номенклатура", МассивДействий, Номенклатура);
	Ответ = ОткрытьФормуМодально("Обработка.ТСД_РСК.Форма.ДействияСНоменклатурой",Парам);
	Если Не ЗначениеЗаполнено(Ответ) Тогда 
		Возврат;
	КонецЕсли;
	
	Если Ответ = "ОбнулитьКоличествоПоКоробу" Тогда
		Ответ = Вопрос("Действительно обнулить всё кол-во по коробу № " + ТекущийКороб + " ?", РежимДиалогаВопрос.ДаНет, 5, КодВозвратаДиалога.Нет, , КодВозвратаДиалога.Нет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ОбнулитьКоличествоПоКоробу(Номенклатура, 
			ФактПоКоробу, 
			ТекущийКороб);
		КонецЕсли;
		
	ИначеЕсли Ответ = "ОбнулитьКоличествоПоЗаданию" Тогда
		Ответ = Вопрос("Действительно обнулить всё кол-во во всех коробах по заданию ?", РежимДиалогаВопрос.ДаНет, 5, КодВозвратаДиалога.Нет, , КодВозвратаДиалога.Нет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ОбнулитьКоличествоПоЗаданию(Номенклатура, 
			ФактПоКоробу, 
			ТекущийКороб);
		КонецЕсли;
	ИначеЕсли Ответ = "УдалитьКоличествоПоКоробу" Тогда
		УдалитьКоличествоПоКоробу = 0;
		УдалитьКоличествоПоКоробу = ОткрытьФормуМодально("Обработка.ТСД_РСК.Форма.ВводКоличестваОтборПолныйСписокПоКоробкам", Новый Структура("ФактПоКоробу,", ФактПоКоробу));
		//ОткрытьФормуМодально("Обработка.ТСД_РСК.Форма.ВводКоличества")
		Если ТипЗнч(УдалитьКоличествоПоКоробу) = тип("Число") И УдалитьКоличествоПоКоробу > 0 Тогда
			УдалитьКоличествоПоКоробу(Номенклатура, 
			УдалитьКоличествоПоКоробу,
			ФактПоКоробу,
			ТекущийКороб);
		КонецЕсли;
		
	ИначеЕсли Ответ = "Отмена" Тогда
		//ничего не делаем
		
	КонецЕсли;
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьКоличествоПоКоробу(Номенклатура, УдалитьКоличествоПоКоробу, ФактПоКоробу, ТекущийКороб)

	//проверка
	// сделать Осталось чтобы было не отриц фислом
	Если УдалитьКоличествоПоКоробу > ФактПоКоробу Тогда
		МобильныйКлиент.ОповещениеПродолжительноеДваСигнала();	//Оповещение не удачного сканирования
	    Предупреждение("Нельзя удалить такое количество. В коробе сейчас " + ФактПоКоробу);
		Возврат;
	КонецЕсли;
	
	УдалитьКоличествоПоКоробуНаСервере(Номенклатура, УдалитьКоличествоПоКоробу, ФактПоКоробу, ТекущийКороб);
	//ВыделитьСтрокуСНоменклатуройЦветом(Номенклатура);
	
	
	//обновить ТЗ
	ОбновитьТЗПолныйСписок();
	
	УстановитьТекущуюСтроку(Номенклатура, ТекущийКороб);
	
	МобильныйКлиент.ОповещениеКороткоеОдинСигнал();	//Оповещение удачного сканирования
	
КонецПроцедуры // УдалитьКоличествоПоКоробу()

&НаСервере
Процедура УдалитьКоличествоПоКоробуНаСервере(Номенклатура, УдалитьКоличествоПоКоробу, ФактПоКоробу, ТекущийКороб)
	
	Попытка
	    ПроверитьИзменитьСтатусРасхОрдераКОтбору();
		
		Док = Отбор.ПолучитьОбъект();
		строки = Док.ТоварыОтбор.НайтиСтроки(Новый Структура("Номенклатура, Коробка",Номенклатура, ТекущийКороб));
		Для Каждого Стр из строки Цикл
			ОстатокКоличество = Стр.Количество - УдалитьКоличествоПоКоробу;
			Если ОстатокКоличество = 0 Тогда
				Док.ТоварыОтбор.Удалить(стр);
			Иначе
				Стр.Количество 			= ОстатокКоличество;
				Стр.КоличествоУпаковок 	= ОстатокКоличество;
			КонецЕсли;
			
		КонецЦикла;
		
		Док.Записать(РежимЗаписиДокумента.Проведение);
	
	Исключение
		Сообщить("Ошибка записи Отбора "+ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущуюСтроку(Знач Номенклатура, Знач Коробка)
	
	//Перем СтрокиСНоменклатурой;
	
	//выделить строку с отсканированной номенклатурой. Найти надо по текущему коробу именно
	СтрокиСНоменклатурой = ТЗПолныйСписок.НайтиСтроки(Новый Структура("Номенклатура, Коробка", Номенклатура, Коробка));
	Если СтрокиСНоменклатурой.Количество() > 0 Тогда
		Элементы.ТЗПолныйСписок.ТекущаяСтрока = СтрокиСНоменклатурой[0].ПолучитьИдентификатор();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбнулитьКоличествоПоЗаданию(Номенклатура, ФактПоКоробу, ТекущийКороб)
	
	ОбнулитьКоличествоПоЗаданиюНаСервере(Номенклатура, ФактПоКоробу);
	
	//обновить ТЗ
	ОбновитьТЗПолныйСписок();
	
	УстановитьТекущуюСтроку(Номенклатура, ТекущийКороб);
	
	МобильныйКлиент.ОповещениеКороткоеОдинСигнал();	//Оповещение удачного сканирования

	
КонецПроцедуры

&НаСервере
Процедура ОбнулитьКоличествоПоЗаданиюНаСервере(Знач Номенклатура, Знач ФактПоКоробу)

	Попытка
	    ПроверитьИзменитьСтатусРасхОрдераКОтбору();
		
		Док = Отбор.ПолучитьОбъект();
		строки = Док.ТоварыОтбор.НайтиСтроки(Новый Структура("Номенклатура",Номенклатура));
		Для Каждого Стр из строки Цикл
			Док.ТоварыОтбор.Удалить(стр);
			
		КонецЦикла;
		
		Док.Записать(РежимЗаписиДокумента.Проведение);
	
	Исключение
		Сообщить("Ошибка записи Отбора "+ОписаниеОшибки());
	КонецПопытки;

КонецПроцедуры

&НаСервере
Процедура ПроверитьИзменитьСтатусРасхОрдераКОтбору()
	Если РасходныйОрдер.Статус <> перечисления.СтатусыРасходныхОрдеров.КОтбору Тогда
		
		Попытка
			РО = РасходныйОрдер.ПолучитьОбъект();
			РО.Статус = перечисления.СтатусыРасходныхОрдеров.КОтбору;
			РО.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Сообщить("Ошибка Смены статуса Расходного ордера: "+ОписаниеОшибки());
		КонецПопытки
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбнулитьКоличествоПоКоробу(Номенклатура, ФактПоКоробу, Коробка)

	ОбнулитьКоличествоПоКоробуНаСервере(Номенклатура, ФактПоКоробу, Коробка);
		
	//обновить ТЗ
	ОбновитьТЗПолныйСписок();
	
	УстановитьТекущуюСтроку(Номенклатура, Коробка);
	
	МобильныйКлиент.ОповещениеКороткоеОдинСигнал();	//Оповещение удачного сканирования

КонецПроцедуры // ОбнулитьКоличествоПоКоробу()

&НаСервере
Процедура ОбнулитьКоличествоПоКоробуНаСервере(Номенклатура, ФактПоКоробу, Коробка)

	Попытка
	    ПроверитьИзменитьСтатусРасхОрдераКОтбору();
		
		Док = Отбор.ПолучитьОбъект();
		строки = Док.ТоварыОтбор.НайтиСтроки(Новый Структура("Номенклатура, Коробка", Номенклатура, Коробка));
		Для Каждого Стр из строки Цикл
			Док.ТоварыОтбор.Удалить(стр);
			
		КонецЦикла;
		
		Док.Записать(РежимЗаписиДокумента.Проведение);
	
	Исключение
		Сообщить("Ошибка записи Отбора "+ОписаниеОшибки());
	КонецПопытки;

КонецПроцедуры


