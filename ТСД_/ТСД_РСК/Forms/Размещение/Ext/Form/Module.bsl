
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Размещение 		= Параметры.Размещение;
	ПриходныйОрдер 	= Параметры.ПриходныйОрдер;
	Поступление 	= Параметры.Поступление;
	ВводПоШтучно 	= Параметры.ВводПоШтучно;
	ОсновнойСклад	= Параметры.ОсновнойСклад;
	Список.Параметры.УстановитьЗначениеПараметра("Размещение",Размещение);
	Список.Параметры.УстановитьЗначениеПараметра("Поступление",Поступление);
	
КонецПроцедуры

&НаКлиенте
Процедура ВводПоШтучноИзменить(Команда)
	Если ВводПоШтучно Тогда
		Ответ = Вопрос("Выключить ВВОД ПО ШТУЧНО ?",РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ВводПоШтучно = Ложь;
		КонецЕсли;
	Иначе
		
		Ответ = Вопрос("Включить ВВОД ПО ШТУЧНО ?",РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ВводПоШтучно = Истина;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = "ПодключаемоеОборудование"
		И ИмяСобытия = "Barcode"
		И ВводДоступен()	// нужен ли ВводДоступен() в окне где нет определённого поля, куда сканировать ?
		Тогда	
		
		Штрихкод = Параметр;
		// ищем номенклатуру
		ОбработатьШтрихкод(Штрихкод);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ОбработатьШтрихкод(Знач Штрихкод)
	
	СтрокаТЧПоступления = НайтиНоменклатуруПоШтрихкодуВРазмещнеииПоступлении(Штрихкод);
	Если СтрокаТЧПоступления.КоличествоВРазмещенеии > 0 Тогда 
		Если СтрокаТЧПоступления.КоличествоВРазмещенеии = СтрокаТЧПоступления.КоличествоВПоступлении Тогда
			Предупреждение("Введено максимальное количество: " + СтрокаТЧПоступления.КоличествоВРазмещенеии);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ВводПоШтучно Тогда
		// считаем что вводим количество равное 1
		//и записываем кол-во в док-т размещение
		Если (1 + СтрокаТЧПоступления.КоличествоВРазмещенеии) > СтрокаТЧПоступления.КоличествоВПоступлении Тогда
			Предупреждение("Превышено количество, должно быть не больше: "+ СтрокаТЧПоступления.КоличествоВПоступлении);
			Возврат;
		КонецЕсли;
		ЗаполнитьДобавитьНоменклатуруВРазмещение(СтрокаТЧПоступления,1);
		
	Иначе
		//запрашиваем у пользователя количество для ввода
		//и записываем кол-во в док-т размещение
		Парам = Новый Структура("СтрокаТЧПоступления",СтрокаТЧПоступления);
		ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ОбработатьШтрихкодЗавершение", ЭтотОбъект, СтрокаТЧПоступления);
		ОткрытьФорму("Обработка.ТСД_РСК.Форма.ВводКоличества",Парам,,,,,ОписаниеОповещенияОЗакрытии,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	КонецЕсли;
		
КонецПроцедуры // ДобавитьНоменклатуруПоШтрихкоду()

&НаКлиенте
Процедура ОбработатьШтрихкодЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) <> тип("Число") Тогда
		Возврат;
	КонецЕсли;
		
	ЗаполнитьДобавитьНоменклатуруВРазмещение(ДополнительныеПараметры, РезультатЗакрытия);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДобавитьНоменклатуруВРазмещение(Знач СтрокаТЧПоступления, Знач КоличествоВведено)
	
	СтрокаТЧПоступления.КоличествоВведено			= КоличествоВведено;
	
	ДобавитьНоменклатуруВРазмещение(СтрокаТЧПоступления);
	
	Элементы.Список.Обновить();
	
	//выделить строку с отсканированной номенклатурой
	ИдексСтроки=0;
	Пока Истина Цикл
		ИдексСтроки=ИдексСтроки+1;
		Данные = Элементы.Список.ДанныеСтроки(ИдексСтроки);
		Если Данные = Неопределено Тогда
			Прервать;
		КонецЕсли; 
		
		Если Данные.Номенклатура = СтрокаТЧПоступления.Номенклатура Тогда
			Элементы.Список.ТекущаяСтрока = ИдексСтроки;
			Прервать;
		КонецЕсли; 
		
	КонецЦикла;
	
	//условное оформление
	Список.УсловноеОформление.Элементы.Очистить();
	
	ЭлементОформления = Список.УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Использование = Истина;
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("Номенклатура");
	//ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	//ПолеОформления.Использование = Истина;
	//ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("Подразделение");
	//ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	//ПолеОформления.Использование = Истина;
	//ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("Должность");
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Номенклатура");
	ЭлементОтбора.ПравоеЗначение = СтрокаТЧПоступления.Номенклатура;
	
	Оформление = ЭлементОформления.Оформление;
	Оформление.УстановитьЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ЦветФона"), WebЦвета.СветлоЗолотистый);



КонецПроцедуры

&НаСервере
Процедура ДобавитьНоменклатуруВРазмещение(СтрокаТЧПоступления)
	Попытка
		Док = Размещение.ПолучитьОбъект();
		Если НЕ ЗначениеЗаполнено(Док.ДатаПервогоСканирования) Тогда
			Док.ДатаПервогоСканирования = ТекущаяДата();
		КонецЕсли;
		Док.ДатаПоследнегоСканирования = ТекущаяДата();
		Док.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.ВРаботе;
		
		// Переделать: 
		// - накапливаем при сканировании в СтрокаТЧ.Количество 
		// - при завершении ,смене статуса, в зависимости, есть ли расхождения по номенклатуре по количеству,
		//устанавливать след. статусы:
		
		//Выполнено без ошибок
		// СтрокаТЧ.Количество - так и оставляем, движение идет в этом статусе именно по это колонке
		
		//Выполнено с ошибками
		//заполнить - СтрокаТЧ.КоличествоРазмещено из колонки Количество, т.к. это считалось как факт отработанный на ТСД
		// - по факту сколько отсканировали, переносим из СтрокаТЧ.Количество когда был статус "В Работе".
		// СтрокаТЧ.Количество - Количество из Поступления, сколько должно быть
		
		// есть Ли в ТЧ уже такая номенклатура
		СтрокиТЧсНоменклатурой = Док.ТоварыРазмещение.НайтиСтроки(Новый Структура("Номенклатура",СтрокаТЧПоступления.Номенклатура));
		Если СтрокиТЧсНоменклатурой.Количество() = 1 Тогда
			СтрокиТЧсНоменклатурой[0].Количество					= СтрокиТЧсНоменклатурой[0].Количество 					+ СтрокаТЧПоступления.КоличествоВведено;
			СтрокиТЧсНоменклатурой[0].КоличествоУпаковок			= СтрокиТЧсНоменклатурой[0].КоличествоУпаковок 			+ СтрокаТЧПоступления.КоличествоВведено;
			
		Иначе
			НоваяСтрока = Док.ТоварыРазмещение.Добавить();
			НоваяСтрока.Номенклатура 				= СтрокаТЧПоступления.Номенклатура;
			Упаковка								= Справочники.УпаковкиНоменклатуры.НайтиПоРеквизиту("ЕдиницаИзмерения",СтрокаТЧПоступления.Номенклатура.ЕдиницаИзмерения,,СтрокаТЧПоступления.Номенклатура);
			НоваяСтрока.Упаковка					= Упаковка;
			НоваяСтрока.Количество					= СтрокаТЧПоступления.КоличествоВведено;
			НоваяСтрока.КоличествоУпаковок			= СтрокаТЧПоступления.КоличествоВведено;
			НоваяСтрока.Ячейка = Справочники.СкладскиеЯчейки.НайтиПоНаименованию("00000",,,ОсновнойСклад);
			
		КонецЕсли;
		
		Док.Записать(РежимЗаписиДокумента.Проведение);
		
	Исключение
		Сообщить("Ошибка при изменении размещения:"+ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры // ДобавитьНоменклатуруВРазмещение()

&НаКлиенте
Процедура  ПолучитьКоличествоОтПользователя()
	
КонецПроцедуры // ПолучитьОтПользователяНаКлиенте()

&НаСервере
Функция НайтиНоменклатуруПоШтрихкодуВРазмещнеииПоступлении(Знач Штрихкод)
	// искать номенклатуру по штрихкоду БЕЗ учета Упаковки по ТЧ Поступления! 
	//т.к. во многих номенклатурах нет штрихкода по ед. измерения ШТ
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ДанныеШК
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Штрихкод = &Штрихкод
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслугТовары.Номенклатура КАК Номенклатура,
	|	СУММА(ПоступлениеТоваровУслугТовары.Количество) КАК КоличествоВПоступлении,
	|	ПоступлениеТоваровУслугТовары.Упаковка
	|ПОМЕСТИТЬ ВПоступлении
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.Ссылка = &Поступление
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеТоваровУслугТовары.Номенклатура,
	|	ПоступлениеТоваровУслугТовары.Упаковка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтборРазмещениеТоваровТоварыРазмещение.Номенклатура КАК Номенклатура,
	|	СУММА(ОтборРазмещениеТоваровТоварыРазмещение.Количество) КАК КоличествоВРазмещении
	|ПОМЕСТИТЬ ВРазмещении
	|ИЗ
	|	Документ.ОтборРазмещениеТоваров.ТоварыРазмещение КАК ОтборРазмещениеТоваровТоварыРазмещение
	|ГДЕ
	|	ОтборРазмещениеТоваровТоварыРазмещение.Ссылка = &Размещение
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтборРазмещениеТоваровТоварыРазмещение.Номенклатура
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеШК.Номенклатура КАК Номенклатура,
	|	0 КАК КоличествоВведено,
	|	ЕСТЬNULL(ВПоступлении.КоличествоВПоступлении, 0) КАК КоличествоВПоступлении,
	|	ЕСТЬNULL(ВРазмещении.КоличествоВРазмещении, 0) КАК КоличествоВРазмещенеии,
	|	ВПоступлении.Упаковка
	|ИЗ
	|	ДанныеШК КАК ДанныеШК
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВПоступлении КАК ВПоступлении
	|		ПО ДанныеШК.Номенклатура = ВПоступлении.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВРазмещении КАК ВРазмещении
	|		ПО ДанныеШК.Номенклатура = ВРазмещении.Номенклатура";

	Запрос.УстановитьПараметр("Штрихкод", Штрихкод);
	Запрос.УстановитьПараметр("Поступление",Поступление);
	Запрос.УстановитьПараметр("Размещение",Размещение);

	Выборка = Запрос.Выполнить().Выбрать();
	СтрокаТЧПоступления = Новый Структура("Упаковка, Номенклатура, КоличествоВПоступлении, КоличествоВРазмещенеии, КоличествоВведено");
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(СтрокаТЧПоступления,Выборка);
	КонецЕсли;
	Возврат СтрокаТЧПоступления;

	
КонецФункции // НайтиНоменклатуруПоШтрихкоду()
	
&НаКлиенте
Процедура ОтключитьСканер()
	
	#Если МобильноеПриложениеКлиент ИЛИ МобильныйКлиент Тогда
		
		Попытка
			глВКRSDriver.Отключить("Barcode");	
		Исключение
		КонецПопытки;
		
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьСканер()
	
	#Если МобильноеПриложениеКлиент ИЛИ МобильныйКлиент Тогда
		
		глВКRSDriver.УстановитьПараметр("Barcode_BEEP",Истина);
		глВКRSDriver.УстановитьПараметр("Barcode_BZZ",Истина);
		глВКRSDriver.Подключить("Barcode");	
		
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ВК.ИнициализироватьСканер(Ложь, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	ОтключитьСканер();
КонецПроцедуры

&НаКлиенте
Процедура ЭмитацияСканера(Команда)
	//ВвелиОсновноСклад = ВвестиЗначение(ОсновнойСклад,"Заполнить ОсновнойСклад",Тип("СправочникСсылка.Склады"));
	ШК =0;
	Если ВвестиЧисло(ШК,"Введите Штрихкод для имитации работы сканера",15,0) Тогда
		ШК = СокрЛП(Строка(ШК));
		ШК = СтрЗаменить(ШК, Символы.нпп,"");
		ОбработкаОповещения("Barcode",ШК,"ПодключаемоеОборудование");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОбработкаЗапросаОбновления()
	Элементы.Список.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Сообщить("Привет !");
КонецПроцедуры
