&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Размещение 		= Параметры.Размещение;
	ПриходныйОрдер 	= Параметры.ПриходныйОрдер;
	Поступление 	= Параметры.Поступление;
	ВводПоШтучно 	= Параметры.ВводПоШтучно;
	ОсновнойСклад	= Параметры.ОсновнойСклад;
	
	Фильтр			= "ВсеДанные";
	Пользователь	= Пользователи.ТекущийПользователь();
	ОбновитьТЗ1НаСервере();

	
КонецПроцедуры

&НаСервере
Функция ОбновитьТЗ()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоступлениеТоваровУслугТовары.Номенклатура КАК Номенклатура,
		|	СУММА(ПоступлениеТоваровУслугТовары.Количество) КАК Всего
		|ПОМЕСТИТЬ ВТПоступление
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
		|ГДЕ
		|	ПоступлениеТоваровУслугТовары.Ссылка = &Поступление
		|
		|СГРУППИРОВАТЬ ПО
		|	ПоступлениеТоваровУслугТовары.Номенклатура
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтборРазмещениеТоваровТоварыРазмещение.Номенклатура КАК Номенклатура,
		|	СУММА(ОтборРазмещениеТоваровТоварыРазмещение.Количество) КАК Размещено
		|ПОМЕСТИТЬ ВТРазмещения
		|ИЗ
		|	Документ.ОтборРазмещениеТоваров.ТоварыРазмещение КАК ОтборРазмещениеТоваровТоварыРазмещение
		|ГДЕ
		|	ОтборРазмещениеТоваровТоварыРазмещение.Ссылка = &Размещение
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтборРазмещениеТоваровТоварыРазмещение.Номенклатура
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ВТПоступление.Номенклатура, ВТРазмещения.Номенклатура) КАК Номенклатура,
		|	ЕСТЬNULL(ВТПоступление.Всего, 0) КАК Всего,
		|	ЕСТЬNULL(ВТРазмещения.Размещено, 0) КАК Размещено,
		|	ЕСТЬNULL(ВТПоступление.Всего, 0) - ЕСТЬNULL(ВТРазмещения.Размещено, 0) КАК Осталось
		|ИЗ
		|	ВТПоступление КАК ВТПоступление
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВТРазмещения КАК ВТРазмещения
		|		ПО ВТПоступление.Номенклатура = ВТРазмещения.Номенклатура
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &Фильтр = ""Осталось""
		|				ТОГДА ЕСТЬNULL(ВТПоступление.Всего, 0) > ЕСТЬNULL(ВТРазмещения.Размещено, 0)
		|			КОГДА &Фильтр = ""Выполнено""
		|				ТОГДА ЕСТЬNULL(ВТПоступление.Всего, 0) = ЕСТЬNULL(ВТРазмещения.Размещено, 0)
		|			КОГДА &Фильтр = ""Расхождения""
		|				ТОГДА ЕСТЬNULL(ВТПоступление.Всего, 0) <> ЕСТЬNULL(ВТРазмещения.Размещено, 0)
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВТПоступление.Номенклатура.Артикул";
	
	Запрос.УстановитьПараметр("Фильтр",Фильтр);
	Запрос.УстановитьПараметр("Поступление", Поступление);
	Запрос.УстановитьПараметр("Размещение", Размещение);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
Функция ПолучитьТЗПолную()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоступлениеТоваровУслугТовары.Номенклатура КАК Номенклатура,
		|	СУММА(ПоступлениеТоваровУслугТовары.Количество) КАК Всего
		|ПОМЕСТИТЬ ВТПоступление
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
		|ГДЕ
		|	ПоступлениеТоваровУслугТовары.Ссылка = &Поступление
		|
		|СГРУППИРОВАТЬ ПО
		|	ПоступлениеТоваровУслугТовары.Номенклатура
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтборРазмещениеТоваровТоварыРазмещение.Номенклатура КАК Номенклатура,
		|	СУММА(ОтборРазмещениеТоваровТоварыРазмещение.Количество) КАК Размещено
		|ПОМЕСТИТЬ ВТРазмещения
		|ИЗ
		|	Документ.ОтборРазмещениеТоваров.ТоварыРазмещение КАК ОтборРазмещениеТоваровТоварыРазмещение
		|ГДЕ
		|	ОтборРазмещениеТоваровТоварыРазмещение.Ссылка = &Размещение
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтборРазмещениеТоваровТоварыРазмещение.Номенклатура
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ВТПоступление.Номенклатура, ВТРазмещения.Номенклатура) КАК Номенклатура,
		|	ЕСТЬNULL(ВТПоступление.Всего, 0) КАК Всего,
		|	ЕСТЬNULL(ВТРазмещения.Размещено, 0) КАК Размещено
		|ИЗ
		|	ВТПоступление КАК ВТПоступление
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВТРазмещения КАК ВТРазмещения
		|		ПО ВТПоступление.Номенклатура = ВТРазмещения.Номенклатура";
	
	Запрос.УстановитьПараметр("Поступление", Поступление);
	Запрос.УстановитьПараметр("Размещение", Размещение);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаКлиенте
Процедура ОбновитьТЗ1(Команда)
	
	ОбновитьТЗ1НаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТЗ1НаСервере()
	
	ЗначениеВРеквизитФормы(ОбновитьТЗ(),"ТЗ");
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗОбработкаЗапросаОбновления()
	ОбновитьТЗ1НаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ВК.ИнициализироватьСканер(Ложь, Истина);
	
	//настроить видимость элементов
	#Если НЕ МобильныйКлиент Тогда
		Элементы.ФормаЭмитацияСканера.Видимость = Истина;
	#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьСканер()
	
	#Если МобильноеПриложениеКлиент ИЛИ МобильныйКлиент Тогда
		Попытка
			глВКRSDriver.УстановитьПараметр("Barcode_BEEP",Истина);
			глВКRSDriver.УстановитьПараметр("Barcode_BZZ",Истина);
			глВКRSDriver.Подключить("Barcode");	
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	ОтключитьСканер();
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьСканер()
	
	#Если МобильноеПриложениеКлиент ИЛИ МобильныйКлиент Тогда
		
		Попытка
			глВКRSDriver.Отключить("Barcode");	
		Исключение
		КонецПопытки;
		
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = "ПодключаемоеОборудование"
		И ИмяСобытия = "Barcode"
		И ВводДоступен()	// нужен ли ВводДоступен() в окне где нет определённого поля, куда сканировать ?
		Тогда	
		
		Штрихкод = Параметр;
		// ищем номенклатуру
		ОбработатьШтрихкод(Штрихкод);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШтрихкод(Знач Штрихкод)
	
	СтрокаТЧПоступления = НайтиНоменклатуруПоШтрихкодуВРазмещнеииПоступлении(Штрихкод);
	КоэффициентУпаковкиШК = ?(СтрокаТЧПоступления.КоэффициентУпаковкиШК > 0, СтрокаТЧПоступления.КоэффициентУпаковкиШК, 1);
	Если Не ЗначениеЗаполнено(СтрокаТЧПоступления.Номенклатура) Тогда
		МобильныйКлиент.ОповещениеПродолжительноеДваСигнала();	//Оповещение не удачного сканирования
		Предупреждение("Номенклатура с таким Штрихкодом не найдена !");
		Возврат;
	КонецЕсли;
	
	//УпаковкаШК	Упаковка
	УпаковкаДляВводаКоличества = ?(ЗначениеЗаполнено(СтрокаТЧПоступления.УпаковкаШК), СтрокаТЧПоступления.УпаковкаШК, СтрокаТЧПоступления.Упаковка);
	// как её запомнить что отсканировали для номенклатуры именно эту упаковку с такми коэффициентом ? 
	// - не надо запоминать - перемножается коэффициент ТОЛЬКО при сканировании !, не при ручном вводе
	//При ручном вводе - только Шт. на форме ввода кол-ва будет отображена езд. изм. и её коэффициент - чтобы кладовщики не путались
	
	КоличествоВведено = ?(ВводПоШтучно, КоэффициентУпаковкиШК, ОткрытьФормуМодально("Обработка.ТСД_РСК.Форма.ВводКоличестваРазмещениеТЗ", Новый Структура("Номенклатура, Размещено, Всего, Упаковка, Осталось", СтрокаТЧПоступления.Номенклатура, СтрокаТЧПоступления.КоличествоВРазмещенеии, СтрокаТЧПоступления.КоличествоВПоступлении, УпаковкаДляВводаКоличества, СтрокаТЧПоступления.Осталось)));
	Если (Не ЗначениеЗаполнено(КоличествоВведено)) ИЛИ (КоличествоВведено = 0) Тогда
		Предупреждение("Введите количество !");
		Возврат;
	КонецЕсли;
	
	Если (КоличествоВведено + СтрокаТЧПоступления.КоличествоВРазмещенеии) > СтрокаТЧПоступления.КоличествоВПоступлении Тогда
		МобильныйКлиент.ОповещениеПродолжительноеДваСигнала();	//Оповещение не удачного сканирования
		//Ответ = Вопрос("Превышено количество, должно быть не больше: "+ СтрокаТЧПоступления.КоличествоВПоступлении + " Добавить новую ?",режимДиалогаВопрос.ДаНет);
		Ответ = Вопрос("Товар по Поступлению будет превышен. Добавить ?",режимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			
		Иначе
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	//и записываем введенное кол-во в док-т размещение
	ЗаполнитьДобавитьНоменклатуруВРазмещение(СтрокаТЧПоступления, КоличествоВведено);
	
	//заполнить последний ввод
	ОчиститьПоследнийВвод();
	ЗаполнитьПоследнийВвод(СтрокаТЧПоступления.Номенклатура, КоличествоВведено);
	
	ВыделитьСтрокуСНоменклатуройЦветом(СтрокаТЧПоступления.Номенклатура);
	
	Фильтр = "Осталось";
	//обновить ТЗ
	ОбновитьТЗ1НаСервере();
	
	УстановитьТекущуюСтроку(СтрокаТЧПоступления.Номенклатура);
	
	МобильныйКлиент.ОповещениеКороткоеОдинСигнал();	//Оповещение удачного сканирования
КонецПроцедуры // ДобавитьНоменклатуруПоШтрихкоду()

&НаКлиенте
Процедура ЗаполнитьДобавитьНоменклатуруВРазмещение(Знач СтрокаТЧПоступления, Знач КоличествоВведено)
	
	СтрокаТЧПоступления.КоличествоВведено			= КоличествоВведено;
	
	ДобавитьНоменклатуруВРазмещение(СтрокаТЧПоступления);
	
КонецПроцедуры

&НаСервере
Процедура ВыделитьСтрокуСНоменклатуройЦветом(Знач Номенклатура)
	
	//условное оформление
	//УсловноеОформление.Элементы.Очистить()
	для каждого ЭлементУО из УсловноеОформление.Элементы Цикл
		
		Если ЭлементУО.Поля.Элементы[0].Поле = Новый ПолеКомпоновкиДанных("ТЗНоменклатура") Тогда
			ЭлементУО.Отбор.Элементы[0].ПравоеЗначение 	= Номенклатура;
			ЭлементУО.Отбор.Элементы[0].Использование	= Истина;
		
		КонецЕсли;
	КонецЦикла;
	
	//Элемент = УсловноеОформление.Элементы.Добавить();
	//
	//ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	//ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТЗНоменклатура");
	//
	//ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТЗ.Номенклатура");
	//ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//ОтборЭлемента.ПравоеЗначение = СтрокаТЧПоступления.Номенклатура;
	////Элемент.Использование = Истина;
	//
	//Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.СветлоЗолотистый);

КонецПроцедуры

&НаСервере
Процедура ДобавитьНоменклатуруВРазмещение(СтрокаТЧПоступления)
	Попытка
		Док = Размещение.ПолучитьОбъект();
		
		ОтветДаты = РСК_УчетРабот.ПолучитьДатуПервогоСканированияДатуПоследнегоСканирования(ТекущаяДата(), Док.ДатаПервогоСканирования, Док.ДатаПоследнегоСканирования);
		Док.ДатаПервогоСканирования = ОтветДаты.ДатаПервогоСканирования;
		Док.ДатаПоследнегоСканирования = ОтветДаты.ДатаПоследнегоСканирования;
		
		//МоментСканирования 	= ТекущаяДата();
		//ТекущиеСекунды		= число(Формат(МоментСканирования,"ДФ=ss"));
		//МоментСканирования 	= ?( ТекущиеСекунды > 30, МоментСканирования + (60 - ТекущиеСекунды), МоментСканирования - ТекущиеСекунды );
		//Если НЕ ЗначениеЗаполнено(Док.ДатаПервогоСканирования) Тогда
		//	Док.ДатаПервогоСканирования = МоментСканирования;
		//КонецЕсли;
		//Док.ДатаПоследнегоСканирования = МоментСканирования;
		
		Док.Ответственный = Пользователь;
		Док.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.ВРаботе;
		
		// - накапливаем при сканировании в СтрокаТЧ.Количество 
		
		
		// есть Ли в ТЧ уже такая номенклатура
		СтрокиТЧсНоменклатурой = Док.ТоварыРазмещение.НайтиСтроки(Новый Структура("Номенклатура",СтрокаТЧПоступления.Номенклатура));
		Если СтрокиТЧсНоменклатурой.Количество() = 1 Тогда
			СтрокиТЧсНоменклатурой[0].Количество					= СтрокиТЧсНоменклатурой[0].Количество 					+ СтрокаТЧПоступления.КоличествоВведено;
			СтрокиТЧсНоменклатурой[0].КоличествоУпаковок			= СтрокиТЧсНоменклатурой[0].КоличествоУпаковок 			+ СтрокаТЧПоступления.КоличествоВведено;
			
		Иначе
			НоваяСтрока = Док.ТоварыРазмещение.Добавить();
			НоваяСтрока.Номенклатура 				= СтрокаТЧПоступления.Номенклатура;
			Упаковка								= Справочники.УпаковкиНоменклатуры.НайтиПоРеквизиту("ЕдиницаИзмерения",СтрокаТЧПоступления.Номенклатура.ЕдиницаИзмерения,,СтрокаТЧПоступления.Номенклатура);
			НоваяСтрока.Упаковка					= Упаковка;
			НоваяСтрока.Количество					= СтрокаТЧПоступления.КоличествоВведено;
			НоваяСтрока.КоличествоУпаковок			= СтрокаТЧПоступления.КоличествоВведено;
			НоваяСтрока.Ячейка = Справочники.СкладскиеЯчейки.НайтиПоНаименованию("00000",,,ОсновнойСклад);
			
		КонецЕсли;
		
		Док.Записать(РежимЗаписиДокумента.Проведение);
		
	Исключение
		Сообщить("Ошибка при изменении размещения:"+ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры // ДобавитьНоменклатуруВРазмещение()

&НаСервере
Функция НайтиНоменклатуруПоШтрихкодуВРазмещнеииПоступлении(Знач Штрихкод)
	// искать номенклатуру по штрихкоду БЕЗ учета Упаковки по ТЧ Поступления! 
	//т.к. во многих номенклатурах нет штрихкода по ед. измерения ШТ
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
	|	ШтрихкодыНоменклатуры.Упаковка КАК УпаковкаШК
	|ПОМЕСТИТЬ ДанныеШК
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Штрихкод = &Штрихкод
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслугТовары.Номенклатура КАК Номенклатура,
	|	СУММА(ПоступлениеТоваровУслугТовары.Количество) КАК КоличествоВПоступлении,
	|	ПоступлениеТоваровУслугТовары.Упаковка
	|ПОМЕСТИТЬ ВПоступлении
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.Ссылка = &Поступление
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеТоваровУслугТовары.Номенклатура,
	|	ПоступлениеТоваровУслугТовары.Упаковка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтборРазмещениеТоваровТоварыРазмещение.Номенклатура КАК Номенклатура,
	|	СУММА(ОтборРазмещениеТоваровТоварыРазмещение.Количество) КАК КоличествоВРазмещении
	|ПОМЕСТИТЬ ВРазмещении
	|ИЗ
	|	Документ.ОтборРазмещениеТоваров.ТоварыРазмещение КАК ОтборРазмещениеТоваровТоварыРазмещение
	|ГДЕ
	|	ОтборРазмещениеТоваровТоварыРазмещение.Ссылка = &Размещение
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтборРазмещениеТоваровТоварыРазмещение.Номенклатура
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеШК.Номенклатура КАК Номенклатура,
	|	0 КАК КоличествоВведено,
	|	ЕСТЬNULL(ВПоступлении.КоличествоВПоступлении, 0) КАК КоличествоВПоступлении,
	|	ЕСТЬNULL(ВРазмещении.КоличествоВРазмещении, 0) КАК КоличествоВРазмещенеии,
	|	ВПоступлении.Упаковка,
	|	ДанныеШК.УпаковкаШК,
	|	ЕСТЬNULL(ДанныеШК.УпаковкаШК.Коэффициент, 0) КАК КоэффициентУпаковкиШК,
	|	ЕСТЬNULL(ВПоступлении.КоличествоВПоступлении, 0) - ЕСТЬNULL(ВРазмещении.КоличествоВРазмещении, 0) КАК Осталось
	|ИЗ
	|	ДанныеШК КАК ДанныеШК
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВПоступлении КАК ВПоступлении
	|		ПО ДанныеШК.Номенклатура = ВПоступлении.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВРазмещении КАК ВРазмещении
	|		ПО ДанныеШК.Номенклатура = ВРазмещении.Номенклатура";

	Запрос.УстановитьПараметр("Штрихкод", Штрихкод);
	Запрос.УстановитьПараметр("Поступление",Поступление);
	Запрос.УстановитьПараметр("Размещение",Размещение);

	Выборка = Запрос.Выполнить().Выбрать();
	СтрокаТЧПоступления = Новый Структура("Упаковка, Номенклатура, КоличествоВПоступлении, КоличествоВРазмещенеии, КоличествоВведено, УпаковкаШК, КоэффициентУпаковкиШК, Осталось");
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(СтрокаТЧПоступления,Выборка);
		
		//СтрокаТЧПоступления.КоэффициентУпаковки = УпаковкаШК.Коэффициент;
		//такой ли коэффициент если упаковка не конечная, а состоит из других упаковок
		// - такой
		
	КонецЕсли;
	Возврат СтрокаТЧПоступления;

	
КонецФункции // НайтиНоменклатуруПоШтрихкоду()

&НаКлиенте
Процедура ЭмитацияСканера(Команда)
	
	//ВвелиОсновноСклад = ВвестиЗначение(ОсновнойСклад,"Заполнить ОсновнойСклад",Тип("СправочникСсылка.Склады"));
	ШК =0;
	Если ВвестиЧисло(ШК,"Введите Штрихкод для имитации работы сканера",15,0) Тогда
		ШК = СокрЛП(Строка(ШК));
		ШК = СтрЗаменить(ШК, Символы.нпп,"");
		ОбработкаОповещения("Barcode",ШК,"ПодключаемоеОборудование");
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	//Сделать форму с динамическим набором реквизитов, список действий (массив структур), реквизитом выбранной номенклатурой
	// реквизиты создаются автоматически
	// + более красивое оформление, вид, желтые кнопочки, большой межстрочный интервал в отличчи от Списка дествий в функции Вопрос
	
	// может сделать открытие формы по старому, которая будет тут же возвращать что выбрали (действие) 
	// - также делал по-моему в выборе ячейки в Беседах
	
	//список действий
	МассивДействий = Новый Массив;
	МассивДействий.Добавить("ДобавитьКоличество");
	МассивДействий.Добавить("УдалитьКоличество");
	МассивДействий.Добавить("ОбнулитьКоличество");
	
	Парам = Новый Структура("МассивДействий, Номенклатура", МассивДействий, Элементы.тз.ТекущиеДанные.Номенклатура);
	Ответ = ОткрытьФормуМодально("Обработка.ТСД_РСК.Форма.ДействияСНоменклатурой",Парам);
	Если НЕ ЗначениеЗаполнено(Ответ) Тогда
		Возврат;
	КонецЕсли;
	
	УпаковкаДляВводаКоличества = ПолучитьУпаковкаДляВводаКоличества(Элементы.тз.ТекущиеДанные.Номенклатура);
	
	Если Ответ = "ОбнулитьКоличество" Тогда
		ОбнулитьКоличество(Элементы.тз.ТекущиеДанные.Номенклатура, Элементы.тз.ТекущиеДанные.Всего)
		
	ИначеЕсли Ответ = "УдалитьКоличество" Тогда
		КоличествоУдалить = ОткрытьФормуМодально("Обработка.ТСД_РСК.Форма.ВводКоличестваРазмещениеТЗ", Новый Структура("Номенклатура, Размещено, Всего, Упаковка, Осталось", Элементы.тз.ТекущиеДанные.Номенклатура, Элементы.тз.ТекущиеДанные.Размещено, Элементы.тз.ТекущиеДанные.Всего, УпаковкаДляВводаКоличества, Элементы.тз.ТекущиеДанные.Осталось));
		КоличествоУдалить = ?(ЗначениеЗаполнено(КоличествоУдалить), КоличествоУдалить, 0);
		
		Если КоличествоУдалить > 0 Тогда
			УдалитьКоличество(Элементы.тз.ТекущиеДанные.Номенклатура, КоличествоУдалить, Элементы.тз.ТекущиеДанные.Всего);
		КонецЕсли;
		
	ИначеЕсли Ответ = "ДобавитьКоличество" Тогда
		КоличествоДобавить = ОткрытьФормуМодально("Обработка.ТСД_РСК.Форма.ВводКоличестваРазмещениеТЗ", Новый Структура("Номенклатура, Размещено, Всего, Упаковка, Осталось", Элементы.тз.ТекущиеДанные.Номенклатура, Элементы.тз.ТекущиеДанные.Размещено, Элементы.тз.ТекущиеДанные.Всего, УпаковкаДляВводаКоличества, Элементы.тз.ТекущиеДанные.Осталось));
		КоличествоДобавить = ?(ЗначениеЗаполнено(КоличествоДобавить), КоличествоДобавить, 0);
		
		Если КоличествоДобавить > 0 Тогда
			
			Если (КоличествоДобавить + Элементы.тз.ТекущиеДанные.Размещено) > Элементы.тз.ТекущиеДанные.Всего Тогда
				МобильныйКлиент.ОповещениеПродолжительноеДваСигнала();	//Оповещение не удачного сканирования
				//Ответ = Вопрос("Превышено количество, должно быть не больше: "+ СтрокаТЧПоступления.КоличествоВПоступлении + " Добавить новую ?",режимДиалогаВопрос.ДаНет);
				Ответ = Вопрос("Товар по Поступлению будет превышен. Добавить ?",режимДиалогаВопрос.ДаНет);
				Если Ответ = КодВозвратаДиалога.Да Тогда
					//ничего не длаем, ниже добавляем в док-т размещение	
				Иначе
					Возврат;
				КонецЕсли;
				
			КонецЕсли;
			
			ДобавитьКоличество(Элементы.тз.ТекущиеДанные.Номенклатура, КоличествоДобавить, Элементы.тз.ТекущиеДанные.Всего);
		КонецЕсли;
		
	ИначеЕсли Ответ = "Отмена" Тогда
		//ничего не делаем
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьУпаковкаДляВводаКоличества(Номенклатура)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоступлениеТоваровУслугТовары.Упаковка
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
		|ГДЕ
		|	ПоступлениеТоваровУслугТовары.Ссылка = &Поступление
		|	И ПоступлениеТоваровУслугТовары.Номенклатура = &Номенклатура";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Поступление", Поступление);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Упаковка;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ОбнулитьКоличество(Номенклатура, Всего)
	
	ОбнулитьКоличествоНаСервере(Номенклатура);
	Если Всего = 0 Тогда
		ОбнулитьВПриходномОрдере(Номенклатура);	
	КонецЕсли;
	ОбновитьТЗ1НаСервере();
	ВыделитьСтрокуСНоменклатуройЦветом(Номенклатура);
	УстановитьТекущуюСтроку(Номенклатура);
	МобильныйКлиент.ОповещениеКороткоеОдинСигнал();	//Оповещение удачного сканирования
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущуюСтроку(Знач Номенклатура)
	
	Перем СтрокиСНоменклатурой;
	
	//выделить строку с отсканированной номенклатурой
	СтрокиСНоменклатурой = ТЗ.НайтиСтроки(Новый Структура("Номенклатура",Номенклатура));
	Если СтрокиСНоменклатурой.Количество() > 0 тогда
		Элементы.тз.ТекущаяСтрока = СтрокиСНоменклатурой[0].ПолучитьИдентификатор();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбнулитьКоличествоНаСервере(Номенклатура)

	Попытка
	
		Док = Размещение.ПолучитьОбъект();
		строки = Док.ТоварыРазмещение.НайтиСтроки(Новый Структура("Номенклатура",Номенклатура));
		Для Каждого Стр из строки Цикл
			Док.ТоварыРазмещение.Удалить(стр);
			
		КонецЦикла;
		
		Док.Записать(РежимЗаписиДокумента.Проведение);
	
	Исключение
		Сообщить("Ошибка записи Размещения "+ОписаниеОшибки());
	КонецПопытки;
	

КонецПроцедуры

&НаКлиенте
Процедура УдалитьКоличество(Номенклатура, КоличествоУдалить, Всего)
	Попытка
		УдалитьКоличествоНаСервере(Номенклатура, КоличествоУдалить);
		//убрал это -
		//// если номенклатуры нет из начально в поступлении,
		//// нужно перед удалением ном-ры из приход ордера - удалить её из размещения
		//// как это делается при сканировании, только в обратном порядке при добавлении
		////Если Всего = 0 Тогда
		//	УдалитьВПриходномОрдере(Номенклатура, КоличествоУдалить);
		//КонецЕсли;
		ОбновитьТЗ1НаСервере();
		ВыделитьСтрокуСНоменклатуройЦветом(Номенклатура);
		УстановитьТекущуюСтроку(Номенклатура);
		МобильныйКлиент.ОповещениеКороткоеОдинСигнал();	//Оповещение удачного сканирования
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры

&НаСервере
Процедура УдалитьКоличествоНаСервере(Номенклатура, КоличествоУдалить)

	Попытка
	
		Док = Размещение.ПолучитьОбъект();
		строки = Док.ТоварыРазмещение.НайтиСтроки(Новый Структура("Номенклатура",Номенклатура));
		Для Каждого Стр из строки Цикл
			ОстатокКоличество = Стр.Количество - КоличествоУдалить;
			Если ОстатокКоличество = 0 Тогда
				Док.ТоварыРазмещение.Удалить(стр);
			Иначе
				Стр.Количество 			= ОстатокКоличество;
				Стр.КоличествоУпаковок 	= ОстатокКоличество;
			КонецЕсли;

		КонецЦикла;
		
		Док.Записать(РежимЗаписиДокумента.Проведение);
	
	Исключение
		Сообщить("Ошибка записи Размещения "+ОписаниеОшибки());
	КонецПопытки;
	


КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКоличество(Номенклатура, КоличествоДобавить, Всего)
	Попытка
		//убрал это -
		//// если номенклатуры нет из начально в поступлении,
		//// нужно перед добавление ном-ры в размещении - добавлять её в приходный ордер
		//// как это делается при сканировании
		//Если Всего = 0 Тогда
		//	ДобавитьВПриходныйОрдер(Номенклатура, КоличествоДобавить);
		//КонецЕсли;
		ДобавитьКоличествоНаСервере(Номенклатура, КоличествоДобавить);
		
		//заполнить последний ввод
		ОчиститьПоследнийВвод();
		ЗаполнитьПоследнийВвод(Номенклатура, КоличествоДобавить);
		
		ОбновитьТЗ1НаСервере();
		ВыделитьСтрокуСНоменклатуройЦветом(Номенклатура);
		УстановитьТекущуюСтроку(Номенклатура);
		МобильныйКлиент.ОповещениеКороткоеОдинСигнал();	//Оповещение удачного сканирования
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКоличествоНаСервере(Номенклатура, КоличествоДобавить)

	// нужно учитывать что возможно придется добавлять новую номенклатуру в ТЧ ТоварыРазмещение документа РазмещениеТоваров
	СтрокаТЧпоступления = Новый Структура("Номенклатура, КоличествоВведено",Номенклатура, КоличествоДобавить);
	ДобавитьНоменклатуруВРазмещение(СтрокаТЧпоступления);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПоследнийВвод(Команда)
	
	
	//удалить Строку 
	//	ПоследнийВвод[0].Номенклатура
	//	ПоследнийВвод[0].Размещено
	//из ТЧ Размещено документа РазмещениеТоваров
	Если ПоследнийВвод.Количество() > 0 Тогда
		ОтменитьПоследнийВводНаСервере(ПоследнийВвод[0].Номенклатура, ПоследнийВвод[0].Размещено);
		
		
		//ВыделитьСтрокуСНоменклатуройЦветом(ПоследнийВвод[0].Номенклатура);
		
		//обновть ТЗ
		ОбновитьТЗ1НаСервере();
		
		УстановитьТекущуюСтроку(ПоследнийВвод[0].Номенклатура);
		
		ОчиститьПоследнийВвод();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьПоследнийВводНаСервере(Номенклатура, КоличествоБылоВведено)
	строки = ТЗ.НайтиСтроки(Новый Структура("Номенклатура",Номенклатура));
	Если строки[0].Всего = 0 Тогда
		УдалитьВПриходномОрдере(Номенклатура, КоличествоБылоВведено);	
	КонецЕсли;
	
	Попытка
	
		Док = Размещение.ПолучитьОбъект();
		строки = Док.ТоварыРазмещение.НайтиСтроки(Новый Структура("Номенклатура",Номенклатура));
		Для Каждого Стр из строки Цикл
			ОстатокКоличество = Стр.Количество - КоличествоБылоВведено;
			Если ОстатокКоличество = 0 Тогда
				Док.ТоварыРазмещение.Удалить(стр);
			Иначе
				Стр.Количество = ОстатокКоличество;
				Стр.КоличествоУпаковок = ОстатокКоличество;
			КонецЕсли;
		КонецЦикла;
		
		Док.Записать(РежимЗаписиДокумента.Проведение);
	
	Исключение
		Сообщить("Ошибка записи Размещения "+ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьПоследнийВвод()

	ПоследнийВвод.Очистить();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоследнийВвод(Номенклатура, Количество)

	нс = ПоследнийВвод.Добавить();
	нс.Номенклатура = Номенклатура;
	нс.Размещено	= Количество;

КонецПроцедуры

&НаСервере
Процедура УстановитьСтатусПоступления(РасхожденияСуществуют)

	Попытка
	
		Док = Поступление.ПолучитьОбъект();
		Док.Статус = ?(РасхожденияСуществуют, 	Перечисления.СтатусыПоступленийТоваров.ВыполненоСОшибками, 
												Перечисления.СтатусыПоступленийТоваров.ВыполненоБезОшибок);
		//Приемка ТМЦ
		РСК_УчетРабот.ЗаписатьРаботу(Истина, Док.Ссылка, Справочники.РСК_ВыполняемыеРаботы.ПриемкаТМЦ, Пользователь.ФизическоеЛицо, Размещение.ДатаПервогоСканирования, ТекущаяДатаСеанса());
		//Док.ДатаНачалаР = Размещение.ДатаПервогоСканирования;										
		//Док.ДатаОкончанияР = ТекущаяДата();		//Размещение.ДатаПоследнегоСканирования; ???
		//Док.Ответственный1 = Пользователь.ФизическоеЛицо;
		Док.Записать(РежимЗаписиДокумента.Проведение);
	
	Исключение
		Сообщить("Ошибка при изменении Поступления "+ОписаниеОшибки());
	КонецПопытки;	

КонецПроцедуры

&НаСервере
Функция ПровестиРасходСДавальцаНаСервере(Док)
	
	Рез = Документы.ЗаказНаВнутреннееПотребление.НайтиПоНомеру(Док.Номер, Док.Дата);
	Если НЕ Рез.Пустая() Тогда
		Возврат 0;		
	Иначе	
		 Если СозданиеДокументов.СоздатьЗаказНаВнутреннееПотребление(Док, Истина) Тогда
			ДокОб = Док.ПолучитьОбъект();
			ДокОб.РасходСДавальца = Истина;
			ДокОб.Записать();
			Возврат 2;
		Иначе
			Возврат 1;
		КонецЕсли;
	КонецЕсли;
КонецФункции

&НаСервере
Процедура ДобавитьВПриходныйОрдер(Номенклатура, КоличествоВведено)

	Попытка
		ПриходОрдер = Размещение.Распоряжение.ПолучитьОбъект();
		строки = ПриходОрдер.Товары.НайтиСтроки(Новый Структура("Номенклатура",Номенклатура));
		Если строки.Количество() > 0 Тогда
			строки[0].Количество 			= строки[0].Количество 			+ КоличествоВведено;
			строки[0].КоличествоУпаковок 	= строки[0].КоличествоУпаковок 	+ КоличествоВведено;
			
		Иначе
			нс = ПриходОрдер.Товары.Добавить();
			нс.Номенклатура 		= Номенклатура;
			нс.Количество 			= КоличествоВведено;
			нс.КоличествоУпаковок 	= КоличествоВведено;
			Упаковка				= Справочники.УпаковкиНоменклатуры.НайтиПоРеквизиту("ЕдиницаИзмерения",Номенклатура.ЕдиницаИзмерения,,Номенклатура);
			нс.Упаковка				= Упаковка;
		КонецЕсли;
		ПриходОрдер.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		Сообщить("Ошибка при изменении Приходного ордера "+ОписаниеОшибки());
	КонецПопытки

КонецПроцедуры

&НаСервере
Процедура УдалитьВПриходномОрдере(Номенклатура, КоличествоУдалить)

	Попытка
		ПриходОрдер = Размещение.Распоряжение.ПолучитьОбъект();
		строки = ПриходОрдер.Товары.НайтиСтроки(Новый Структура("Номенклатура",Номенклатура));
		Если строки.Количество() > 0 Тогда
			Остаток = строки[0].Количество - КоличествоУдалить;
			Если Остаток = 0 Тогда
				ПриходОрдер.Товары.Удалить(строки[0]);
			Иначе
				строки[0].Количество 			= Остаток;
				строки[0].КоличествоУпаковок 	= Остаток;
			КонецЕсли;
			ПриходОрдер.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
	Исключение
		Сообщить("Ошибка при изменении Приходного ордера "+ОписаниеОшибки());
	КонецПопытки

КонецПроцедуры

&НаСервере
Процедура ОбнулитьВПриходномОрдере(Номенклатура)

	Попытка
		ПриходОрдер = Размещение.Распоряжение.ПолучитьОбъект();
		строки = ПриходОрдер.Товары.НайтиСтроки(Новый Структура("Номенклатура",Номенклатура));
		Если строки.Количество() > 0 Тогда
			ПриходОрдер.Товары.Удалить(строки[0]);
			ПриходОрдер.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
	Исключение
		Сообщить("Ошибка при изменении Приходного ордера "+ОписаниеОшибки());
	КонецПопытки

КонецПроцедуры

&НаКлиенте
Процедура Завершение(Команда)
	
	Статусы = ПолучитьСтатусы();
	
	
	Если НЕ Статусы.РасхожденияСуществуют Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить("Завершить");
		Кнопки.Добавить("Выйти");
		
		Ответ = Вопрос("Расхождений по Поступлению нет. Завершить ?",РежимДиалогаВопрос.ДаНет,,,"Выход");
		Если Ответ = КодВозвратаДиалога.Да Тогда
			
			
			ЗавершитьРазмещение(Статусы);
			
			УстановитьСтатусПоступления(Статусы.РасхожденияСуществуют);
			
			//Сделать "Расход с Давальца"
			Результат = ПровестиРасходСДавальцаНаСервере(Поступление);
			Если Результат = 0 Тогда
				//Предупреждение("Списание со Склада хран. Давальца уже произведено!!!");
			ИначеЕсли Результат = 1 Тогда
				Предупреждение("Списание со Склада хран. Давальца не выполнено!!!");
			ИначеЕсли Результат = 2 Тогда
				//Предупреждение("Выполнено списание со Склада хран. Давальца!!!");
			КонецЕсли;
			
			
		Иначе 
			// ничего не далаем
			Возврат;
			
		КонецЕсли;
		
		
	
	Иначе
		//расхождения есть
		Ответ = Вопрос("Существуют расхождения. Завершить ?",РежимДиалогаВопрос.ДаНет,,,"ВЫХОД");
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		Иначе
			//завершаем с расхождениями ,с ошибкой
			//расход с Давальца не делаем - сделают сами операторы при перевода Поступления в статус - без ошибок
			
			ЗавершитьРазмещение(Статусы);
			
			УстановитьСтатусПоступления(Статусы.РасхожденияСуществуют);
			
		КонецЕсли;
		
		
		
		
	КонецЕсли;
	ЗакрытиеПриЗавершении = Истина;
	Закрыть();
	
	
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтатусы()

	СверхНормы = Ложь;	//чтобы понимать изменять Поступление с признаком Расхождения существуют или нет, 
	//для того чтобы операторы видели по Поступлению что есть "лишняя" ном-ра, сверх нормы. Тогда операторы согласуют это с отделом закупок через письменное подтверждение,
	// и после подтверждения - изменяют Размещение ("кол-во к размещению" становится равно "кол-ву размещено") и Поступление..
	РасхожденияСуществуют = Ложь;
	//ТЗобщая = ОбновитьТЗ();
	ТЗобщая = ПолучитьТЗПолную();
	//
	Для каждого Стр из ТЗобщая Цикл
		Если Стр.Всего <> Стр.Размещено Тогда
			РасхожденияСуществуют = Истина;
		КонецЕсли;
		Если Стр.Размещено > Стр.Всего Тогда
			СверхНормы = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура("РасхожденияСуществуют, СверхНормы",РасхожденияСуществуют, СверхНормы);
	
КонецФункции // ПолучитьСтатусы()


&НаСервере
Процедура ЗавершитьРазмещение(Статусы)
	
	Попытка	
		
		Размещ = Размещение.ПолучитьОбъект();
		Размещ.Статус = ?(Статусы.РасхожденияСуществуют, 	Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоСОшибками, 
													Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоБезОшибок);
		
		ТЗобщая = ПолучитьТЗПолную();
		//наоборот - надо искать каждую номенклатуру из ТЗобщая в Размещ.ТоварыРазмещение 
		Для каждого Стр из ТЗобщая Цикл
			//Стр.Размещено
			//Стр.Всего
			
			//колонку "Размещено" 	из ТЗобщая в "КоличествоРазмещено, 	КоличествоУпаковокРазмещено"- Размещено		-ТЧ ТоварыРазмещения док-та Размещения
			
			//колонку "Всего"		из ТЗобщая в "Количество,			КоличествоУпаковок" 		- К Размещению 	-ТЧ ТоварыРазмещения док-та Размещения
			
			//изначально
			//строкиРазмещения[0].Количество 		- сколько по факту отгрузили
			//строкиРазмещения[0].КоличествоУпаковок- сколько по факту отгрузили
			
			строкиРазмещения = Размещ.ТоварыРазмещение.НайтиСтроки(Новый Структура("Номенклатура", Стр.Номенклатура));
			Если строкиРазмещения.Количество() = 0 Тогда
				
				нс = Размещ.ТоварыРазмещение.Добавить();
				нс.Номенклатура = Стр.Номенклатура;
				нс.Упаковка = НайтиУпаковкуПоПоступлению(нс.Номенклатура);
				нс.Ячейка = Справочники.СкладскиеЯчейки.НайтиПоНаименованию("00000",,,ОсновнойСклад);
				
				//по факту
				нс.КоличествоРазмещено = 0;
				нс.КоличествоУпаковокРазмещено = 0;
				
				//по плану
				нс.Количество = Стр.Всего;
				нс.КоличествоУпаковок = Стр.Всего;
				
				
				
			ИначеЕсли строкиРазмещения.Количество() > 0 Тогда
				
				Если Статусы.РасхожденияСуществуют Тогда
					//по факту
					строкиРазмещения[0].КоличествоРазмещено 		= Стр.Размещено;
					строкиРазмещения[0].КоличествоУпаковокРазмещено = Стр.Размещено;
					
					//по плану
					строкиРазмещения[0].Количество			= Стр.Всего;
					строкиРазмещения[0].КоличествоУпаковок	= Стр.Всего;
					
				Иначе
					//в этом случае получается Стр.Размещено = Стр.Всего
					//по плану и по факту равняется
					строкиРазмещения[0].Количество			= Стр.Размещено;
					строкиРазмещения[0].КоличествоУпаковок	= Стр.Размещено;
					
					строкиРазмещения[0].КоличествоРазмещено 		= Стр.Размещено;
					строкиРазмещения[0].КоличествоУпаковокРазмещено = Стр.Размещено;
					
				КонецЕсли;
				
					
				
				
				
			КонецЕсли;
			
			
		КонецЦикла;
				
		
		Размещ.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		Сообщить("Ошибка при изменении Размещения "+ОписаниеОшибки());
	КонецПопытки;
	
	
КонецПроцедуры // ПолучитьТЗЗавершения()

&НаСервере
Функция НайтиУпаковкуПоПоступлению(Номенклатура)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоступлениеТоваровУслугТовары.Упаковка
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
		|ГДЕ
		|	ПоступлениеТоваровУслугТовары.Ссылка = &Поступление
		|	И ПоступлениеТоваровУслугТовары.Номенклатура = &Номенклатура";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Поступление", Поступление);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Упаковка;
	КонецЦикла;
	
	Возврат Справочники.УпаковкиНоменклатуры.ПустаяСсылка();

КонецФункции // НайтиУпаковкуПоПоступлению()


&НаСервере
Функция РасхожденияСуществуют()
	
	ТЗПолная = ПолучитьТЗПолную();
	для каждого стр из ТЗПолная цикл
		
		Если стр.Всего <> стр.Размещено тогда
			Возврат Истина;
		КонецЕсли;
		
	конеццикла;
	
	Возврат ложь;
	
	
КонецФункции

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	Если НЕ ЗакрытиеПриЗавершении Тогда
		
		
		Если РасхожденияСуществуют() Тогда
			Ответ = Вопрос("Есть РАСХОЖДЕНИЯ. Выйти ?",РежимДиалогаВопрос.ДаНет,,,"ВЫХОД");
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				Отказ = Истина;
			Иначе
				//выходим
			КонецЕсли;
			
		Иначе
			
			//Если Расхождений НЕТ
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить("Завершить");
			Кнопки.Добавить("Выйти");
			
			Ответ = Вопрос("Расхождений по Поступлению нет. Завершить или выйти ?",Кнопки,,,"Выход");
			Если Ответ = "Завершить" Тогда
				
				//завершитьдокумент
				//ЗакрытиеПриЗавершении = Истина;		//смысла в этом скорее всего нет, т.к. ставим признак в  Завершение()
				Завершение(Неопределено);
				
			ИначеЕсли Ответ = "Выйти" Тогда 
				//выходим
			КонецЕсли;
			
		КонецЕсли;
		
		
		
		//Если НЕ ЗакрытиеПриЗавершении Тогда
		//	Ответ = Вопрос("Закрыть документ ?",РежимДиалогаВопрос.ДаНет,,,,);
		//	Если Ответ = КодВозвратаДиалога.Да Тогда
		//		Закрыть();
		//	Иначе
		//		Отказ = Истина;
		//	КонецЕсли;
		//КонецЕсли;
		
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФильтрПриИзменении(Элемент)
	ОбновитьТЗ1НаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПоШтучно(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры
